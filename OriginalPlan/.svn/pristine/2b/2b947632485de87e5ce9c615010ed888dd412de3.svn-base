class wxStyledTextCtrl : public wxControl
{

    wxStyledTextCtrl(wxWindow *parent, wxWindowID id, const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize, long style = 0, const wxString &name = "wxStyledTextCtrl" );


    //}}}
    //----------------------------------------------------------------------
    // BEGIN generated section. The following code is automatically generated
    // by gen_iface.py. Do not edit this file. Edit stc.h.in instead
    // and regenerate


    // Add text to the document at current position.
    void AddText(const wxString& text);

    // Add array of cells to document.
    //void AddStyledText(const wxMemoryBuffer& data);

    // Insert string at a position.
    void InsertText(int pos, const wxString& text);

    // Delete all text in the document.
    void ClearAll();

    // Delete a range of text in the document.
    %wxchkver_2_9_5 void DeleteRange(int pos, int deleteLength);

    // Set all style bytes to 0, remove all folding information.
    void ClearDocumentStyle();

    // Returns the number of bytes in the document.
    int GetLength() const;

    // Returns the character byte at the position.
    int GetCharAt(int pos) const;

    // Returns the position of the caret.
    int GetCurrentPos() const;

    // Returns the position of the opposite end of the selection to the caret.
    int GetAnchor() const;

    // Returns the style byte at the position.
    int GetStyleAt(int pos) const;

    // Redoes the next action on the undo history.
    void Redo();

    // Choose between collecting actions into the undo
    // history and discarding them.
    void SetUndoCollection(bool collectUndo);

    // Select all the text in the document.
    void SelectAll();

    // Remember the current position in the undo history as the position
    // at which the document was saved.
    void SetSavePoint();

    // Retrieve a buffer of cells.
    //wxMemoryBuffer GetStyledText(int startPos, int endPos);

    // Are there any redoable actions in the undo history?
    bool CanRedo() const;

    // Retrieve the line number at which a particular marker is located.
    int MarkerLineFromHandle(int handle);

    // Delete a marker.
    void MarkerDeleteHandle(int handle);

    // Is undo history being collected?
    bool GetUndoCollection() const;

    // Are white space characters currently visible?
    // Returns one of SCWS_* constants.
    int GetViewWhiteSpace() const;

    // Make white space characters invisible, always visible or visible outside indentation.
    void SetViewWhiteSpace(int viewWS);

    // Find the position from a point within the window.
    int PositionFromPoint(const wxPoint& pt) const;

    // Find the position from a point within the window but return
    // INVALID_POSITION if not close to text.
    int PositionFromPointClose(int x, int y);

    // Set caret to start of a line and ensure it is visible.
    void GotoLine(int line);

    // Set caret to a position and ensure it is visible.
    void GotoPos(int pos);

    // Set the selection anchor to a position. The anchor is the opposite
    // end of the selection from the caret.
    void SetAnchor(int posAnchor);

    // Retrieve the text of the line containing the caret.
    // Returns the index of the caret on the line.
    //#ifdef SWIG
    // wxString GetCurLine(int* OUTPUT);
    //#else
    // %override [int linePos] wxStyledTextCtrl::GetCurLine( );
    // C++ Func: wxString GetCurLine(int* linePos=NULL);
    wxString GetCurLine();
    //#endif

    // Retrieve the position of the last correctly styled character.
    int GetEndStyled() const;

    // Convert all line endings in the document to one mode.
    void ConvertEOLs(int eolMode);

    // Retrieve the current end of line mode - one of CRLF, CR, or LF.
    int GetEOLMode() const;

    // Set the current end of line mode.
    void SetEOLMode(int eolMode);

    // Set the current styling position to pos and the styling mask to mask.
    // The styling mask can be used to protect some bits in each styling byte from modification.
    void StartStyling(int pos, unsigned int mask); // wxLua - mask is unsigned to keep all the bits

    // Change style from current styling position for length characters to a style
    // and move the current styling position to after this newly styled segment.
    void SetStyling(int length, int style);

    // Is drawing done first into a buffer or direct to the screen?
    bool GetBufferedDraw() const;

    // If drawing is buffered then each line of text is drawn into a bitmap buffer
    // before drawing it to the screen to avoid flicker.
    void SetBufferedDraw(bool buffered);

    // Change the visible size of a tab to be a multiple of the width of a space character.
    void SetTabWidth(int tabWidth);

    // Retrieve the visible size of a tab.
    int GetTabWidth() const;

    // Set the code page used to interpret the bytes of the document as characters.
    void SetCodePage(int codePage);

    // Set the symbol used for a particular marker number,
    // and optionally the fore and background colours.
    void MarkerDefine(int markerNumber, int markerSymbol, const wxColour& foreground = wxNullColour, const wxColour& background = wxNullColour);

    // Set the foreground colour used for a particular marker number.
    void MarkerSetForeground(int markerNumber, const wxColour& fore);

    // Set the background colour used for a particular marker number.
    void MarkerSetBackground(int markerNumber, const wxColour& back);

    // Set the background colour used for a particular marker number when its folding block is selected.
    %wxchkver_2_9_5 void MarkerSetBackgroundSelected(int markerNumber, const wxColour& back);

    // Enable/disable highlight for current folding bloc (smallest one that contains the caret)
    %wxchkver_2_9_5 void MarkerEnableHighlight(bool enabled);

    // Add a marker to a line, returning an ID which can be used to find or delete the marker.
    int MarkerAdd(int line, int markerNumber);

    // Delete a marker from a line.
    void MarkerDelete(int line, int markerNumber);

    // Delete all markers with a particular number from all lines.
    void MarkerDeleteAll(int markerNumber);

    // Get a bit mask of all the markers set on a line.
    unsigned int MarkerGet(int line); // wxLua - mask is unsigned to keep all the bits

    // Find the next line at or after lineStart that includes a marker in mask.
    // Return -1 when no more lines.
    int MarkerNext(int lineStart, unsigned int markerMask); // wxLua - mask is unsigned to keep all the bits

    // Find the previous line before lineStart that includes a marker in mask.
    int MarkerPrevious(int lineStart, unsigned int markerMask); // wxLua - mask is unsigned to keep all the bits

    // Define a marker from a bitmap
    void MarkerDefineBitmap(int markerNumber, const wxBitmap& bmp);

    // Add a set of markers to a line.
    void MarkerAddSet(int line, int set);

    // Set the alpha used for a marker that is drawn in the text area, not the margin.
    %wxchkver_2_8_12 void MarkerSetAlpha(int markerNumber, int alpha);

    // Set a margin to be either numeric or symbolic.
    void SetMarginType(int margin, int marginType);

    // Retrieve the type of a margin.
    int GetMarginType(int margin) const;

    // Set the width of a margin to a width expressed in pixels.
    void SetMarginWidth(int margin, int pixelWidth);

    // Retrieve the width of a margin in pixels.
    int GetMarginWidth(int margin) const;

    // Set a mask that determines which markers are displayed in a margin.
    void SetMarginMask(int margin, unsigned int mask); // NOTE: wxSTC has "int mask", but we need all the bits so we force uint

    // Retrieve the marker mask of a margin.
    unsigned int GetMarginMask(int margin) const;

    // Make a margin sensitive or insensitive to mouse clicks.
    void SetMarginSensitive(int margin, bool sensitive);

    // Retrieve the mouse click sensitivity of a margin.
    bool GetMarginSensitive(int margin) const;

    // Set the cursor shown when the mouse is inside a margin.
    %wxchkver_2_9_5 void SetMarginCursor(int margin, int cursor);

    // Retrieve the cursor shown in a margin.
    %wxchkver_2_9_5 int GetMarginCursor(int margin) const;

    // Clear all the styles and make equivalent to the global default style.
    void StyleClearAll();

    // Set the foreground colour of a style.
    void StyleSetForeground(int style, const wxColour& fore);

    // Set the background colour of a style.
    void StyleSetBackground(int style, const wxColour& back);

    // Set a style to be bold or not.
    void StyleSetBold(int style, bool bold);

    // Set a style to be italic or not.
    void StyleSetItalic(int style, bool italic);

    // Set the size of characters of a style.
    void StyleSetSize(int style, int sizePoints);

    // Set the font of a style.
    void StyleSetFaceName(int style, const wxString& fontName);

    // Set a style to have its end of line filled or not.
    void StyleSetEOLFilled(int style, bool filled);

    // Reset the default style to its state at startup
    void StyleResetDefault();

    // Set a style to be underlined or not.
    void StyleSetUnderline(int style, bool underline);

    // Get the foreground colour of a style.
    %wxchkver_2_9_5 wxColour StyleGetForeground(int style) const;

    // Get the background colour of a style.
    %wxchkver_2_9_5 wxColour StyleGetBackground(int style) const;

    // Get is a style bold or not.
    %wxchkver_2_9_5 bool StyleGetBold(int style) const;

    // Get is a style italic or not.
    %wxchkver_2_9_5 bool StyleGetItalic(int style) const;

    // Get the size of characters of a style.
    %wxchkver_2_9_5 int StyleGetSize(int style) const;

    // Get the font facename of a style
    %wxchkver_2_9_5 wxString StyleGetFaceName(int style);

    // Get is a style to have its end of line filled or not.
    %wxchkver_2_9_5 bool StyleGetEOLFilled(int style) const;

    // Get is a style underlined or not.
    %wxchkver_2_9_5 bool StyleGetUnderline(int style) const;

    // Get is a style mixed case, or to force upper or lower case.
    %wxchkver_2_9_5 int StyleGetCase(int style) const;

    // Get the character set of the font in a style.
    %wxchkver_2_9_5 int StyleGetCharacterSet(int style) const;

    // Get is a style visible or not.
    %wxchkver_2_9_5 bool StyleGetVisible(int style) const;

    // Get is a style changeable or not (read only).
    // Experimental feature, currently buggy.
    %wxchkver_2_9_5 bool StyleGetChangeable(int style) const;

    // Get is a style a hotspot or not.
    %wxchkver_2_9_5 bool StyleGetHotSpot(int style) const;

    // Set a style to be mixed case, or to force upper or lower case.
    void StyleSetCase(int style, int caseForce);

    // Set the size of characters of a style. Size is in points multiplied by 100.
    %wxchkver_2_9_5 void StyleSetSizeFractional(int style, int caseForce);

    // Get the size of characters of a style in points multiplied by 100
    %wxchkver_2_9_5 int StyleGetSizeFractional(int style) const;

    // Set the weight of characters of a style.
    %wxchkver_2_9_5 void StyleSetWeight(int style, int weight);

    // Get the weight of characters of a style.
    %wxchkver_2_9_5 int StyleGetWeight(int style) const;

    // Set a style to be a hotspot or not.
    void StyleSetHotSpot(int style, bool hotspot);

    // Set the foreground colour of the main and additional selections and whether to use this setting.
    void SetSelForeground(bool useSetting, const wxColour& fore);

    // Set the background colour of the main and additional selections and whether to use this setting.
    void SetSelBackground(bool useSetting, const wxColour& back);

    // Get the alpha of the selection.
    %wxchkver_2_8_12 int GetSelAlpha() const;

    // Set the alpha of the selection.
    %wxchkver_2_8_12 void SetSelAlpha(int alpha);

    // Is the selection end of line filled?
    %wxchkver_2_9_5 bool GetSelEOLFilled() const;

    // Set the selection to have its end of line filled or not.
    %wxchkver_2_9_5 void SetSelEOLFilled(bool filled);

    // Set the foreground colour of the caret.
    void SetCaretForeground(const wxColour& fore);

    // When key+modifier combination km is pressed perform msg.
    void CmdKeyAssign(int key, int modifiers, int cmd);

    // When key+modifier combination km is pressed do nothing.
    void CmdKeyClear(int key, int modifiers);

    // Drop all key mappings.
    void CmdKeyClearAll();

    // Set the styles for a segment of the document.

    // %override [Lua string styleBytes] wxStyledTextCtrl::SetStyleBytes(int length, Lua string styleBytes );
    // C++ Func: void SetStyleBytes(int length, char* styleBytes);
    void SetStyleBytes(int length, char* styleBytes);

    // Set a style to be visible or not.
    void StyleSetVisible(int style, bool visible);

    // Get the time in milliseconds that the caret is on and off.
    int GetCaretPeriod() const;

    // Get the time in milliseconds that the caret is on and off. 0 = steady on.
    void SetCaretPeriod(int periodMilliseconds);

    // Set the set of characters making up words for when moving or selecting by word.
    // First sets defaults like SetCharsDefault.
    void SetWordChars(const wxString& characters);

    // Get the set of characters making up words for when moving or selecting by word.
    %wxchkver_2_9_5 wxString GetWordChars() const;

    // Start a sequence of actions that is undone and redone as a unit.
    // May be nested.
    void BeginUndoAction();

    // End a sequence of actions that is undone and redone as a unit.
    void EndUndoAction();

    // Set an indicator to plain, squiggle or TT.
    void IndicatorSetStyle(int indic, int style);

    // Retrieve the style of an indicator.
    int IndicatorGetStyle(int indic) const;

    // Set the foreground colour of an indicator.
    void IndicatorSetForeground(int indic, const wxColour& fore);

    // Retrieve the foreground colour of an indicator.
    wxColour IndicatorGetForeground(int indic) const;

    // Set an indicator to draw under text or over(default).
    %wxchkver_2_9_5 void IndicatorSetUnder(int indic, bool under);

    // Retrieve whether indicator drawn under or over text.
    %wxchkver_2_9_5 bool IndicatorGetUnder(int indic) const;

    // Set the foreground colour of all whitespace and whether to use this setting.
    void SetWhitespaceForeground(bool useSetting, const wxColour& fore);

    // Set the background colour of all whitespace and whether to use this setting.
    void SetWhitespaceBackground(bool useSetting, const wxColour& back);

    // Set the size of the dots used to mark space characters.
    %wxchkver_2_9_5 void SetWhitespaceSize(int size);

    // Get the size of the dots used to mark space characters.
    %wxchkver_2_9_5 int GetWhitespaceSize() const;

    // Divide each styling byte into lexical class bits (default: 5) and indicator
    // bits (default: 3). If a lexer requires more than 32 lexical states, then this
    // is used to expand the possible states.
    void SetStyleBits(int bits);

    // Retrieve number of bits in style bytes used to hold the lexical state.
    int GetStyleBits() const;

    // Used to hold extra styling information for each line.
    void SetLineState(int line, int state);

    // Retrieve the extra styling information for a line.
    int GetLineState(int line) const;

    // Retrieve the last line number that has line state.
    int GetMaxLineState() const;

    // Is the background of the line containing the caret in a different colour?
    bool GetCaretLineVisible() const;

    // Display the background of the line containing the caret in a different colour.
    void SetCaretLineVisible(bool show);

    // Get the colour of the background of the line containing the caret.
    !%wxchkver_2_8 wxColour GetCaretLineBack();
    %wxchkver_2_8 wxColour GetCaretLineBackground() const;

    // Set the colour of the background of the line containing the caret.
    !%wxchkver_2_8 void SetCaretLineBack(const wxColour& back);
    %wxchkver_2_8 void SetCaretLineBackground(const wxColour& back);

    // Set a style to be changeable or not (read only).
    // Experimental feature, currently buggy.
    void StyleSetChangeable(int style, bool changeable);

    // Display a auto-completion list.
    // The lenEntered parameter indicates how many characters before
    // the caret should be used to provide context.
    void AutoCompShow(int lenEntered, const wxString& itemList);

    // Remove the auto-completion list from the screen.
    void AutoCompCancel();

    // Is there an auto-completion list visible?
    bool AutoCompActive();

    // Retrieve the position of the caret when the auto-completion list was displayed.
    int AutoCompPosStart();

    // User has selected an item so remove the list and insert the selection.
    void AutoCompComplete();

    // Define a set of character that when typed cancel the auto-completion list.
    void AutoCompStops(const wxString& characterSet);

    // Change the separator character in the string setting up an auto-completion list.
    // Default is space but can be changed if items contain space.
    void AutoCompSetSeparator(int separatorCharacter);

    // Retrieve the auto-completion list separator character.
    int AutoCompGetSeparator() const;

    // Select the item in the auto-completion list that starts with a string.
    void AutoCompSelect(const wxString& text);

    // Should the auto-completion list be cancelled if the user backspaces to a
    // position before where the box was created.
    void AutoCompSetCancelAtStart(bool cancel);

    // Retrieve whether auto-completion cancelled by backspacing before start.
    bool AutoCompGetCancelAtStart() const;

    // Define a set of characters that when typed will cause the autocompletion to
    // choose the selected item.
    void AutoCompSetFillUps(const wxString& characterSet);

    // Should a single item auto-completion list automatically choose the item.
    void AutoCompSetChooseSingle(bool chooseSingle);

    // Retrieve whether a single item auto-completion list automatically choose the item.
    bool AutoCompGetChooseSingle() const;

    // Set whether case is significant when performing auto-completion searches.
    void AutoCompSetIgnoreCase(bool ignoreCase);

    // Retrieve state of ignore case flag.
    bool AutoCompGetIgnoreCase() const;

    // Display a list of strings and send notification when user chooses one.
    void UserListShow(int listType, const wxString& itemList);

    // Set whether or not autocompletion is hidden automatically when nothing matches.
    void AutoCompSetAutoHide(bool autoHide);

    // Retrieve whether or not autocompletion is hidden automatically when nothing matches.
    bool AutoCompGetAutoHide() const;

    // Set whether or not autocompletion deletes any word characters
    // after the inserted text upon completion.
    void AutoCompSetDropRestOfWord(bool dropRestOfWord);

    // Retrieve whether or not autocompletion deletes any word characters
    // after the inserted text upon completion.
    bool AutoCompGetDropRestOfWord() const;

    // Register an image for use in autocompletion lists.
    void RegisterImage(int type, const wxBitmap& bmp);

    // Clear all the registered images.
    void ClearRegisteredImages();

    // Retrieve the auto-completion list type-separator character.
    int AutoCompGetTypeSeparator() const;

    // Change the type-separator character in the string setting up an auto-completion list.
    // Default is '?' but can be changed if items contain '?'.
    void AutoCompSetTypeSeparator(int separatorCharacter);

    // Set the maximum width, in characters, of auto-completion and user lists.
    // Set to 0 to autosize to fit longest item, which is the default.
    void AutoCompSetMaxWidth(int characterCount);

    // Get the maximum width, in characters, of auto-completion and user lists.
    int AutoCompGetMaxWidth() const;

    // Set the maximum height, in rows, of auto-completion and user lists.
    // The default is 5 rows.
    void AutoCompSetMaxHeight(int rowCount);

    // Set the maximum height, in rows, of auto-completion and user lists.
    int AutoCompGetMaxHeight() const;

    // Set the number of spaces used for one level of indentation.
    void SetIndent(int indentSize);

    // Retrieve indentation size.
    int GetIndent() const;

    // Indentation will only use space characters if useTabs is false, otherwise
    // it will use a combination of tabs and spaces.
    void SetUseTabs(bool useTabs);

    // Retrieve whether tabs will be used in indentation.
    bool GetUseTabs() const;

    // Change the indentation of a line to a number of columns.
    void SetLineIndentation(int line, int indentSize);

    // Retrieve the number of columns that a line is indented.
    int GetLineIndentation(int line) const;

    // Retrieve the position before the first non indentation character on a line.
    int GetLineIndentPosition(int line) const;

    // Retrieve the column number of a position, taking tab width into account.
    int GetColumn(int pos) const;

    // Count characters between two positions.
    %wxchkver_2_9_5 int CountCharacters(int startPos, int endPos);

    // Show or hide the horizontal scroll bar.
    void SetUseHorizontalScrollBar(bool show);

    // Is the horizontal scroll bar visible?
    bool GetUseHorizontalScrollBar() const;

    // Show or hide indentation guides.
    !%wxchkver_2_9_5 void SetIndentationGuides(bool show);
    %wxchkver_2_9_5 void SetIndentationGuides(int indentView);

    // Are the indentation guides visible?
    !%wxchkver_2_9_5 bool GetIndentationGuides();
    %wxchkver_2_9_5 int GetIndentationGuides();

    // Set the highlighted indentation guide column.
    // 0 = no highlighted guide.
    void SetHighlightGuide(int column);

    // Get the highlighted indentation guide column.
    int GetHighlightGuide() const;

    // Get the position after the last visible characters on a line.
    int GetLineEndPosition(int line) const;

    // Get the code page used to interpret the bytes of the document as characters.
    int GetCodePage() const;

    // Get the foreground colour of the caret.
    wxColour GetCaretForeground() const;

    // In read-only mode?
    bool GetReadOnly() const;

    // Sets the position of the caret.
    void SetCurrentPos(int pos);

    // Sets the position that starts the selection - this becomes the anchor.
    void SetSelectionStart(int pos);

    // Returns the position at the start of the selection.
    int GetSelectionStart() const;

    // Sets the position that ends the selection - this becomes the currentPosition.
    void SetSelectionEnd(int pos);

    // Returns the position at the end of the selection.
    int GetSelectionEnd() const;

    // Set caret to a position, while removing any existing selection.
    %wxchkver_2_9_5 void SetEmptySelection(int pos);

    // Sets the print magnification added to the point size of each style for printing.
    void SetPrintMagnification(int magnification);

    // Returns the print magnification.
    int GetPrintMagnification() const;

    // Modify colours when printing for clearer printed text.
    void SetPrintColourMode(int mode);

    // Returns the print colour mode.
    int GetPrintColourMode() const;

    // Find some text in the document.
    int FindText(int minPos, int maxPos, const wxString& text, int flags=0);

    // On Windows, will draw the document into a display context such as a printer.
    int FormatRange(bool doDraw, int startPos, int endPos, wxDC* draw, wxDC* target, const wxRect& renderRect, const wxRect& pageRect);

    // Retrieve the display line at the top of the display.
    int GetFirstVisibleLine() const;

    // Retrieve the contents of a line.
    wxString GetLine(int line) const;

    // Returns the number of lines in the document. There is always at least one.
    int GetLineCount() const;

    // Sets the size in pixels of the left margin.
    void SetMarginLeft(int pixelWidth);

    // Returns the size in pixels of the left margin.
    int GetMarginLeft() const;

    // Sets the size in pixels of the right margin.
    void SetMarginRight(int pixelWidth);

    // Returns the size in pixels of the right margin.
    int GetMarginRight() const;

    // Is the document different from when it was last saved?
    bool GetModify() const;

    // Select a range of text.
    void SetSelection(int start, int end);

    // Retrieve the selected text.
    wxString GetSelectedText();

    // Retrieve a range of text.
    wxString GetTextRange(int startPos, int endPos);

    // Draw the selection in normal style or with selection highlighted.
    void HideSelection(bool normal);

    // Retrieve the line containing a position.
    int LineFromPosition(int pos) const;

    // Retrieve the position at the start of a line.
    int PositionFromLine(int line) const;

    // Scroll horizontally and vertically.
    void LineScroll(int columns, int lines);

    // Ensure the caret is visible.
    void EnsureCaretVisible();

    // Replace the selected text with the argument text.
    void ReplaceSelection(const wxString& text);

    // Set to read only or read write.
    void SetReadOnly(bool readOnly);

    // Will a paste succeed?
    bool CanPaste() const;

    // Are there any undoable actions in the undo history?
    bool CanUndo() const;

    // Delete the undo history.
    void EmptyUndoBuffer();

    // Undo one action in the undo history.
    void Undo();

    // Cut the selection to the clipboard.
    void Cut();

    // Copy the selection to the clipboard.
    void Copy();

    // Paste the contents of the clipboard into the document replacing the selection.
    void Paste();

    // Clear the selection.
    void Clear();

    // Replace the contents of the document with the argument text.
    void SetText(const wxString& text);

    // Retrieve all the text in the document.
    wxString GetText() const;

    // Retrieve the number of characters in the document.
    int GetTextLength() const;

    // Set to overtype (true) or insert mode.
    void SetOvertype(bool overtype);

    // Returns true if overtype mode is active otherwise false is returned.
    bool GetOvertype() const;

    // Set the width of the insert mode caret.
    void SetCaretWidth(int pixelWidth);

    // Returns the width of the insert mode caret.
    int GetCaretWidth() const;

    // Sets the position that starts the target which is used for updating the
    // document without affecting the scroll position.
    void SetTargetStart(int pos);

    // Get the position that starts the target.
    int GetTargetStart() const;

    // Sets the position that ends the target which is used for updating the
    // document without affecting the scroll position.
    void SetTargetEnd(int pos);

    // Get the position that ends the target.
    int GetTargetEnd() const;

    // Replace the target text with the argument text.
    // Text is counted so it can contain NULs.
    // Returns the length of the replacement text.
    int ReplaceTarget(const wxString& text);

    // Replace the target text with the argument text after \d processing.
    // Text is counted so it can contain NULs.
    // Looks for \d where d is between 1 and 9 and replaces these with the strings
    // matched in the last search operation which were surrounded by \( and \).
    // Returns the length of the replacement text including any change
    // caused by processing the \d patterns.
    int ReplaceTargetRE(const wxString& text);

    // Search for a counted string in the target and set the target to the found
    // range. Text is counted so it can contain NULs.
    // Returns length of range or -1 for failure in which case target is not moved.
    int SearchInTarget(const wxString& text);

    // Set the search flags used by SearchInTarget.
    void SetSearchFlags(int flags);

    // Get the search flags used by SearchInTarget.
    int GetSearchFlags() const;

    // Show a call tip containing a definition near position pos.
    void CallTipShow(int pos, const wxString& definition);

    // Remove the call tip from the screen.
    void CallTipCancel();

    // Is there an active call tip?
    bool CallTipActive();

    // Retrieve the position where the caret was before displaying the call tip.
    int CallTipPosAtStart();

    // Highlight a segment of the definition.
    void CallTipSetHighlight(int start, int end);

    // Set the background colour for the call tip.
    void CallTipSetBackground(const wxColour& back);

    // Set the foreground colour for the call tip.
    void CallTipSetForeground(const wxColour& fore);

    // Set the foreground colour for the highlighted part of the call tip.
    void CallTipSetForegroundHighlight(const wxColour& fore);

    // Enable use of STYLE_CALLTIP and set call tip tab size in pixels.
    %wxchkver_2_8_12 void CallTipUseStyle(int tabSize);

    // Set position of calltip, above or below text.
    %wxchkver_2_9_5 void CallTipSetPosition(bool above);

    // Find the display line of a document line taking hidden lines into account.
    int VisibleFromDocLine(int line);

    // Find the document line of a display line taking hidden lines into account.
    int DocLineFromVisible(int lineDisplay);

    // The number of display lines needed to wrap a document line
    int WrapCount(int line);

    // Set the fold level of a line.
    // This encodes an integer level along with flags indicating whether the
    // line is a header and whether it is effectively white space.
    void SetFoldLevel(int line, int level);

    // Retrieve the fold level of a line.
    int GetFoldLevel(int line) const;

    // Find the last child line of a header line.
    int GetLastChild(int line, int level) const;

    // Find the parent line of a child line.
    int GetFoldParent(int line) const;

    // Make a range of lines visible.
    void ShowLines(int lineStart, int lineEnd);

    // Make a range of lines invisible.
    void HideLines(int lineStart, int lineEnd);

    // Is a line visible?
    bool GetLineVisible(int line) const;

    // Are all lines visible?
    %wxchkver_2_9_5 bool GetAllLinesVisible() const;

    // Show the children of a header line.
    void SetFoldExpanded(int line, bool expanded);

    // Is a header line expanded?
    bool GetFoldExpanded(int line) const;

    // Switch a header line between expanded and contracted.
    void ToggleFold(int line);

    // Ensure a particular line is visible by expanding any header line hiding it.
    void EnsureVisible(int line);

    // Set some style options for folding.
    void SetFoldFlags(int flags);

    // Ensure a particular line is visible by expanding any header line hiding it.
    // Use the currently set visibility policy to determine which range to display.
    void EnsureVisibleEnforcePolicy(int line);

    // Sets whether a tab pressed when caret is within indentation indents.
    void SetTabIndents(bool tabIndents);

    // Does a tab pressed when caret is within indentation indent?
    bool GetTabIndents() const;

    // Sets whether a backspace pressed when caret is within indentation unindents.
    void SetBackSpaceUnIndents(bool bsUnIndents);

    // Does a backspace pressed when caret is within indentation unindent?
    bool GetBackSpaceUnIndents() const;

    // Sets the time the mouse must sit still to generate a mouse dwell event.
    void SetMouseDwellTime(int periodMilliseconds);

    // Retrieve the time the mouse must sit still to generate a mouse dwell event.
    int GetMouseDwellTime() const;

    // Get position of start of word.
    int WordStartPosition(int pos, bool onlyWordCharacters);

    // Get position of end of word.
    int WordEndPosition(int pos, bool onlyWordCharacters);

    // Sets whether text is word wrapped.
    void SetWrapMode(int mode);

    // Retrieve whether text is word wrapped.
    int GetWrapMode() const;

    // Set the display mode of visual flags for wrapped lines.
    void SetWrapVisualFlags(int wrapVisualFlags);

    // Retrive the display mode of visual flags for wrapped lines.
    int GetWrapVisualFlags() const;

    // Set the location of visual flags for wrapped lines.
    void SetWrapVisualFlagsLocation(int wrapVisualFlagsLocation);

    // Retrive the location of visual flags for wrapped lines.
    int GetWrapVisualFlagsLocation() const;

    // Set the start indent for wrapped lines.
    void SetWrapStartIndent(int indent);

    // Retrive the start indent for wrapped lines.
    int GetWrapStartIndent() const;

    // Sets how wrapped sublines are placed. Default is fixed.
    %wxchkver_2_9_5 void SetWrapIndentMode(int mode);

    // Retrieve how wrapped sublines are placed. Default is fixed.
    %wxchkver_2_9_5 int GetWrapIndentMode() const;

    // Sets the degree of caching of layout information.
    void SetLayoutCache(int mode);

    // Retrieve the degree of caching of layout information.
    int GetLayoutCache() const;

    // Sets the document width assumed for scrolling.
    void SetScrollWidth(int pixelWidth);

    // Retrieve the document width assumed for scrolling.
    int GetScrollWidth() const;

    // Sets whether the maximum width line displayed is used to set scroll width.
    %wxchkver_2_9_5 void SetScrollWidthTracking(bool tracking);

    // Retrieve whether the scroll width tracks wide lines.
    %wxchkver_2_9_5 bool GetScrollWidthTracking() const;

    // Measure the pixel width of some text in a particular style.
    // NUL terminated text argument.
    // Does not handle tab or control characters.
    int TextWidth(int style, const wxString& text);

    // Sets the scroll range so that maximum scroll position has
    // the last line at the bottom of the view (default).
    // Setting this to false allows scrolling one page below the last line.
    void SetEndAtLastLine(bool endAtLastLine);

    // Retrieve whether the maximum scroll position has the last
    // line at the bottom of the view.
    bool GetEndAtLastLine() const;

    // Retrieve the height of a particular line of text in pixels.
    int TextHeight(int line);

    // Show or hide the vertical scroll bar.
    void SetUseVerticalScrollBar(bool show);

    // Is the vertical scroll bar visible?
    bool GetUseVerticalScrollBar() const;

    // Append a string to the end of the document without changing the selection.
    void AppendText(const wxString& text);

    // Is drawing done in two phases with backgrounds drawn before foregrounds?
    bool GetTwoPhaseDraw() const;

    // In twoPhaseDraw mode, drawing is performed in two phases, first the background
    // and then the foreground. This avoids chopping off characters that overlap the next run.
    void SetTwoPhaseDraw(bool twoPhase);

    // Scroll so that a display line is at the top of the display.
    %wxchkver_2_9_5 void SetFirstVisibleLine(int lineDisplay);

    // Change the effect of pasting when there are multiple selections.
    %wxchkver_2_9_5 void SetMultiPaste(int multiPaste);

    // Retrieve the effect of pasting when there are multiple selections..
    %wxchkver_2_9_5 int GetMultiPaste() const;

    // Retrieve the value of a tag from a regular expression search.
    %wxchkver_2_9_5 wxString GetTag(int tagNumber) const;

    // Make the target range start and end be the same as the selection range start and end.
    void TargetFromSelection();

    // Join the lines in the target.
    void LinesJoin();

    // Split the lines in the target into lines that are less wide than pixelWidth
    // where possible.
    void LinesSplit(int pixelWidth);

    // Set the colours used as a chequerboard pattern in the fold margin
    void SetFoldMarginColour(bool useSetting, const wxColour& back);
    void SetFoldMarginHiColour(bool useSetting, const wxColour& fore);

    // Move caret down one line.
    void LineDown();

    // Move caret down one line extending selection to new caret position.
    void LineDownExtend();

    // Move caret up one line.
    void LineUp();

    // Move caret up one line extending selection to new caret position.
    void LineUpExtend();

    // Move caret left one character.
    void CharLeft();

    // Move caret left one character extending selection to new caret position.
    void CharLeftExtend();

    // Move caret right one character.
    void CharRight();

    // Move caret right one character extending selection to new caret position.
    void CharRightExtend();

    // Move caret left one word.
    void WordLeft();

    // Move caret left one word extending selection to new caret position.
    void WordLeftExtend();

    // Move caret right one word.
    void WordRight();

    // Move caret right one word extending selection to new caret position.
    void WordRightExtend();

    // Move caret to first position on line.
    void Home();

    // Move caret to first position on line extending selection to new caret position.
    void HomeExtend();

    // Move caret to last position on line.
    void LineEnd();

    // Move caret to last position on line extending selection to new caret position.
    void LineEndExtend();

    // Move caret to first position in document.
    void DocumentStart();

    // Move caret to first position in document extending selection to new caret position.
    void DocumentStartExtend();

    // Move caret to last position in document.
    void DocumentEnd();

    // Move caret to last position in document extending selection to new caret position.
    void DocumentEndExtend();

    // Move caret one page up.
    void PageUp();

    // Move caret one page up extending selection to new caret position.
    void PageUpExtend();

    // Move caret one page down.
    void PageDown();

    // Move caret one page down extending selection to new caret position.
    void PageDownExtend();

    // Switch from insert to overtype mode or the reverse.
    void EditToggleOvertype();

    // Cancel any modes such as call tip or auto-completion list display.
    void Cancel();

    // Delete the selection or if no selection, the character before the caret.
    void DeleteBack();

    // If selection is empty or all on one line replace the selection with a tab character.
    // If more than one line selected, indent the lines.
    void Tab();

    // Dedent the selected lines.
    void BackTab();

    // Insert a new line, may use a CRLF, CR or LF depending on EOL mode.
    void NewLine();

    // Insert a Form Feed character.
    void FormFeed();

    // Move caret to before first visible character on line.
    // If already there move to first character on line.
    void VCHome();

    // Like VCHome but extending selection to new caret position.
    void VCHomeExtend();

    // Magnify the displayed text by increasing the sizes by 1 point.
    void ZoomIn();

    // Make the displayed text smaller by decreasing the sizes by 1 point.
    void ZoomOut();

    // Delete the word to the left of the caret.
    void DelWordLeft();

    // Delete the word to the right of the caret.
    void DelWordRight();

    // Delete the word to the right of the caret, but not the trailing non-word characters.
    %wxchkver_2_9_5 void DelWordRightEnd();

    // Cut the line containing the caret.
    void LineCut();

    // Delete the line containing the caret.
    void LineDelete();

    // Switch the current line with the previous.
    void LineTranspose();

    // Duplicate the current line.
    void LineDuplicate();

    // Transform the selection to lower case.
    void LowerCase();

    // Transform the selection to upper case.
    void UpperCase();

    // Scroll the document down, keeping the caret visible.
    void LineScrollDown();

    // Scroll the document up, keeping the caret visible.
    void LineScrollUp();

    // Delete the selection or if no selection, the character before the caret.
    // Will not delete the character before at the start of a line.
    void DeleteBackNotLine();

    // Move caret to first position on display line.
    void HomeDisplay();

    // Move caret to first position on display line extending selection to
    // new caret position.
    void HomeDisplayExtend();

    // Move caret to last position on display line.
    void LineEndDisplay();

    // Move caret to last position on display line extending selection to new
    // caret position.
    void LineEndDisplayExtend();

    // These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?
    // except they behave differently when word-wrap is enabled:
    // They go first to the start / end of the display line, like (Home|LineEnd)Display
    // The difference is that, the cursor is already at the point, it goes on to the start
    // or end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.
    void HomeWrap();
    void HomeWrapExtend();
    void LineEndWrap();
    void LineEndWrapExtend();
    void VCHomeWrap();
    void VCHomeWrapExtend();

    // Copy the line containing the caret.
    void LineCopy();

    // Move the caret inside current view if it's not there already.
    void MoveCaretInsideView();

    // How many characters are on a line, including end of line characters?
    int LineLength(int line) const;

    // Highlight the characters at two positions.
    void BraceHighlight(int pos1, int pos2);

    // Use specified indicator to highlight matching braces instead of changing their style.
    %wxchkver_2_9_5 void BraceHighlightIndicator(bool useBraceHighlightIndicator, int indicator);

    // Highlight the character at a position indicating there is no matching brace.
    void BraceBadLight(int pos);

    // Use specified indicator to highlight non matching brace instead of changing its style.
    %wxchkver_2_9_5 void BraceBadLightIndicator(bool useBraceBadLightIndicator, int indicator);

    // Find the position of a matching brace or INVALID_POSITION if no match.
    int BraceMatch(int pos);

    // Are the end of line characters visible?
    bool GetViewEOL() const;

    // Make the end of line characters visible or invisible.
    void SetViewEOL(bool visible);

    // Retrieve a pointer to the document object.
    void* GetDocPointer();

    // Change the document object used.
    void SetDocPointer(void* docPointer);

    // Set which document modification events are sent to the container.
    void SetModEventMask(int mask);

    // Retrieve the column number which text should be kept within.
    int GetEdgeColumn() const;

    // Set the column number of the edge.
    // If text goes past the edge then it is highlighted.
    void SetEdgeColumn(int column);

    // Retrieve the edge highlight mode.
    int GetEdgeMode() const;

    // The edge may be displayed by a line (EDGE_LINE) or by highlighting text that
    // goes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).
    void SetEdgeMode(int mode);

    // Retrieve the colour used in edge indication.
    wxColour GetEdgeColour() const;

    // Change the colour used in edge indication.
    void SetEdgeColour(const wxColour& edgeColour);

    // Sets the current caret position to be the search anchor.
    void SearchAnchor();

    // Find some text starting at the search anchor.
    // Does not ensure the selection is visible.
    int SearchNext(int flags, const wxString& text);

    // Find some text starting at the search anchor and moving backwards.
    // Does not ensure the selection is visible.
    int SearchPrev(int flags, const wxString& text);

    // Retrieves the number of lines completely visible.
    int LinesOnScreen() const;

    // Set whether a pop up menu is displayed automatically when the user presses
    // the wrong mouse button.
    void UsePopUp(bool allowPopUp);

    // Is the selection rectangular? The alternative is the more common stream selection.
    bool SelectionIsRectangle() const;

    // Set the zoom level. This number of points is added to the size of all fonts.
    // It may be positive to magnify or negative to reduce.
    void SetZoom(int zoom);

    // Retrieve the zoom level.
    int GetZoom() const;

    // Create a new document object.
    // Starts with reference count of 1 and not selected into editor.
    void* CreateDocument();

    // Extend life of document.
    void AddRefDocument(void* docPointer);

    // Release a reference to the document, deleting document if it fades to black.
    void ReleaseDocument(void* docPointer);

    // Get which document modification events are sent to the container.
    int GetModEventMask() const;

    // Change internal focus flag.
    void SetSTCFocus(bool focus);

    // Get internal focus flag.
    bool GetSTCFocus() const;

    // Change error status - 0 = OK.
    void SetStatus(int statusCode);

    // Get error status.
    int GetStatus() const;

    // Set whether the mouse is captured when its button is pressed.
    void SetMouseDownCaptures(bool captures);

    // Get whether mouse gets captured.
    bool GetMouseDownCaptures() const;

    // Sets the cursor to one of the SC_CURSOR* values.
    void SetSTCCursor(int cursorType);

    // Get cursor type.
    int GetSTCCursor() const;

    // Change the way control characters are displayed:
    // If symbol is < 32, keep the drawn way, else, use the given character.
    void SetControlCharSymbol(int symbol);

    // Get the way control characters are displayed.
    int GetControlCharSymbol() const;

    // Move to the previous change in capitalisation.
    void WordPartLeft();

    // Move to the previous change in capitalisation extending selection
    // to new caret position.
    void WordPartLeftExtend();

    // Move to the change next in capitalisation.
    void WordPartRight();

    // Move to the next change in capitalisation extending selection
    // to new caret position.
    void WordPartRightExtend();

    // Set the way the display area is determined when a particular line
    // is to be moved to by Find, FindNext, GotoLine, etc.
    void SetVisiblePolicy(int visiblePolicy, int visibleSlop);

    // Delete back from the current position to the start of the line.
    void DelLineLeft();

    // Delete forwards from the current position to the end of the line.
    void DelLineRight();

    // Get and Set the xOffset (ie, horizontal scroll position).
    void SetXOffset(int newOffset);
    int GetXOffset() const;

    // Set the last x chosen value to be the caret x position.
    void ChooseCaretX();

    // Set the way the caret is kept visible when going sideways.
    // The exclusion zone is given in pixels.
    void SetXCaretPolicy(int caretPolicy, int caretSlop);

    // Set the way the line the caret is on is kept visible.
    // The exclusion zone is given in lines.
    void SetYCaretPolicy(int caretPolicy, int caretSlop);

    // Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).
    void SetPrintWrapMode(int mode);

    // Is printing line wrapped?
    int GetPrintWrapMode() const;

    // Set a fore colour for active hotspots.
    void SetHotspotActiveForeground(bool useSetting, const wxColour& fore);

    // Get the fore colour for active hotspots.
    %wxchkver_2_9_5 wxColour GetHotspotActiveForeground() const;

    // Set a back colour for active hotspots.
    void SetHotspotActiveBackground(bool useSetting, const wxColour& back);

    // Get the back colour for active hotspots.
    %wxchkver_2_9_5 wxColour GetHotspotActiveBackground() const;

    // Enable / Disable underlining active hotspots.
    void SetHotspotActiveUnderline(bool underline);

    // Get whether underlining for active hotspots.
    %wxchkver_2_9_5 bool GetHotspotActiveUnderline() const;

    // Limit hotspots to single line so hotspots on two lines don't merge.
    void SetHotspotSingleLine(bool singleLine);

    // Get the HotspotSingleLine property
    %wxchkver_2_9_5 bool GetHotspotSingleLine() const;

    // Move caret between paragraphs (delimited by empty lines).
    void ParaDown();
    void ParaDownExtend();
    void ParaUp();
    void ParaUpExtend();

    // Given a valid document position, return the previous position taking code
    // page into account. Returns 0 if passed 0.
    int PositionBefore(int pos);

    // Given a valid document position, return the next position taking code
    // page into account. Maximum value returned is the last position in the document.
    int PositionAfter(int pos);

    // Copy a range of text to the clipboard. Positions are clipped into the document.
    void CopyRange(int start, int end);

    // Copy argument text to the clipboard.
    void CopyText(int length, const wxString& text);

    // Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or
    // by lines (SC_SEL_LINES).
    void SetSelectionMode(int mode);

    // Get the mode of the current selection.
    int GetSelectionMode() const;

    // Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).
    int GetLineSelStartPosition(int line);

    // Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line).
    int GetLineSelEndPosition(int line);

    // Move caret down one line, extending rectangular selection to new caret position.
    void LineDownRectExtend();

    // Move caret up one line, extending rectangular selection to new caret position.
    void LineUpRectExtend();

    // Move caret left one character, extending rectangular selection to new caret position.
    void CharLeftRectExtend();

    // Move caret right one character, extending rectangular selection to new caret position.
    void CharRightRectExtend();

    // Move caret to first position on line, extending rectangular selection to new caret position.
    void HomeRectExtend();

    // Move caret to before first visible character on line.
    // If already there move to first character on line.
    // In either case, extend rectangular selection to new caret position.
    void VCHomeRectExtend();

    // Move caret to last position on line, extending rectangular selection to new caret position.
    void LineEndRectExtend();

    // Move caret one page up, extending rectangular selection to new caret position.
    void PageUpRectExtend();

    // Move caret one page down, extending rectangular selection to new caret position.
    void PageDownRectExtend();

    // Move caret to top of page, or one page up if already at top of page.
    void StutteredPageUp();

    // Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.
    void StutteredPageUpExtend();

    // Move caret to bottom of page, or one page down if already at bottom of page.
    void StutteredPageDown();

    // Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.
    void StutteredPageDownExtend();

    // Move caret left one word, position cursor at end of word.
    void WordLeftEnd();

    // Move caret left one word, position cursor at end of word, extending selection to new caret position.
    void WordLeftEndExtend();

    // Move caret right one word, position cursor at end of word.
    void WordRightEnd();

    // Move caret right one word, position cursor at end of word, extending selection to new caret position.
    void WordRightEndExtend();

    // Set the set of characters making up whitespace for when moving or selecting by word.
    // Should be called after SetWordChars.
    void SetWhitespaceChars(const wxString& characters);

    // Get the set of characters making up whitespace for when moving or selecting by word.
    %wxchkver_2_9_5 wxString GetWhitespaceChars() const;

    // Set the set of characters making up punctuation characters
    // Should be called after SetWordChars.
    %wxchkver_2_9_5 void SetPunctuationChars(const wxString& characters);

    // Get the set of characters making up punctuation characters
    %wxchkver_2_9_5 wxString GetPunctuationChars() const;

    // Reset the set of characters for whitespace and word characters to the defaults.
    void SetCharsDefault();

    // Get currently selected item position in the auto-completion list
    int AutoCompGetCurrent() const;

    // Set auto-completion case insensitive behaviour to either prefer case-sensitive matches or have no preference.
    %wxchkver_2_9_5 void AutoCompSetCaseInsensitiveBehaviour(int behaviour);

    // Get auto-completion case insensitive behaviour.
    %wxchkver_2_9_5 int AutoCompGetCaseInsensitiveBehaviour() const;

    // Enlarge the document to a particular size of text bytes.
    void Allocate(int bytes);

    // Find the position of a column on a line taking into account tabs and
    // multi-byte characters. If beyond end of line, return line end position.
    int FindColumn(int line, int column);

    // Can the caret preferred x position only be changed by explicit movement commands?
    !%wxchkver_2_9_5 bool GetCaretSticky() const;
    %wxchkver_2_9_5 int GetCaretSticky() const;

    // Stop the caret preferred x position changing when the user types.
    !%wxchkver_2_9_5 void SetCaretSticky(bool useCaretStickyBehaviour);
    %wxchkver_2_9_5 void SetCaretSticky(int useCaretStickyBehaviour);

    // Switch between sticky and non-sticky: meant to be bound to a key.
    void ToggleCaretSticky();

    // Enable/Disable convert-on-paste for line endings
    void SetPasteConvertEndings(bool convert);

    // Get convert-on-paste setting
    bool GetPasteConvertEndings() const;

    // Duplicate the selection. If selection empty duplicate the line containing the caret.
    void SelectionDuplicate();

    // Set background alpha of the caret line.
    %wxchkver_2_8_12 void SetCaretLineBackAlpha(int alpha);

    // Get the background alpha of the caret line.
    %wxchkver_2_8_12 int GetCaretLineBackAlpha() const;

    #if %wxchkver_2_9_5
    // Set the style of the caret to be drawn.
    void SetCaretStyle(int caretStyle);

    // Returns the current style of the caret.
    int GetCaretStyle() const;

    // Set the indicator used for IndicatorFillRange and IndicatorClearRange
    void SetIndicatorCurrent(int indicator);

    // Get the current indicator
    int GetIndicatorCurrent() const;

    // Set the value used for IndicatorFillRange
    void SetIndicatorValue(int value);

    // Get the current indicator value
    int GetIndicatorValue() const;

    // Turn a indicator on over a range.
    void IndicatorFillRange(int position, int fillLength);

    // Turn a indicator off over a range.
    void IndicatorClearRange(int position, int clearLength);

    // Are any indicators present at position?
    int IndicatorAllOnFor(int position);

    // What value does a particular indicator have at at a position?
    int IndicatorValueAt(int indicator, int position);

    // Where does a particular indicator start?
    int IndicatorStart(int indicator, int position);

    // Where does a particular indicator end?
    int IndicatorEnd(int indicator, int position);

    // Set number of entries in position cache
    void SetPositionCacheSize(int size);

    // How many entries are allocated to the position cache?
    int GetPositionCacheSize() const;

    // Copy the selection, if selection empty copy the line with the caret
    void CopyAllowLine();

    // Compact the document buffer and return a read-only pointer to the
    // characters in the document.
    //const char* GetCharacterPointer() const;

    // Return a read-only pointer to a range of characters in the document.
    // May move the gap so that the range is contiguous, but will only move up
    // to rangeLength bytes.
    //const char* GetRangePointer(int position, int rangeLength) const;

    // Return a position which, to avoid performance costs, should not be within
    // the range of a call to GetRangePointer.
    int GetGapPosition() const;

    // Always interpret keyboard input as Unicode
    void SetKeysUnicode(bool keysUnicode);

    // Are keys always interpreted as Unicode?
    bool GetKeysUnicode() const;

    // Set the alpha fill colour of the given indicator.
    void IndicatorSetAlpha(int indicator, int alpha);

    // Get the alpha fill colour of the given indicator.
    int IndicatorGetAlpha(int indicator) const;

    // Set the alpha outline colour of the given indicator.
    void IndicatorSetOutlineAlpha(int indicator, int alpha);

    // Get the alpha outline colour of the given indicator.
    int IndicatorGetOutlineAlpha(int indicator) const;

    // Set extra ascent for each line
    void SetExtraAscent(int extraAscent);

    // Get extra ascent for each line
    int GetExtraAscent() const;

    // Set extra descent for each line
    void SetExtraDescent(int extraDescent);

    // Get extra descent for each line
    int GetExtraDescent() const;

    // Which symbol was defined for markerNumber with MarkerDefine
    int GetMarkerSymbolDefined(int markerNumber);

    // Set the text in the text margin for a line
    void MarginSetText(int line, const wxString& text);

    // Get the text in the text margin for a line
    wxString MarginGetText(int line) const;

    // Set the style number for the text margin for a line
    void MarginSetStyle(int line, int style);

    // Get the style number for the text margin for a line
    int MarginGetStyle(int line) const;

    // Set the style in the text margin for a line
    void MarginSetStyles(int line, const wxString& styles);

    // Get the styles in the text margin for a line
    wxString MarginGetStyles(int line) const;

    // Clear the margin text on all lines
    void MarginTextClearAll();

    // Get the start of the range of style numbers used for margin text
    void MarginSetStyleOffset(int style);

    // Get the start of the range of style numbers used for margin text
    int MarginGetStyleOffset() const;

    // Set the margin options.
    void SetMarginOptions(int marginOptions);

    // Get the margin options.
    int GetMarginOptions() const;

    // Set the annotation text for a line
    void AnnotationSetText(int line, const wxString& text);

    // Get the annotation text for a line
    wxString AnnotationGetText(int line) const;

    // Set the style number for the annotations for a line
    void AnnotationSetStyle(int line, int style);

    // Get the style number for the annotations for a line
    int AnnotationGetStyle(int line) const;

    // Set the annotation styles for a line
    void AnnotationSetStyles(int line, const wxString& styles);

    // Get the annotation styles for a line
    wxString AnnotationGetStyles(int line) const;

    // Get the number of annotation lines for a line
    int AnnotationGetLines(int line) const;

    // Clear the annotations from all lines
    void AnnotationClearAll();

    // Set the visibility for the annotations for a view
    void AnnotationSetVisible(int visible);

    // Get the visibility for the annotations for a view
    int AnnotationGetVisible() const;

    // Get the start of the range of style numbers used for annotations
    void AnnotationSetStyleOffset(int style);

    // Get the start of the range of style numbers used for annotations
    int AnnotationGetStyleOffset() const;

    // Add a container action to the undo stack
    void AddUndoAction(int token, int flags);

    // Find the position of a character from a point within the window.
    int CharPositionFromPoint(int x, int y);

    // Find the position of a character from a point within the window.
    // Return INVALID_POSITION if not close to text.
    int CharPositionFromPointClose(int x, int y);

    // Set whether multiple selections can be made
    void SetMultipleSelection(bool multipleSelection);

    // Whether multiple selections can be made
    bool GetMultipleSelection() const;

    // Set whether typing can be performed into multiple selections
    void SetAdditionalSelectionTyping(bool additionalSelectionTyping);

    // Whether typing can be performed into multiple selections
    bool GetAdditionalSelectionTyping() const;

    // Set whether additional carets will blink
    void SetAdditionalCaretsBlink(bool additionalCaretsBlink);

    // Whether additional carets will blink
    bool GetAdditionalCaretsBlink() const;

    // Set whether additional carets are visible
    void SetAdditionalCaretsVisible(bool additionalCaretsBlink);

    // Whether additional carets are visible
    bool GetAdditionalCaretsVisible() const;

    // How many selections are there?
    int GetSelections() const;

    // Clear selections to a single empty stream selection
    void ClearSelections();

    // Add a selection
    int AddSelection(int caret, int anchor);

    // Set the main selection
    void SetMainSelection(int selection);

    // Which selection is the main selection
    int GetMainSelection() const;
    void SetSelectionNCaret(int selection, int pos);
    int GetSelectionNCaret(int selection) const;
    void SetSelectionNAnchor(int selection, int posAnchor);
    int GetSelectionNAnchor(int selection) const;
    void SetSelectionNCaretVirtualSpace(int selection, int space);
    int GetSelectionNCaretVirtualSpace(int selection) const;
    void SetSelectionNAnchorVirtualSpace(int selection, int space);
    int GetSelectionNAnchorVirtualSpace(int selection) const;

    // Sets the position that starts the selection - this becomes the anchor.
    void SetSelectionNStart(int selection, int pos);

    // Returns the position at the start of the selection.
    int GetSelectionNStart(int selection) const;

    // Sets the position that ends the selection - this becomes the currentPosition.
    void SetSelectionNEnd(int selection, int pos);

    // Returns the position at the end of the selection.
    int GetSelectionNEnd(int selection) const;
    void SetRectangularSelectionCaret(int pos);
    int GetRectangularSelectionCaret() const;
    void SetRectangularSelectionAnchor(int posAnchor);
    int GetRectangularSelectionAnchor() const;
    void SetRectangularSelectionCaretVirtualSpace(int space);
    int GetRectangularSelectionCaretVirtualSpace() const;
    void SetRectangularSelectionAnchorVirtualSpace(int space);
    int GetRectangularSelectionAnchorVirtualSpace() const;
    void SetVirtualSpaceOptions(int virtualSpaceOptions);
    int GetVirtualSpaceOptions() const;

    // On GTK+, allow selecting the modifier key to use for mouse-based
    // rectangular selection. Often the window manager requires Alt+Mouse Drag
    // for moving windows.
    // Valid values are SCMOD_CTRL(default), SCMOD_ALT, or SCMOD_SUPER.
    void SetRectangularSelectionModifier(int modifier);

    // Get the modifier key used for rectangular selection.
    int GetRectangularSelectionModifier() const;

    // Set the foreground colour of additional selections.
    // Must have previously called SetSelFore with non-zero first argument for this to have an effect.
    void SetAdditionalSelForeground(const wxColour& fore);

    // Set the background colour of additional selections.
    // Must have previously called SetSelBack with non-zero first argument for this to have an effect.
    void SetAdditionalSelBackground(const wxColour& back);

    // Set the alpha of the selection.
    void SetAdditionalSelAlpha(int alpha);

    // Get the alpha of the selection.
    int GetAdditionalSelAlpha() const;

    // Set the foreground colour of additional carets.
    void SetAdditionalCaretForeground(const wxColour& fore);

    // Get the foreground colour of additional carets.
    wxColour GetAdditionalCaretForeground() const;

    // Set the main selection to the next selection.
    void RotateSelection();

    // Swap that caret and anchor of the main selection.
    void SwapMainAnchorCaret();

    // Indicate that the internal state of a lexer has changed over a range and therefore
    // there may be a need to redraw.
    int ChangeLexerState(int start, int end);

    // Find the next line at or after lineStart that is a contracted fold header line.
    // Return -1 when no more lines.
    int ContractedFoldNext(int lineStart);

    // Centre current line in window.
    void VerticalCentreCaret();

    // Move the selected lines up one line, shifting the line above after the selection
    void MoveSelectedLinesUp();

    // Move the selected lines down one line, shifting the line below before the selection
    void MoveSelectedLinesDown();

    // Set the identifier reported as idFrom in notification messages.
    void SetIdentifier(int identifier);

    // Get the identifier.
    int GetIdentifier() const;

    // Set the width for future RGBA image data.
    void RGBAImageSetWidth(int width);

    // Set the height for future RGBA image data.
    void RGBAImageSetHeight(int height);

    // Define a marker from RGBA data.
    // It has the width and height from RGBAImageSetWidth/Height
    void MarkerDefineRGBAImage(int markerNumber, const unsigned char* pixels);

    // Register an RGBA image for use in autocompletion lists.
    // It has the width and height from RGBAImageSetWidth/Height
    void RegisterRGBAImage(int type, const unsigned char* pixels);

    // Scroll to start of document.
    void ScrollToStart();

    // Scroll to end of document.
    void ScrollToEnd();

    // Set the technology used.
    void SetTechnology(int technology);

    // Get the tech.
    int GetTechnology() const;

    // Create an ILoader*.
    //void* CreateLoader(int bytes) const;

    #endif //%wxchkver_2_9_5

    // Start notifying the container of all key presses and commands.
    void StartRecord();

    // Stop notifying the container of all key presses and commands.
    void StopRecord();

    // Set the lexing language of the document.
    void SetLexer(int lexer);

    // Retrieve the lexing language of the document.
    int GetLexer() const;

    // Colourise a segment of the document using the current lexing language.
    void Colourise(int start, int end);

    // Set up a value that may be used by a lexer for some optional feature.
    void SetProperty(const wxString& key, const wxString& value);

    // Set up the key words used by the lexer.
    void SetKeyWords(int keywordSet, const wxString& keyWords);

    // Set the lexing language of the document based on string name.
    void SetLexerLanguage(const wxString& language);

    // Retrieve a 'property' value previously set with SetProperty.
    wxString GetProperty(const wxString& key);

    // Retrieve a 'property' value previously set with SetProperty,
    // with '$()' variable replacement on returned buffer.
    wxString GetPropertyExpanded(const wxString& key);

    // Retrieve a 'property' value previously set with SetProperty,
    // interpreted as an int AFTER any '$()' variable replacement.
    int GetPropertyInt(const wxString& key) const;

    // Retrieve the number of bits the current lexer needs for styling.
    int GetStyleBitsNeeded() const;

    // END of generated section
    //----------------------------------------------------------------------
    // Others...

    // Retrieve a '\n' separated list of properties understood by the current lexer.
    %wxchkver_2_9_5 wxString PropertyNames() const;

    // Retrieve the type of a property.
    %wxchkver_2_9_5 int PropertyType(const wxString& name);

    // Describe a property.
    %wxchkver_2_9_5 wxString DescribeProperty(const wxString& name) const;

    // Retrieve a '\n' separated list of descriptions of the keyword sets understood by the current lexer.
    %wxchkver_2_9_5 wxString DescribeKeyWordSets() const;

    //}}}
    //----------------------------------------------------------------------

    // Manually declared methods

    // Returns the line number of the line with the caret.
    int GetCurrentLine();

    // Extract style settings from a spec-string which is composed of one or
    // more of the following comma separated elements:
    //
    // bold turns on bold
    // italic turns on italics
    // fore:[name or #RRGGBB] sets the foreground colour
    // back:[name or #RRGGBB] sets the background colour
    // face:[facename] sets the font face name to use
    // size:[num] sets the font size in points
    // eol turns on eol filling
    // underline turns on underlining
    //
    void StyleSetSpec(int styleNum, const wxString& spec);


    // Get the font of a style.
    %wxchkver_2_9_5 wxFont StyleGetFont(int style);


    // Set style size, face, bold, italic, and underline attributes from
    // a wxFont's attributes.
    void StyleSetFont(int styleNum, wxFont& font);



    // Set all font style attributes at once.
    void StyleSetFontAttr(int styleNum, int size, const wxString& faceName, bool bold, bool italic, bool underline, wxFontEncoding encoding=wxFONTENCODING_DEFAULT);


    // Set the character set of the font in a style. Converts the Scintilla
    // character set values to a wxFontEncoding.
    void StyleSetCharacterSet(int style, int characterSet);

    // Set the font encoding to be used by a style.
    void StyleSetFontEncoding(int style, wxFontEncoding encoding);


    // Perform one of the operations defined by the wxSTC_CMD_* constants.
    void CmdKeyExecute(int cmd);


    // Set the left and right margin in the edit area, measured in pixels.
    void SetMargins(int left, int right);


    // Retrieve the start and end positions of the current selection.
    //#ifdef SWIG
    // void GetSelection(int* OUTPUT, int* OUTPUT);
    //#else
    // %override [int startPos, int endPos] wxStyledTextCtrl::GetSelection( );
    // C++ Func: void GetSelection(int* startPos, int* endPos);
    void GetSelection();
    //#endif

    // Retrieve the point in the window where a position is displayed.
    wxPoint PointFromPosition(int pos);


    // Scroll enough to make the given line visible
    void ScrollToLine(int line);


    // Scroll enough to make the given column visible
    void ScrollToColumn(int column);


    // Send a message to Scintilla
    long SendMsg(int msg, long wp=0, long lp=0);


    // Set the vertical scrollbar to use instead of the ont that's built-in.
    void SetVScrollBar(wxScrollBar* bar);


    // Set the horizontal scrollbar to use instead of the ont that's built-in.
    void SetHScrollBar(wxScrollBar* bar);

    // Can be used to prevent the EVT_CHAR handler from adding the char
    bool GetLastKeydownProcessed( );
    void SetLastKeydownProcessed(bool val );

    // Write the contents of the editor to filename
    bool SaveFile(const wxString& filename);

    // Load the contents of filename into the editor
    bool LoadFile(const wxString& filename);

    //#ifdef STC_USE_DND
    // Allow for simulating a DnD DragOver
    // wxDragResult DoDragOver(wxCoord x, wxCoord y, wxDragResult def);

    // Allow for simulating a DnD DropText
    // bool DoDropText(long x, long y, const wxString& data);
    //#endif

    // Specify whether anti-aliased fonts should be used. Will have no effect
    // on some platforms, but on some (wxMac for example) can greatly improve
    // performance.
    void SetUseAntiAliasing(bool useAA);

    // Returns the current UseAntiAliasing setting.
    bool GetUseAntiAliasing();

    // Clear annotations from the given line.
    %wxchkver_2_9_5 void AnnotationClearLine(int line);

    // The following methods are nearly equivalent to their similarly named
    // cousins above. The difference is that these methods bypass wxString
    // and always use a char* even if used in a unicode build of wxWidgets.
    // In that case the character data will be utf-8 encoded since that is
    // what is used internally by Scintilla in unicode builds.

    // Add text to the document at current position.
    void AddTextRaw(const char* text);

    // Insert string at a position.
    void InsertTextRaw(int pos, const char* text);

    // Retrieve the text of the line containing the caret.
    // Returns the index of the caret on the line.
    //#ifdef SWIG
    // wxCharBuffer GetCurLineRaw(int* OUTPUT);
    //#else
    // wxCharBuffer GetCurLineRaw(int* linePos=NULL);
    //#endif

    // Retrieve the contents of a line.
    // wxCharBuffer GetLineRaw(int line);

    // Retrieve the selected text.
    // wxCharBuffer GetSelectedTextRaw();

    // Retrieve a range of text.
    // wxCharBuffer GetTextRangeRaw(int startPos, int endPos);

    // Replace the contents of the document with the argument text.
    // void SetTextRaw(const char* text);

    // Retrieve all the text in the document.
    // wxCharBuffer GetTextRaw();

    // Append a string to the end of the document without changing the selection.
    // void AppendTextRaw(const char* text);

}; 