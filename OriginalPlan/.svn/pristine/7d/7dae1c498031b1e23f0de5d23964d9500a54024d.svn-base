===========================================系统设计===========================================
0. 开新项目之前，要把急需要实现的功能列出来: 如自动重启, 正确退出服务器, 配置文件远程加载等功能
0-1. 日志格式统一: MOD;REASON;PARAM;, 例gxInfo("Test log", LOGAID(pPlayer->getAccountID()), LOGRID(pPlayer->getRoleUID());
0-2. 将开发写成一本开发手册，新人进来开发之前需要先熟悉开发手册, 手册上需要加上接口及注意事项
0-3. 服务器管理接口: 执行启动脚本, 显示服务器系统时间及程序调整时间, 服务器名字
0-4. 日志分析工具, 通过输入条件，可以把符合条件的日志全部显示出来, 可以输入多个条件, 及输入指定的行开始, 合并日志文件
0-5. 主日志模块及次日志模块, 每个协议处理前设置主日志模块, 逻辑模块里设置次日志模块
0-6. 一个功能完成之后，要检测哪些东西, 必须写成文档, 如:日志要全, 变量命名要清晰, 文件要分开
0-7. 使用valgrind处理所有的错误, 必须全部检查出来
0-8. 所有的编译错误全部处理
0-9. 每隔一段时间要做性能测试
0-10. 开发的同时要进行机器人测试
0-11. 所有的常量全部改成脚本配置
0-12. 将数据加载流程重新梳理, 世界服务器仅仅请求加载数据, 请求加载成功后, 则反回客户端, 数据加载是异步的过程, 将少登陆压力及提高cpu处理能力
0-13. 加上等待队列
0-14. 后台分析加上: 新手指引, 统计数据
0-15. 数据表加上日期, 账号名, 姓名
0-16. 日志模块加上标记及条件, 通过标记及条件将日志输出到其他的目录

1. 自动重连的机制 [完成]
2. 多线程系统处理队列 [完成]
3. 服务器状态机, 开启状态，加载状态..., 主要是用来处理退出, 服务器要求能正确退出
4. 添加可以在调试模式下修改服务器时间的功能
5. 处理主动断开Socket流程, 可以等待一段时间
6. 对象管理器需要修改, 将分配对象与管理对象合起来, 并写好基类, 并写好重命名函数: findBy*, isExistBy*, deleteBy*
7. 重写登陆流程及角色退出流程,w<-->m同时有且只能有一次请, m<-->db同时有且只能有一次离线保存请求,
   保证登陆流程是同步的, 每个登陆及退出的流程协议加上序号, 卡号的问题由心跳及脏标记来解决
8. 接口化, 角色对象管理的on*系统函数必须抽象成接口
9. 退出情况: 1. 玩家请求退出 quitGame
             2. 主动踢掉玩家 kick
	     3. 直接踢掉,主要用于出错 directKick
10. 数据库对象修改，不方便, 每次读取指定数据库的数据时候，需要创建类并且发送任务去读取, 不需要创建类, 直接发送到指定ID的数据库即可
11. 时间库:游戏中用本地时间,  保存到数据库及与第三方通讯采用标准时间, CGameTime(转换为本地时间,转换成utc时间,格式化成字符串)
12. 时间类需求: 转换成本地时间,转换成世界时间,判断已经过了当天某个时间,判断当前时间到某个指定时间差多了多久
13. 不再做逻辑开发, 将服务器管理及对象管理全部剥离开来, 逻辑采用组件开发模式
14. 组件模式: 可以打印对象内的组件顺序(因为组件顺序会影响数据初始化顺序), 可以调整组件顺序
15. Sql连接上加更多的接口: 如通过表查找某个字段的值
16. 配置必须能不在重启服务器情况下重新加载
17. 文档生成工具没有搜索ID的功能，很不方便，建议单独做成一个界面查看
18. 时间库, 判定两个UTC时间是否在同一天，两个本地时间是否在同一天
19. 时间，线程，时间类型写成手册
20. 将时间(TimeMangager,CDateTime), 线程, Socket, RTTI, 数据库处理重新处理过, 一定要遵循简单的原则
21. 将TODO功能生成文档, 并且每日提醒
22. 数据库操作需要详细记录操作前数据，及改变后数据, 防止数据丢失
23. 其他所有服务器也需要建立模块化操作, 世界服务器必须建立模块化的功能
24. 代码必须隔一段时间重构并且需要审核, 做到更新日稳定版本, 使用工具自动发布版本 [重点]
25. 数据库添加增加某个字段值的接口
26. 模块化, 每个功能不管大小必须模块化
27. 协议文档化
28. 运行时类型信息工具自动添加
29. 编写日志服务器: 
	方法1: 数据采用JSON传输, 数据压缩, 解析的SQL语句连接采用脚本执行, 指定ID的SQL有优先级, 日志的生成JSON采用脚本实现
	    日志必须能够在本地打印及发送到远程服务器
	    示例: RecordLog("itemlog", 1, 2, 3, 4);
	方法2: 采用二进制传输, 前面几个字节用于位表示类型, 后面存储数据, 日志数据库存sql格式, 在加载sql格式字符串之后把sql格式预先解析了, 这样只需要把几部分及参数连接起来就行了
30. 数据库的DB_BEGIN和DB_END换成普通的FUNC_BEGIN和FUNC_END
31. 所有的功能可以通过http连接来测试, 可以通过telnet连接上去
32. 修改世界服务器的英雄榜功能, 做到无sql操作
33. 自动生成脚本的工具必须把当前头文件加进去
34. 添加自动编译的脚本
35. 脚本必须能够热启动
36. 写一套完善的脚本机制，从构造协议及发送协议及处理协议的功能, 每个协议都必须有序列化及反序列化的机制, 必须能通过工具生成lua协议代码, lua协议分成序列化及非序列化功能两部分
    C++代码必须有序列化功能及反序列化功能, 协议接口有: 手动写入协议, 自动写入lua对象
    协议流程: 流对象, 
37. lua脚本编写规则: C++接口以指针形式返回对象, c++给lua的接口必须以lua开头, 每个功能模块以类的形式编写, 全局函数必须加上功能模块名, 如RankList
38. 代码审核工具
39. svn提交强制写日志
40. 机器人自动化测试
41. lua日志接口简化, 不需要连接也可以输出
42. ini配置从资源服务器读取, config配置从远程http服务器读取
43. ini配置中的名字全部修改成正确的名称
44. 配置文件采用工具自动导成C++及lua代码, 工具必须要能检测配置的错误
45. windows/linux下无内存泄露, fastformat无异常
46. 数据库封装: 阻塞数据库及非阻塞数据库可以简单的添加，阻塞数据库必须有管理器, 
47. 数据库名必须都宏的形式定义
48. 使用nosql数据库存储角色的所有数据, 其他需要联表查询的数据使用mysql存储
49. 数据库结构、内存结构、协议结构区分开来，分别放在不同的文件，方便使用工具生成对应的代码
50. 数据库结构需要生成nosql代码
51. 每个类都加上反射代码
52. 每个类必须有clean函数代码
53. 所有的单个dbhandler必须要有统一管理器，如全局数据库等
54. 数据库要使用innodb
55. 通过错误码输出错误码的解释
56. 服务器正常停止, 不报任何错误, 并且资源需要全部释放, 内存不能有任何溢出
57. 枚举的值用字符串来替换, 最终值通过常量表来读取, 类似于常量表的处理方式, 如数据库表名
58. 能够向底层动态增加数据库连接, 而不是配置死有多少就固定多少
59. 简化查询一条记录的接口, 输入表名，条件，列名就可以查找到对应的数据, 通过map存储列名
60. 项目组成 core, share, recordserver, resourceserver, loginserver, managerserver, worldserverbase 这些理论上应该都是可以独立运行的
             gameshare, gamebase, mapserverlib, worldserverlib 这些是部分与游戏逻辑相关的
	     mapserver, worldserver, script 这些全是游戏逻辑
	     test 技术测试
	     testclient 测试客户端及压力测试
	     testserver 游戏测试
61. 简化服务器框架, 将服务器框架独立出来, 每次进行项目开发之前要保证以下工程是可以独立编译运行的
    core, share, recordserver, resourceserver, loginserver, managerserver, worldserverbase 这些理论上应该都是可以独立运行的
    gameshare, gamebase, mapserverlib, worldserverlib 这些是部分与游戏逻辑相关的
62. 开发工具: 禅道 bug及工作安排
              定时工作提醒及bug处理软件
	      定时toto处理
	      协议文档生成工具
	      反射代码生成工具
	      错误码生成工具
63. socket属性配置太长了，需要修改
64. 接口规范: 所有属性都必须采用get,set接口
65. 所有的服务器ID使用TServerID_t
66. 对象管理混乱, CLoginWorldPlayerMgr是采用状态对象管理器来管理的
67. 编程规范: 文件命名,注释,变量命名
68. 充值服务器名字为 billserver
69. 重新简化服务器框架, 重新定义接口: onInitSocket, onInitServerData, onInitServerDbData
70. 重连可以设置重连次数: 第一次连接时可以重连指定次数，断开重连可以无限次
71. 日志加上标记, 可以记录特殊日志
72. 消息处理, 消息对象可以拿到数据对象的数据, 然后发送, 数据对象只要通知消息对象发送对应的数据包就行了
73. 游戏ini配置生成工具
74. 添加最近登出算法，如果服务器压力达到一定的地步, 将最早登出的玩家从登出列表中删除
75. 脚本函数必须要见名知意, 不这样子的话，后期比较难维护
76. 自动生成脚本代码的工具必须在linux可以运行
77. 模块内的日志可以输出RoleUID及账号之类的, 如何让日志更整齐, 开发日志工具，可以查看一个人从登陆到退出的所有日志
78. onLoad内的流程需要重新整理, 细分成loadBefore() loadModoule() loadAfter()
79. 开发一个lua远程调试器, 一次调试操作可以打印调用堆栈及指定帧的所有变量存储到文件，然后再在本地加载此次调试映像重新调试
80. 可以导出lua中的全局变量到本地文件中去或者直接通过json格式传输到调试器上显示
82. 把lua基础库及工具关联起来
83. 属性计算仔细调整
84. 角色基础属性做成一个模块
85. 协议可以带字符串，这样有些流程字段就可以不用再在协议里明确定出来, 如账号ID在角色加载协议里就不需再次定义, 只需要带到协议的附加字符串里就ok
86. 抽离出来一个事件处理组件, 一些依赖性广播事件在这个组件里完成，这个组件可以获取到其他所有的组件
87. 脚本组件的接口参数采用JSON格式传送
88. 添加能查询单个字段的sql语句
89. 把服务器内的常量替换成表格
90. 缺少一个跟php后台交互的服务器，这个后台服务器只做数据中转(如:封号,禁言,补偿)
90. 代码评审前列一个注意事项, 以后代码评审按这个列表.列表至少包含协议改动, 函数及脚本代码改动要关联, 错误码、常量改动要和脚本对应改动
91. 做一个常量及错误码导出成C++或lua代码的工具, 常量表和错误码放在excel表里
92. 在开新项目之前必须要对一些第三方库进行测试: 如luabind和tolua++比较，看是用luabind方便还是tolua++方便, 如ini配置到底是用ini文件还是用xml或是用lua配置或是用json
93. 把机器人测试框架的登陆模块剥离出来, 以后机器人登陆就不需要修改了, 逻辑通过脚本来实现
94. 每个协议定义成类, 协议只需要负责生成及赋值数据，具体的发送过程可以封装, 协议的生成通过协议ID来生成, 协议可以转换成(json,bindata等), 所有的协议直接在lua定义, 协议需要按模块分文件存储
    协议可以直接导出成C++代码, 协议及结构体定义必须有工具检测, 协议的定义可以通过注释加上约束, 如引用其他结构体
95. 可以有监听工具监听服务器日志及服务器协议, 可以查看角色数据的远程调试器
96. 每做完一个系统必须进行代码评审, 把TODO解决掉
97. 每个对象可以带一些特殊属性, 属性的获取及保存可以在C++里调用, 比如说道具的基础数据可以用这种格式来保存, 复杂数据通过lua扩展, 这样道具及背包模块可以独立出来到基础库中
98. 可以做一个小配置的服务器, 通过开关可以控制内存的运行时分配及缓存分配
99. 指定Log标记, 通过addLogger可以直接让日志输出到指定文件中去
100. 每个对象都带上toString()方法, 这样可以直接输出日志
101. 服务器模型重新整理一次，将服务器任务队列, 网络, 数据库, 广播队列统一成一个队列模型, 可以自由方便添加队列, 队列需要有优先级, 可以自由换锁
102. 每天早晨过来，必须要安排当天的工作
103. 错误码需要统一, 公用的错误码可以通用
105. 所有的动态东西都做成配置
106. 定时器加上次数，根据次数来做定时，比如说登陆之后第一次保存, 要隔一分钟保存玩家数据, 以后隔十分钟保存玩家数据
107. 写一个管理服务器，管理服务器的逻辑处理用lua来做
108. 把底层全用注册到lua脚本
109. handler处理要分文件或者分类处理, 不要挤在一个handler文件里, 通过注册方式分散在不同的模块
110. 服务器设计方式必须往模块式方向设计， 这样可以用脚本实现逻辑，服务器模型固定
111. 流程日志必须详细
112. 数据库添加可以查询多个字段的接口，字段类型只有两种, string和int64,uint64几种, 这样脚本可以通过这些接口查查询或者更新
113. 数据库接口可以简的插入，删除，更新
113. 记录玩家的登陆行为，针对玩家的登陆行为做一个数据缓存，登陆频率高的玩家会更慢的释放服务器的内存
114. 实现一个mq队列
115. fastformat日志有异常, 需要全部修改
116. 每个类定义一个清理, 初始化的接口
117. 提供一个变量类, 存储一些标记值, 如: 某个功能已经完成，当天不可以再进行操作
118. 任何资源的操作可以通过接口来完成, 比如说通过配置url加载脚本及配置
119. 日志里需要记录账号名字, 这样更加直观
120. 服务器模型里添加停服定时器, 把该有的功能添加到服务器模型里, 包括服务器信息管理
121. 日志字段必须通过模板来得到格式化字符串
123. 添加发布版本的工具, 配置用http获取, 调用命令行发布版本
124. 把安全函数和非安全函数找出来
135. 写一个比较完整的字符串类, 包括分割格式化之类的
136. 重启服务器需要提供过了几天/小时的接口
137. 金钱可以直接扣除也可以通过道具扣除, 所以日志必须提供相关接口
138. 扣除道具和金钱统一接口
139. 数据库表需要加上区ID
140. 添加玩家在线和离线的功能, 在线即进入游戏, 离线即socket断开连接, 还有login和logout的功能
141. 将心跳功能在windows调试下无效
142. 加上命令行启动参数: 包括日志目录, 配置目录等
143. coredump加上版本号
144. 协议大小超过65535
146. 重置次数或时间或过天的地方要记录日志, 加载列表的地方需要加上日志
147. 内存池中的变量需要清理
148. 添加物品或金钱采用统一接口, 这样可以记录日志
149. 常见错误生成一个文档，上线了根据文档来查看日志
150. CGameTime添加更丰富的接口, 如: 得到天(日期, int类型), 得到年月日
152. 将hummandb独立出来, 玩家重连的时候或者下次上线的时候直接取这个数据块就ok了, 玩家进入游戏时才登陆
153. 加载玩家的数据优先级根据玩家下线时间来，如果上次玩家下线很长，则优先加载玩家数据
154. 在世界服务器上添加玩家记录列表，记录玩家的临时信息, 如上次玩家登陆的游戏服务器, 这样下次玩家再登陆的时候就可以根据这些信息释放mapserver的数据
155. 在mapserver上记录玩家的登陆列表, 如上次退出的时间, 这样可以记录登陆的优先级
156. 服务器任务池放在网络模块

===========================================服务器技术
gcc mudflap 用来检测内存越界/地址越界的问题(ZZ)
http://hi.baidu.com/zengzhaonong/item/7a570a167fbe9e5e2a3e2282

构建带内存错误检查的gcc 
http://blog.csdn.net/absurd/article/details/1076325

A Cross-Platform Memory Leak Detector
http://wyw.dcweb.cn/leakage.htm

GCC 4.8 发布
http://www.lingcc.com/2013/03/26/12293/

在 Linux 平台中调试 C/C++ 内存泄漏方法
http://www.uml.org.cn/c++/201110264.asp

GCC 3 参数
http://www.shanghai.ws/gnu/gcc_3.htm

http://en.wikipedia.org/wiki/Static_code_analysis

===========================================修复BUG===========================================
19. 把所有表格遍历的函数改成查找
20. 修改sql提示
23. 检查所有的is_base_of
24. 添加堆栈分配
25. sql字符串连接错误
26. 修改时间类，赋值时分秒生成时间
29. 被动技能
35. 重新加载策划表 
36. 修正属性的最大值
39. CFixEmptyObjPool读取到内存需要修改, 调用构造函数
43. 添加日志服务器
47. 配置表检测
48. 测试定时器
49. 加定时器, 相对定时器，绝对定时器
50. 加一个离线过天定时器的函数
59. 测试定时器
63. 世界服务器添加能够重新排名的gm命令
64. 检测英雄榜并且重排名 
68. 查找所有的new
69. 相关数据库表的数据脏了
72. 注册账号
79. 数据库Select的日志
81. 位置出错的时候读取地图表的正确位置
82. getCount返回-1
86. 除号要检测是否为0
89. 更新mapserver服务器数据到世界服务器
90. 脚本调函数出错
91. 时间全部改成datetime类型
95. 礼包
97. 英雄界面显示无
99. 寻宝表的操作时间出错
101. 处理所有错误日志
102. 玩家不断登陆退出
103. 建立数据库索引
105. 玩家详细数据没有赋值
106. 挑战次数更新
107. 检测脚本执行堆栈是否正确
109. 任务, 战斗完成之后杀的怪物和英雄
111. 最大挑战次数
114. 错误提示信息
117. 角色详细数据红蓝点去掉
118. 商城的时间更新不及时
119. 世界服务器数据库链接
120. 其他人的战斗信息
122. 排行榜更新有问题
128. 角色最大等级需要改变一下 
129. 修改成多个登陆服务器
130. 处理所有的日志
137. 排行榜更新时间放到常量表里
134. 序列化加断言
135. 竞技场奖励第一天可以领取
136. role角色的toString
138. GM权限管理
141. 小兵的属性=基础属性+等级*系数
142. 名字长度限制
146. 额外购买闯关次数 [完成]
147. 地图服务器的ini配置有两个日志服务器配置
148. 重连的时候需要设置重连类型 LOAD_ROLE_TYPE_LOGIN
149. 给角色身上添加上IP地址, 登陆登出接口, 掉线行为
150. 玩家登陆的时候需要添加上渠道
151. 任务需要加一个已经完成的事件
152. 无尽长廊常量表需要加上注释
154. 挑战其他玩家的基地血量现在从配置表里读取的
155. 模拟测试开多个登陆服务器及开多个世界服务器, 看会不会有相同连接到登陆服务器
156. getLoginServerDbHandle() 采用ID获取
157. 未完成功能: 玩家已经有角色的区列表未实现
158. 数据库要使用innodb
159. 端口要分配正确(现在一个服务器只有十个端口可以用)
160. 加上版本检测
161. 把数据库表名统一
165. selectEx里的if(res)需要加else输出SQL错误 
166. NetTask会导致dump, 修改锁
167. 充值的RMB及转换后的钻石都要日志记录, 世界服务器要拿到macid
169. 如果管理服务器挂了, 重新连接检测到有新的服务器连接成功了，就不要再重连了
173. 把切换场景的操作记录下来
174. 世界服务器有时候总是无法启动成功, 提示重复注册
181. 添加流程日志, 检查所有日志
182. 名字最小长度和最大长度读常量表
183. 把数据库表换成innodb [完成]
184. 把地图服务器的排行榜加载删除掉
185. 新创建角色赠送玩家武将的ID为空，必须加判断
186. 把所有编译错误解决掉
187. 账号第一次验证需要日志记录
190. 添加一个可以修改服务器内部常量配置的函数，如修改主线程帧数
193. 世界服务器登陆统计要选择第一个登陆服
194. 服务器日志统一处理, 后台优先完成
197. 多线程日志改成本地日志
198. 把CSimpleQueryResult<T1> execute(const std::string& tableName, const std::string& colName1,
			mysqlpp::Connection* pConn = NULL, const std::string& cond1 = "",
			const std::string& cond2 = "", const std::string& cond3 = "", const std::string& cond4 = "", const std::string& cond5 = "")
     的connect移到前面
199. 战灵属性加成
200. 合服操作
201. 公告的起始时间没有检测
202. 后台管理公告的ID没有生成
203. 登陆时间退出的时候已经没有了
205. 心跳需要重新做, 一段时间不T下线
206. 日志: 滚服操作没有完成, 渠道(平台)和子渠道
205. 数据库表需要加上区ID
207. 错误码抽成策划表格
208. coredump加上版本号
209. 账号表里加上角色UID
210. _DBCOL_TYPE_ADDR_("total_charge_rmb", TRmb_t, info.totalChargeRbm)  重新改写
211. 名字取空的
212. 地下城暂时取前100名
213. 协议过大必须要定义成变长协议
214. 将内存池完全改成new的内存池
215. 断线地下城不会失败
216. 表格更新改成热更新
217. 怎么让数据库表更快的同步更新
218. 如果检测到客户端协议发错了或者协议大小不对，直接kick掉客户端
219. GM命令配置需要添加到ini工具里

========================================第一次测试========================================
1. 登陆接入pp
2. 公告
3. 关闭服务器
4. 补偿元宝
5. 后台日志
6. 加上心跳协议
7. 新的七天奖励
8. 将代码发布及配置表发布改成两个脚本
9. 日志服务器需要重新连接的功能
10. 日志服务器需要有单独启动的功能
11. 名字改成CCharArray2<50>
