#ifndef _AI_AVOID_OVERLAP_H_
#define _AI_AVOID_OVERLAP_H_

#include "core/common.h"
#include "core/debug.h"

#include "game_struct.h"
#include "game_misc.h"

enum 
{
	MAX_ATTACK_RANGE = 10,
	MAX_FRACTION = (2*MAX_ATTACK_RANGE+1)*(2*MAX_ATTACK_RANGE+1),		/*9*9*/
	MAX_MOVETIMES = 4,		
	MAX_USEDTIMES = 255,
	MAX_FIND_TIMES = 10,		// 遍历找空位的最大次数
	MIN_MAX_DIST = 2,
};

static const TAdjust NightGrid2Adjust[MAX_ATTACK_RANGE*2+1][MAX_ATTACK_RANGE*2+1] =
{
	{{-10,-10},{-9,-10},{-8,-10},{-7,-10},{-6,-10},{-5,-10},{-4,-10},{-3,-10},{-2,-10},{-1,-10},{0,-10},{1,-10},{2,-10},{3,-10},{4,-10},{5,-10},{6,-10},{7,-10},{8,-10},{9,-10},{10,-10},},
	{{-10,-9},{-9,-9},{-8,-9},{-7,-9},{-6,-9},{-5,-9},{-4,-9},{-3,-9},{-2,-9},{-1,-9},{0,-9},{1,-9},{2,-9},{3,-9},{4,-9},{5,-9},{6,-9},{7,-9},{8,-9},{9,-9},{10,-9},},
	{{-10,-8},{-9,-8},{-8,-8},{-7,-8},{-6,-8},{-5,-8},{-4,-8},{-3,-8},{-2,-8},{-1,-8},{0,-8},{1,-8},{2,-8},{3,-8},{4,-8},{5,-8},{6,-8},{7,-8},{8,-8},{9,-8},{10,-8},},
	{{-10,-7},{-9,-7},{-8,-7},{-7,-7},{-6,-7},{-5,-7},{-4,-7},{-3,-7},{-2,-7},{-1,-7},{0,-7},{1,-7},{2,-7},{3,-7},{4,-7},{5,-7},{6,-7},{7,-7},{8,-7},{9,-7},{10,-7},},
	{{-10,-6},{-9,-6},{-8,-6},{-7,-6},{-6,-6},{-5,-6},{-4,-6},{-3,-6},{-2,-6},{-1,-6},{0,-6},{1,-6},{2,-6},{3,-6},{4,-6},{5,-6},{6,-6},{7,-6},{8,-6},{9,-6},{10,-6},},
	{{-10,-5},{-9,-5},{-8,-5},{-7,-5},{-6,-5},{-5,-5},{-4,-5},{-3,-5},{-2,-5},{-1,-5},{0,-5},{1,-5},{2,-5},{3,-5},{4,-5},{5,-5},{6,-5},{7,-5},{8,-5},{9,-5},{10,-5},},
	{{-10,-4},{-9,-4},{-8,-4},{-7,-4},{-6,-4},{-5,-4},{-4,-4},{-3,-4},{-2,-4},{-1,-4},{0,-4},{1,-4},{2,-4},{3,-4},{4,-4},{5,-4},{6,-4},{7,-4},{8,-4},{9,-4},{10,-4},},
	{{-10,-3},{-9,-3},{-8,-3},{-7,-3},{-6,-3},{-5,-3},{-4,-3},{-3,-3},{-2,-3},{-1,-3},{0,-3},{1,-3},{2,-3},{3,-3},{4,-3},{5,-3},{6,-3},{7,-3},{8,-3},{9,-3},{10,-3},},
	{{-10,-2},{-9,-2},{-8,-2},{-7,-2},{-6,-2},{-5,-2},{-4,-2},{-3,-2},{-2,-2},{-1,-2},{0,-2},{1,-2},{2,-2},{3,-2},{4,-2},{5,-2},{6,-2},{7,-2},{8,-2},{9,-2},{10,-2},},
	{{-10,-1},{-9,-1},{-8,-1},{-7,-1},{-6,-1},{-5,-1},{-4,-1},{-3,-1},{-2,-1},{-1,-1},{0,-1},{1,-1},{2,-1},{3,-1},{4,-1},{5,-1},{6,-1},{7,-1},{8,-1},{9,-1},{10,-1},},
	{{-10,0},{-9,0},{-8,0},{-7,0},{-6,0},{-5,0},{-4,0},{-3,0},{-2,0},{-1,0},{0,0},{1,0},{2,0},{3,0},{4,0},{5,0},{6,0},{7,0},{8,0},{9,0},{10,0},},
	{{-10,1},{-9,1},{-8,1},{-7,1},{-6,1},{-5,1},{-4,1},{-3,1},{-2,1},{-1,1},{0,1},{1,1},{2,1},{3,1},{4,1},{5,1},{6,1},{7,1},{8,1},{9,1},{10,1},},
	{{-10,2},{-9,2},{-8,2},{-7,2},{-6,2},{-5,2},{-4,2},{-3,2},{-2,2},{-1,2},{0,2},{1,2},{2,2},{3,2},{4,2},{5,2},{6,2},{7,2},{8,2},{9,2},{10,2},},
	{{-10,3},{-9,3},{-8,3},{-7,3},{-6,3},{-5,3},{-4,3},{-3,3},{-2,3},{-1,3},{0,3},{1,3},{2,3},{3,3},{4,3},{5,3},{6,3},{7,3},{8,3},{9,3},{10,3},},
	{{-10,4},{-9,4},{-8,4},{-7,4},{-6,4},{-5,4},{-4,4},{-3,4},{-2,4},{-1,4},{0,4},{1,4},{2,4},{3,4},{4,4},{5,4},{6,4},{7,4},{8,4},{9,4},{10,4},},
	{{-10,5},{-9,5},{-8,5},{-7,5},{-6,5},{-5,5},{-4,5},{-3,5},{-2,5},{-1,5},{0,5},{1,5},{2,5},{3,5},{4,5},{5,5},{6,5},{7,5},{8,5},{9,5},{10,5},},
	{{-10,6},{-9,6},{-8,6},{-7,6},{-6,6},{-5,6},{-4,6},{-3,6},{-2,6},{-1,6},{0,6},{1,6},{2,6},{3,6},{4,6},{5,6},{6,6},{7,6},{8,6},{9,6},{10,6},},
	{{-10,7},{-9,7},{-8,7},{-7,7},{-6,7},{-5,7},{-4,7},{-3,7},{-2,7},{-1,7},{0,7},{1,7},{2,7},{3,7},{4,7},{5,7},{6,7},{7,7},{8,7},{9,7},{10,7},},
	{{-10,8},{-9,8},{-8,8},{-7,8},{-6,8},{-5,8},{-4,8},{-3,8},{-2,8},{-1,8},{0,8},{1,8},{2,8},{3,8},{4,8},{5,8},{6,8},{7,8},{8,8},{9,8},{10,8},},
	{{-10,9},{-9,9},{-8,9},{-7,9},{-6,9},{-5,9},{-4,9},{-3,9},{-2,9},{-1,9},{0,9},{1,9},{2,9},{3,9},{4,9},{5,9},{6,9},{7,9},{8,9},{9,9},{10,9},},
	{{-10,10},{-9,10},{-8,10},{-7,10},{-6,10},{-5,10},{-4,10},{-3,10},{-2,10},{-1,10},{0,10},{1,10},{2,10},{3,10},{4,10},{5,10},{6,10},{7,10},{8,10},{9,10},{10,10},},
};

static const int NightGrid2Index[MAX_ATTACK_RANGE*2+1][MAX_ATTACK_RANGE*2+1] = 
{
	{1  ,80 ,79 ,78 ,77 ,76 ,75 ,74 ,73 ,72 ,71 ,70 ,69 ,68 ,67 ,66 ,65 ,64 ,63 ,62 ,61 ,},
	{2  ,81 ,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,60 ,},
	{3  ,82 ,153,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,134,59 ,},
	{4  ,83 ,154,217,272,271,270,269,268,267,266,265,264,263,262,261,260,259,200,133,58 ,},
	{5  ,84 ,155,218,273,320,319,318,317,316,315,314,313,312,311,310,309,258,199,132,57 ,},
	{6  ,85 ,156,219,274,321,360,359,358,357,356,355,354,353,352,351,308,257,198,131,56 ,},
	{7  ,86 ,157,220,275,322,361,392,391,390,389,388,387,386,385,350,307,256,197,130,55 ,},
	{8  ,87 ,158,221,276,323,362,393,416,415,414,413,412,411,384,349,306,255,196,129,54 ,},
	{9  ,88 ,159,222,277,324,363,394,417,432,431,430,429,410,383,348,305,254,195,128,53 ,},
	{10 ,89 ,160,223,278,325,364,395,418,433,440,439,428,409,382,347,304,253,194,127,52 ,},
	{11 ,90 ,161,224,279,326,365,396,419,434,441,438,427,408,381,346,303,252,193,126,51 ,},
	{12 ,91 ,162,225,280,327,366,397,420,435,436,437,426,407,380,345,302,251,192,125,50 ,},
	{13 ,92 ,163,226,281,328,367,398,421,422,423,424,425,406,379,344,301,250,191,124,49 ,},
	{14 ,93 ,164,227,282,329,368,399,400,401,402,403,404,405,378,343,300,249,190,123,48 ,},
	{15 ,94 ,165,228,283,330,369,370,371,372,373,374,375,376,377,342,299,248,189,122,47 ,},
	{16 ,95 ,166,229,284,331,332,333,334,335,336,337,338,339,340,341,298,247,188,121,46 ,},
	{17 ,96 ,167,230,285,286,287,288,289,290,291,292,293,294,295,296,297,246,187,120,45 ,},
	{18 ,97 ,168,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,186,119,44 ,},
	{19 ,98 ,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,118,43 ,},
	{20 ,99 ,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,42 ,},
	{21 ,22 ,23 ,24 ,25 ,26 ,27 ,28 ,29 ,30 ,31 ,32 ,33 ,34 ,35 ,36 ,37 ,38 ,39 ,40 ,41 ,}
};

static const int NightGridAdjust[MAX_ATTACK_RANGE+1][2] =
{
	{  441, 441  },
	{  433, 440  },
	{  417, 432  },
	{  393, 416  },
	{  361, 392  },
	{  321, 360  },
	{  273, 320  },
	{  217, 272  },
	{  153, 216  },
	{  81, 152  },
	{  1, 80 },
};

static const TAdjust NightGrid[MAX_FRACTION+1] =
{
	{0,0},
	{-10,-10},{-10,-9},{-10,-8},{-10,-7},{-10,-6},{-10,-5},{-10,-4},{-10,-3},{-10,-2},{-10,-1},{-10,0},{-10,1},{-10,2},{-10,3},{-10,4},{-10,5},{-10,6},{-10,7},{-10,8},{-10,9},{-10,10},
	{-9,10},{-8,10},{-7,10},{-6,10},{-5,10},{-4,10},{-3,10},{-2,10},{-1,10},{0,10},{1,10},{2,10},{3,10},{4,10},{5,10},{6,10},{7,10},{8,10},{9,10},{10,10},{10,9},
	{10,8},{10,7},{10,6},{10,5},{10,4},{10,3},{10,2},{10,1},{10,0},{10,-1},{10,-2},{10,-3},{10,-4},{10,-5},{10,-6},{10,-7},{10,-8},{10,-9},{10,-10},{9,-10},{8,-10},
	{7,-10},{6,-10},{5,-10},{4,-10},{3,-10},{2,-10},{1,-10},{0,-10},{-1,-10},{-2,-10},{-3,-10},{-4,-10},{-5,-10},{-6,-10},{-7,-10},{-8,-10},{-9,-10},{-9,-9},{-9,-8},{-9,-7},{-9,-6},
	{-9,-5},{-9,-4},{-9,-3},{-9,-2},{-9,-1},{-9,0},{-9,1},{-9,2},{-9,3},{-9,4},{-9,5},{-9,6},{-9,7},{-9,8},{-9,9},{-8,9},{-7,9},{-6,9},{-5,9},{-4,9},{-3,9},
	{-2,9},{-1,9},{0,9},{1,9},{2,9},{3,9},{4,9},{5,9},{6,9},{7,9},{8,9},{9,9},{9,8},{9,7},{9,6},{9,5},{9,4},{9,3},{9,2},{9,1},{9,0},
	{9,-1},{9,-2},{9,-3},{9,-4},{9,-5},{9,-6},{9,-7},{9,-8},{9,-9},{8,-9},{7,-9},{6,-9},{5,-9},{4,-9},{3,-9},{2,-9},{1,-9},{0,-9},{-1,-9},{-2,-9},{-3,-9},
	{-4,-9},{-5,-9},{-6,-9},{-7,-9},{-8,-9},{-8,-8},{-8,-7},{-8,-6},{-8,-5},{-8,-4},{-8,-3},{-8,-2},{-8,-1},{-8,0},{-8,1},{-8,2},{-8,3},{-8,4},{-8,5},{-8,6},{-8,7},
	{-8,8},{-7,8},{-6,8},{-5,8},{-4,8},{-3,8},{-2,8},{-1,8},{0,8},{1,8},{2,8},{3,8},{4,8},{5,8},{6,8},{7,8},{8,8},{8,7},{8,6},{8,5},{8,4},
	{8,3},{8,2},{8,1},{8,0},{8,-1},{8,-2},{8,-3},{8,-4},{8,-5},{8,-6},{8,-7},{8,-8},{7,-8},{6,-8},{5,-8},{4,-8},{3,-8},{2,-8},{1,-8},{0,-8},{-1,-8},
	{-2,-8},{-3,-8},{-4,-8},{-5,-8},{-6,-8},{-7,-8},{-7,-7},{-7,-6},{-7,-5},{-7,-4},{-7,-3},{-7,-2},{-7,-1},{-7,0},{-7,1},{-7,2},{-7,3},{-7,4},{-7,5},{-7,6},{-7,7},
	{-6,7},{-5,7},{-4,7},{-3,7},{-2,7},{-1,7},{0,7},{1,7},{2,7},{3,7},{4,7},{5,7},{6,7},{7,7},{7,6},{7,5},{7,4},{7,3},{7,2},{7,1},{7,0},
	{7,-1},{7,-2},{7,-3},{7,-4},{7,-5},{7,-6},{7,-7},{6,-7},{5,-7},{4,-7},{3,-7},{2,-7},{1,-7},{0,-7},{-1,-7},{-2,-7},{-3,-7},{-4,-7},{-5,-7},{-6,-7},{-6,-6},
	{-6,-5},{-6,-4},{-6,-3},{-6,-2},{-6,-1},{-6,0},{-6,1},{-6,2},{-6,3},{-6,4},{-6,5},{-6,6},{-5,6},{-4,6},{-3,6},{-2,6},{-1,6},{0,6},{1,6},{2,6},{3,6},
	{4,6},{5,6},{6,6},{6,5},{6,4},{6,3},{6,2},{6,1},{6,0},{6,-1},{6,-2},{6,-3},{6,-4},{6,-5},{6,-6},{5,-6},{4,-6},{3,-6},{2,-6},{1,-6},{0,-6},
	{-1,-6},{-2,-6},{-3,-6},{-4,-6},{-5,-6},{-5,-5},{-5,-4},{-5,-3},{-5,-2},{-5,-1},{-5,0},{-5,1},{-5,2},{-5,3},{-5,4},{-5,5},{-4,5},{-3,5},{-2,5},{-1,5},{0,5},
	{1,5},{2,5},{3,5},{4,5},{5,5},{5,4},{5,3},{5,2},{5,1},{5,0},{5,-1},{5,-2},{5,-3},{5,-4},{5,-5},{4,-5},{3,-5},{2,-5},{1,-5},{0,-5},{-1,-5},
	{-2,-5},{-3,-5},{-4,-5},{-4,-4},{-4,-3},{-4,-2},{-4,-1},{-4,0},{-4,1},{-4,2},{-4,3},{-4,4},{-3,4},{-2,4},{-1,4},{0,4},{1,4},{2,4},{3,4},{4,4},{4,3},
	{4,2},{4,1},{4,0},{4,-1},{4,-2},{4,-3},{4,-4},{3,-4},{2,-4},{1,-4},{0,-4},{-1,-4},{-2,-4},{-3,-4},{-3,-3},{-3,-2},{-3,-1},{-3,0},{-3,1},{-3,2},{-3,3},
	{-2,3},{-1,3},{0,3},{1,3},{2,3},{3,3},{3,2},{3,1},{3,0},{3,-1},{3,-2},{3,-3},{2,-3},{1,-3},{0,-3},{-1,-3},{-2,-3},{-2,-2},{-2,-1},{-2,0},{-2,1},
	{-2,2},{-1,2},{0,2},{1,2},{2,2},{2,1},{2,0},{2,-1},{2,-2},{1,-2},{0,-2},{-1,-2},{-1,-1},{-1,0},{-1,1},{0,1},{1,1},{1,0},{1,-1},{0,-1},{0,0}
};


class CAvoidOverlap
{
public:

	CAvoidOverlap( void );
	virtual ~CAvoidOverlap( void ) {}

	/** Desc				:得到怪物攻击玩家的目标坐标
	*  @param rTar			:目标坐标
	*  @param rMonsterPos	:怪物坐标
	*  @param rPlayerPos	:玩家坐标
	*  @param fMaxDist		:怪物最大攻击距离
	*  @param fMinDist		:怪物最小攻击距离
	*  @return				:
	*/
	bool getDirPos( TAxisPos* rTar, 
		const TAxisPos* rMonsterPos, 
		const TAxisPos* rPlayerPos,
		sint8 maxDist,
		sint8 minDist,
		sint16* index);

	bool isEmpty(const TAxisPos* curPos, const TAxisPos* tarPos);
	bool isEmpty(sint16 index);

	void resetUsedDir( void );
	void setSitPos(sint16 index);
	sint16 getIndex(const TAxisPos* curPos, const TAxisPos* tarPos);

private:
	sint32 getCyclePosNum(sint8 index);
	sint32 getCyclePosNum(sint8 maxDist, sint8 minDist);
	bool smallCycle(
		TAxisPos* rTar,
		const TAxisPos* rMonsterPos, 
		const TAxisPos* rPlayerPos,
		sint8 maxDist,
		sint8 minDist,
		sint16* index);
	bool isSmallCycle(sint8 maxDist, sint8 minDist);
	bool insideCycle(
		TAxisPos* rTar,
		const TAxisPos* rMonsterPos, 
		const TAxisPos* rPlayerPos,
		sint8 maxDist,
		sint8 minDist,
		sint16* index);
	bool outsideCycle(
		TAxisPos* rTar,
		const TAxisPos* rMonsterPos, 
		const TAxisPos* rPlayerPos,
		sint8 maxDist,
		sint8 minDist,
		sint16* index);

private:
	uint8  _used[MAX_FRACTION+1];
};

#endif