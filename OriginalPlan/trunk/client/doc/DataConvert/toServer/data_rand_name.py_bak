#!/usr/bin/env python
# -*- coding: UTF-8 -*-
'''
随机名字配置
@author: ZhaoMing
@deprecated: 2013-11-20
'''
import os
# 导入要用到的函数
from libs.utils import load_excel, load_sheel, module_header, gen_erl, gen_xml, prev, get_value

 # 导入礼包数据配置.xlsx，文件统一放置在docs目录
work_book = load_excel(ur"rand_name")

# Erlang模块头说明，主要说明该文件作用，会自动添加-module(module_name).
# module_header函数隐藏了第三个参数，是指作者，因此也可以module_header(ur"礼包数据", module_name, "King")


# Erlang需要导出的函数接口, append与erlang的++也点类似，用于python的list操作
# Erlang函数一些注释，可以不写，但建议写出来

# 生成枚举的工具函数
def enum(module, str_enum):
    str_enum = str_enum.replace(" ", "")
    str_enum = str_enum.replace("\n", "")
    idx = 0  
    for name in str_enum.split(","):  
        if '=' in name:  
            name,val = name.rsplit('=', 1)            
            if val.isalnum():               
                idx = eval(val)  
        setattr(module, name.strip(), idx)  
        idx += 1

## 必须和excel里面的列保持一致的顺序
BaseColumn = """
    id
    ,name_1
    ,name_2
"""
 
class FieldClassBase:
    def __init__(self):
        enum(FieldClassBase, BaseColumn)

# 生成域枚举           
BaseField = FieldClassBase()

# 列表去重复
def unique_list(seq, excludes=[]):   
    seen = set(excludes)  # seen是曾经出现的元素集合   
    return [x for x in seq if x not in seen and not seen.add(x)]  

rand_name_erl = "data_rand_name"
data_rand_name = module_header(ur"随机名字配置", rand_name_erl, "zm", "rand_name.xlsx", "data_rand_name.py")
data_rand_name.append("""
-export([first_name/1, last_name/1, first_name_len/0, last_name_len/0]).
""")

name_1_list = []
name_2_list = []
@load_sheel(work_book, ur"Sheet1")
def get_name(content):
    id = int(content[BaseField.id])
    name_1 = str(get_value(content[BaseField.name_1], ''))
    name_2 = str(get_value(content[BaseField.name_2], ''))
    if name_1 != '':
        name_1_list.append("first_name({0}) -> <<\"{1}\">>;".format(id, name_1))
    if name_2 != '':
        name_2_list.append("last_name({0}) -> <<\"{1}\">>;".format(id, name_2))
    return []

get_name()
name_1_list.append("first_name(_) -> <<>>.")
name_2_list.append("last_name(_) -> <<>>.")

data_rand_name.append("first_name_len() -> {0}.".format(len(name_1_list) - 1))
data_rand_name.append("last_name_len() -> {0}.".format(len(name_2_list) - 1))

data_rand_name.append("%% @spec first_name(Rand :: int()) -> binary().")
data_rand_name.extend(name_1_list)
data_rand_name.append("%% @spec last_name(Rand :: int()) -> binary().")
data_rand_name.extend(name_2_list)

gen_erl(rand_name_erl, data_rand_name)
