definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "lua_${generator.prefix}_${class_name}_${func_name}"
  sfunction: "lua_${generator.prefix}_${class_name}_${func_name}"
  constructor: "lua_${generator.prefix}_${class_name}_constructor"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
    float: "double"
    "@std::vector<std::basic_string.*>.>.>": "std::vector<std::string>"
    "@std::vector<int.*>.>": "std::vector<int>"

  ns_map:
    "GXMISC::": ""
    "lua_tinker::": ""

  to_native:
    # lua to native
    bool: "ok &= luaval_to_boolean(tolua_S, ${arg_idx},(bool*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")" 
    char: "ok &= luaval_to_sint8(tolua_S, ${arg_idx},(sint8*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "unsigned char": "ok &= luaval_to_uint8(tolua_S, ${arg_idx},(uint8*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    short: "ok &= luaval_to_sint16(tolua_S, ${arg_idx},(sint16*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "unsigned short": "ok &= luaval_to_uint16(tolua_S, ${arg_idx}, (uint16*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    int: "ok &= luaval_to_sint32(tolua_S, ${arg_idx},(sint32*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "unsigned int": "ok &= luaval_to_uint32(tolua_S, ${arg_idx},(uint32*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "sint64": "ok &= luaval_to_sint64(tolua_S, ${arg_idx},(sint64*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "uint64": "ok &= luaval_to_uint64(tolua_S, ${arg_idx}, (uint64*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "long long": "ok &= luaval_to_sint64(tolua_S, ${arg_idx},(sint64*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "unsigned long long": "ok &= luaval_to_uint64(tolua_S, ${arg_idx}, (uint64*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    float: "ok &= luaval_to_number(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    double: "ok &= luaval_to_number(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "std::string": "ok &= luaval_to_std_string(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "CScriptString": "ok &= luaval_to_script_string(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "CGameTime": "ok &= luaval_to_uint32(tolua_S, ${arg_idx},(GXMISC::TGameTime_t*)&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "char*": "CScriptString ${out_value}_tmp; ok &= luaval_to_script_string(tolua_S, ${arg_idx}, &${out_value}_tmp, \"${lua_namespaced_class_name}:${func_name}\"); ${out_value} = (char*)${out_value}_tmp.buffer"
    "@CFixString<.*>": "ok &= luaval_to_fixstring(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@CCharArray<.*>": "ok &= luaval_to_array_string(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@CCharArray1<.*>": "ok &= luaval_to_array_string1(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@CCharArray2<.*>": "ok &= luaval_to_array_string2(tolua_S, ${arg_idx},&${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@CArray<.*>": "ok &= luaval_to_array(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@CArray1<.*>": "ok &= luaval_to_array1(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@CArray2<.*>": "ok &= luaval_to_array2(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@list<.*>": "ok &= luaval_to_list(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@vector<.*>": "ok &= luaval_to_vector(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@map<.*>": "ok &= luaval_to_map(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@std::list<.*>": "ok &= luaval_to_list(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@std::vector<.*>": "ok &= luaval_to_vector(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "@std::map<.*>": "ok &= luaval_to_map(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "AxisPos": "ok &= luaval_to_axispos(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    "s_object": "ok &= luaval_to_object<${arg.to_string($generator).replace(\"*\", \"\")}>(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"
    object: "ok &= luaval_to_object<${arg.to_string($generator).replace(\"*\", \"\")}>(tolua_S, ${arg_idx}, \"${scriptname}\", &${out_value}, \"${lua_namespaced_class_name}:${func_name}\")"

  from_native:
    # native to lua
    bool: "tolua_pushboolean(tolua_S,(bool)${in_value})"
    "signed char": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    char: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "unsigned char": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    short: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "unsigned short": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    int: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "unsigned int": "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "sint64": "lua_tinker::push(tolua_S,${in_value})"
    "uint64": "lua_tinker::push(tolua_S,${in_value})"
    "long long": "lua_tinker::push(tolua_S,(sint64)${in_value})"
    "unsigned long long": "lua_tinker::push(tolua_S,(uint64)${in_value})"
    "std::string": "tolua_pushcppstring(tolua_S,${in_value})"
    "CScriptString": "script_string_to_luaval(tolua_S,${in_value})"
    "char*": "tolua_pushstring(tolua_S,(const char*)${in_value})"
    float: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    double: "tolua_pushnumber(tolua_S,(lua_Number)${in_value})"
    "CGameTime": "tolua_pushnumber(tolua_S,(GXMISC::TGameTime_t)${in_value})"
    "AxisPos": "axispos_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@CFixString<.*>": "fixstring_to_luaval(tolua_S,${in_value})"
    "@CCharArray<.*>": "array_string_to_luaval(tolua_S,${in_value})"
    "@CCharArray1<.*>": "array_string1_to_luaval(tolua_S,${in_value})"
    "@CCharArray2<.*>": "array_string2_to_luaval(tolua_S,${in_value})"
    "@CArray<.*>": "array_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@CArray1<.*>": "array1_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@CArray2<.*>": "array2_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@vector<.*>": "vector_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@list<.*>": "list_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@map<.*>": "map_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@std::vector<.*>": "vector_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@std::list<.*>": "list_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "@std::map<.*>": "map_to_luaval(tolua_S, \"${scriptname}\", ${in_value})"
    "s_object": "lua_tinker::push(tolua_S,${in_value})"
    object: "object_to_luaval<${ntype.replace(\"*\", \"\").replace(\"const \", \"\")}>(tolua_S, \"${scriptname}\",(${ntype.replace(\"const \", \"\")})${in_value})"
