#include "sharelib_script_auto_gen_class_header.h"
bool sharelibAutoBindClass(CScriptEngineCommon::TScriptState* pState)
{
	/*
using namespace luabind;
module(pState)
[
class_<_AttrBackupBase>("_AttrBackupBase")


,
class_<_RoleAttrBackup, _AttrBackupBase>("_RoleAttrBackup")

.def("getLevel", &_RoleAttrBackup::getLevel)
.def("setLevel", &_RoleAttrBackup::setLevel)
.def("getExp", &_RoleAttrBackup::getExp)
.def("setExp", &_RoleAttrBackup::setExp)
.def("getMoveSpeed", &_RoleAttrBackup::getMoveSpeed)
.def("setMoveSpeed", &_RoleAttrBackup::setMoveSpeed)
.def("getGameMoney", &_RoleAttrBackup::getGameMoney)
.def("setGameMoney", &_RoleAttrBackup::setGameMoney)
.def("getPotential", &_RoleAttrBackup::getPotential)
.def("setPotential", &_RoleAttrBackup::setPotential)
.def("getStrength", &_RoleAttrBackup::getStrength)
.def("setStrength", &_RoleAttrBackup::setStrength)
.def("getMaxStrength", &_RoleAttrBackup::getMaxStrength)
.def("setMaxStrength", &_RoleAttrBackup::setMaxStrength)
.def("getRmb", &_RoleAttrBackup::getRmb)
.def("setRmb", &_RoleAttrBackup::setRmb)
.def("getCallUpPoint", &_RoleAttrBackup::getCallUpPoint)
.def("setCallUpPoint", &_RoleAttrBackup::setCallUpPoint)
.def("getVipLevel", &_RoleAttrBackup::getVipLevel)
.def("setVipLevel", &_RoleAttrBackup::setVipLevel)
.def("getVipExp", &_RoleAttrBackup::getVipExp)
.def("setVipExp", &_RoleAttrBackup::setVipExp)
.def("getPowerMedicine", &_RoleAttrBackup::getPowerMedicine)
.def("setPowerMedicine", &_RoleAttrBackup::setPowerMedicine)
.def("getTrainPoint", &_RoleAttrBackup::getTrainPoint)
.def("setTrainPoint", &_RoleAttrBackup::setTrainPoint)
.def("getChallengeNum", &_RoleAttrBackup::getChallengeNum)
.def("setChallengeNum", &_RoleAttrBackup::setChallengeNum)
.def("getRankNum", &_RoleAttrBackup::getRankNum)
.def("setRankNum", &_RoleAttrBackup::setRankNum)
.def("getBaseCampHp", &_RoleAttrBackup::getBaseCampHp)
.def("setBaseCampHp", &_RoleAttrBackup::setBaseCampHp)
.def("getDander", &_RoleAttrBackup::getDander)
.def("setDander", &_RoleAttrBackup::setDander)
.def("getSoldierSetNum", &_RoleAttrBackup::getSoldierSetNum)
.def("setSoldierSetNum", &_RoleAttrBackup::setSoldierSetNum)
.def("getXingXiangId", &_RoleAttrBackup::getXingXiangId)
.def("setXingXiangId", &_RoleAttrBackup::setXingXiangId)
.def("getElfLv", &_RoleAttrBackup::getElfLv)
.def("setElfLv", &_RoleAttrBackup::setElfLv)
.def("getElfPower", &_RoleAttrBackup::getElfPower)
.def("setElfPower", &_RoleAttrBackup::setElfPower)
.def("setMaxExp", &_RoleAttrBackup::setMaxExp)

,
class_<CGameDatabaseHandler>("CGameDatabaseHandler")


,
class_<EServerType>("EServerType")
.enum_("EnumEServerType")
[
value("INVALID_SERVER_TYPE", INVALID_SERVER_TYPE),
value("SERVER_TYPE_WORLD", SERVER_TYPE_WORLD),
value("SERVER_TYPE_MAP_NORMAL", SERVER_TYPE_MAP_NORMAL),
value("SERVER_TYPE_MAP_DYNAMIC", SERVER_TYPE_MAP_DYNAMIC),
value("SERVER_TYPE_MANAGER", SERVER_TYPE_MANAGER),
value("SERVER_TYPE_RECORD", SERVER_TYPE_RECORD),
value("SERVER_TYPE_RESOURCE", SERVER_TYPE_RESOURCE),
value("SERVER_TYPE_CHARGE", SERVER_TYPE_CHARGE),
value("SERVER_TYPE_LOGIN", SERVER_TYPE_LOGIN),
value("SERVER_TYPE_NUM", SERVER_TYPE_NUM)
]
,
class_<ETeleportType>("ETeleportType")
.enum_("EnumETeleportType")
[
value("TELEPORT_TYPE_INVALID", TELEPORT_TYPE_INVALID),
value("TELEPORT_TYPE_TRANSMIT", TELEPORT_TYPE_TRANSMIT),
value("TELEPORT_TYPE_SYS", TELEPORT_TYPE_SYS)
]
,
class_<EAdultFlag>("EAdultFlag")
.enum_("EnumEAdultFlag")
[
value("ADULT_FLAG_NONE", ADULT_FLAG_NONE),
value("ADULT_FLAG_ADULT", ADULT_FLAG_ADULT),
value("ADULT_FLAG_NO_ADULT", ADULT_FLAG_NO_ADULT)
]
,
class_<EJobType>("EJobType")
.enum_("EnumEJobType")
[
value("INVALID_JOB_TYPE", INVALID_JOB_TYPE),
value("JOB_TYPE_PHYSIC", JOB_TYPE_PHYSIC),
value("JOB_TYPE_MAGIC", JOB_TYPE_MAGIC),
value("JOB_TYPE_MONSTER", JOB_TYPE_MONSTER),
value("JOB_TYPE_PET", JOB_TYPE_PET),
value("JOB_TYPE_NPC", JOB_TYPE_NPC)
]
,
class_<ESexType>("ESexType")
.enum_("EnumESexType")
[
value("INVALID_SEX_TYPE", INVALID_SEX_TYPE),
value("SEX_TYPE_MALE", SEX_TYPE_MALE),
value("SEX_TYPE_FEMALE", SEX_TYPE_FEMALE)
]
,
class_<EKickType>("EKickType")
.enum_("EnumEKickType")
[
value("KICK_TYPE_ERR", KICK_TYPE_ERR),
value("KICK_TYPE_BY_OTHER", KICK_TYPE_BY_OTHER),
value("KICK_TYPE_BY_GM", KICK_TYPE_BY_GM),
value("KICK_TYPE_GAME_STOP", KICK_TYPE_GAME_STOP)
]
,
class_<EChatChannel>("EChatChannel")
.enum_("EnumEChatChannel")
[
value("CHANNEL_INVALID", CHANNEL_INVALID),
value("CHAT_CHANNEL_WORLD", CHAT_CHANNEL_WORLD),
value("CHAT_CHANNEL_FACTION", CHAT_CHANNEL_FACTION),
value("CHAT_CHANNEL_PRIVATE", CHAT_CHANNEL_PRIVATE),
value("CHAT_CHANNEL_SYSTEM", CHAT_CHANNEL_SYSTEM),
value("CHAT_CHANNEL_GM", CHAT_CHANNEL_GM),
value("CHAT_CHANNEL_NUMBER", CHAT_CHANNEL_NUMBER)
]
,
class_<EObjType>("EObjType")
.enum_("EnumEObjType")
[
value("INVALID_OBJ_TYPE", INVALID_OBJ_TYPE),
value("OBJ_TYPE_ROLE", OBJ_TYPE_ROLE),
value("OBJ_TYPE_NPC", OBJ_TYPE_NPC),
value("OBJ_TYPE_MONSTER", OBJ_TYPE_MONSTER),
value("OBJ_TYPE_PET", OBJ_TYPE_PET),
value("OBJ_TYPE_ITEM", OBJ_TYPE_ITEM),
value("OBJ_TYPE_HORSE", OBJ_TYPE_HORSE)
]
,
class_<EAttributes>("EAttributes")
.enum_("EnumEAttributes")
[
value("ATTR_FIGHT_INVALID", ATTR_FIGHT_INVALID),
value("ATTR_MAX_HP", ATTR_MAX_HP),
value("ATTR_ATTACK", ATTR_ATTACK),
value("ATTR_DEFENSE", ATTR_DEFENSE),
value("ATTR_MAGIC", ATTR_MAGIC),
value("ATTR_CRIT_RATE", ATTR_CRIT_RATE),
value("ATTR_COMENERGY_SPEED", ATTR_COMENERGY_SPEED),
value("ATTR_ATTACK_RANGE", ATTR_ATTACK_RANGE),
value("ATTR_ATTACK_SPEED", ATTR_ATTACK_SPEED),
value("ATTR_BASE_CAMP_HP", ATTR_BASE_CAMP_HP),
value("ATTR_MAX_STRENGTH", ATTR_MAX_STRENGTH),
value("ATTR_CURR_STRENGTH", ATTR_CURR_STRENGTH),
value("ATTR_DANDER_RECOVERY", ATTR_DANDER_RECOVERY),
value("ATTR_DANDER_INITIAL", ATTR_DANDER_INITIAL),
value("ATTR_EXP", ATTR_EXP),
value("ATTR_MONEY", ATTR_MONEY),
value("ATTR_CUR_HP", ATTR_CUR_HP),
value("ATTR_RESTRAIN", ATTR_RESTRAIN),
value("ATTR_ATTACKRANGE", ATTR_ATTACKRANGE),
value("ATTR_RMB", ATTR_RMB),
value("ATTR_BASTION_HP", ATTR_BASTION_HP),
value("ATTR_CRIT", ATTR_CRIT),
value("ATTR_CALLUP_POINT", ATTR_CALLUP_POINT),
value("ATTR_COMMAND_ENEGRY", ATTR_COMMAND_ENEGRY),
value("ATTR_BASTION_DEFENSE", ATTR_BASTION_DEFENSE),
value("ATTR_LEADERSHIP", ATTR_LEADERSHIP),
value("ATTR_TRAIN_POINT", ATTR_TRAIN_POINT),
value("ATTR_CHALLENGENUM", ATTR_CHALLENGENUM),
value("ATTR_XING_XIANG_ID", ATTR_XING_XIANG_ID),
value("ATTR_ELF_LV", ATTR_ELF_LV),
value("ATTR_ELF_POWER", ATTR_ELF_POWER),
value("ATTR_CHAR_CURR_MAX", ATTR_CHAR_CURR_MAX),
value("ATTR_LEVEL", ATTR_LEVEL),
value("ATTR_MOVE_SPEED", ATTR_MOVE_SPEED),
value("ATTR_POTENTIAL", ATTR_POTENTIAL),
value("ATTR_VIP_LEVEL", ATTR_VIP_LEVEL),
value("ATTR_VIP_EXP", ATTR_VIP_EXP),
value("ATTR_CHALLENGE_NUM", ATTR_CHALLENGE_NUM),
value("ATTR_POWER_MEDICINE", ATTR_POWER_MEDICINE),
value("ATTR_RANK_NUM", ATTR_RANK_NUM),
value("ATTR_MAX_EXP", ATTR_MAX_EXP),
value("ATTR_PHYSIC_ATTACK", ATTR_PHYSIC_ATTACK),
value("ATTR_PHYSIC_DEFENSE", ATTR_PHYSIC_DEFENSE),
value("ATTR_MAX_CARRY_SOLDIER", ATTR_MAX_CARRY_SOLDIER),
value("ATTR_MAGIC_ATTACK", ATTR_MAGIC_ATTACK),
value("ATTR_MAGIC_DEFENSE", ATTR_MAGIC_DEFENSE),
value("ATTR_HP", ATTR_HP)
]
,
class_<EBuffExistType>("EBuffExistType")
.enum_("EnumEBuffExistType")
[
value("BUFF_EXIST_TYPE_INVALID", BUFF_EXIST_TYPE_INVALID),
value("BUFF_EXIST_TYPE_EXIST", BUFF_EXIST_TYPE_EXIST),
value("BUFF_EXIST_TYPE_REPLACE", BUFF_EXIST_TYPE_REPLACE),
value("BUFF_EXIST_TYPE_OVERLIING", BUFF_EXIST_TYPE_OVERLIING),
value("BUFF_EXIST_TYPE_IGNORE", BUFF_EXIST_TYPE_IGNORE)
]
,
class_<EBuffLastType>("EBuffLastType")
.enum_("EnumEBuffLastType")
[
value("BUFF_LAST_TYPE_INVALID", BUFF_LAST_TYPE_INVALID),
value("BUFF_LAST_TYPE_ABSOLUTE", BUFF_LAST_TYPE_ABSOLUTE),
value("BUFF_LAST_TYPE_OPPOSITE", BUFF_LAST_TYPE_OPPOSITE),
value("BUFF_LAST_TYPE_PERMANENT", BUFF_LAST_TYPE_PERMANENT),
value("BUFF_LAST_TYPE_COUNT", BUFF_LAST_TYPE_COUNT)
]
,
class_<EAttackImpactType>("EAttackImpactType")
.enum_("EnumEAttackImpactType")
[
value("INVALID_ATTACK_IMPACT_TYPE", INVALID_ATTACK_IMPACT_TYPE),
value("ATTACK_IMPACT_TYPE_NORMAL", ATTACK_IMPACT_TYPE_NORMAL),
value("ATTACK_IMPACT_TYPE_CRIT", ATTACK_IMPACT_TYPE_CRIT),
value("ATTACK_IMPACT_TYPE_DODGE", ATTACK_IMPACT_TYPE_DODGE),
value("ATTACK_IMPACT_TYPE_HIT_DOUBLE", ATTACK_IMPACT_TYPE_HIT_DOUBLE),
value("ATTACK_IMPACT_TYPE_CONFUSION", ATTACK_IMPACT_TYPE_CONFUSION),
value("ATTACK_IMPACT_TYPE_RAND_ATTACK_ROLE", ATTACK_IMPACT_TYPE_RAND_ATTACK_ROLE)
]
,
class_<EMissionEvent>("EMissionEvent")
.enum_("EnumEMissionEvent")
[
value("MISSION_EVENT_INVALID", MISSION_EVENT_INVALID),
value("MISSION_EVENT_DIALOG", MISSION_EVENT_DIALOG),
value("MISSION_EVENT_GUANQIA", MISSION_EVENT_GUANQIA),
value("MISSION_EVENT_KILL_MONSTER", MISSION_EVENT_KILL_MONSTER),
value("MISSION_EVENT_COLLECT_ITEM", MISSION_EVENT_COLLECT_ITEM)
]
,
class_<EMissionStatus>("EMissionStatus")
.enum_("EnumEMissionStatus")
[
value("MISSION_STATUS_INVALID", MISSION_STATUS_INVALID),
value("MISSION_STATUS_ACCEPTING", MISSION_STATUS_ACCEPTING),
value("MISSION_STATUS_ACCEPTED", MISSION_STATUS_ACCEPTED),
value("MISSION_STATUS_EXECUTED", MISSION_STATUS_EXECUTED),
value("MISSION_STATUS_FINISHED", MISSION_STATUS_FINISHED)
]
,
class_<EMissionOperation>("EMissionOperation")
.enum_("EnumEMissionOperation")
[
value("MISSION_OPERATION_INVALID", MISSION_OPERATION_INVALID),
value("MISSION_OPERATION_ACCEPT", MISSION_OPERATION_ACCEPT),
value("MISSION_OPERATION_SUBMIT", MISSION_OPERATION_SUBMIT)
]
,
class_<EMissionType>("EMissionType")
.enum_("EnumEMissionType")
[
value("MISSION_TYPE_INVALID", MISSION_TYPE_INVALID),
value("MISSION_TYPE_MAJOR", MISSION_TYPE_MAJOR),
value("MISSION_TYPE_CURR_MAX", MISSION_TYPE_CURR_MAX)
]
,
class_<ERoleLimitType>("ERoleLimitType")
.enum_("EnumERoleLimitType")
[
value("ROLE_LIMIT_INVALID", ROLE_LIMIT_INVALID),
value("ROLE_LIMIT_LOGIN", ROLE_LIMIT_LOGIN),
value("ROLE_LIMIT_CHAT", ROLE_LIMIT_CHAT),
value("ROLE_LIMIT_DEL_LOGIN", ROLE_LIMIT_DEL_LOGIN),
value("ROLE_LIMIT_DEL_CHAT", ROLE_LIMIT_DEL_CHAT)
]
,
class_<ERoleOptLimitType>("ERoleOptLimitType")
.enum_("EnumERoleOptLimitType")
[
value("ROLE_LIMIT_OPT_INVALID", ROLE_LIMIT_OPT_INVALID),
value("ROLE_LIMIT_OPT_UPDATE_LOGIN", ROLE_LIMIT_OPT_UPDATE_LOGIN),
value("ROLE_LIMIT_OPT_UPDATE_CHAT", ROLE_LIMIT_OPT_UPDATE_CHAT),
value("ROLE_LIMIT_OPT_DEL", ROLE_LIMIT_OPT_DEL)
]
,
class_<EObjState>("EObjState")
.enum_("EnumEObjState")
[
value("OBJ_STATE_TEAM", OBJ_STATE_TEAM),
value("OBJ_STATE_LEADER", OBJ_STATE_LEADER),
value("OBJ_STATE_TREASURE", OBJ_STATE_TREASURE),
value("OBJ_STATE_TRAVEL_ROUND", OBJ_STATE_TRAVEL_ROUND),
value("OBJ_STATE_ESCORT", OBJ_STATE_ESCORT)
]
,
class_<EmployType>("EmployType")
.enum_("EnumEmployType")
[
value("DEFAULT_STATE", DEFAULT_STATE),
value("CANRECRUIT_STATE", CANRECRUIT_STATE),
value("THENRECRUIT_STATE", THENRECRUIT_STATE),
value("THENRECRUIT_STATE_BACK", THENRECRUIT_STATE_BACK)
]
,
class_<TreasurehuntType>("TreasurehuntType")
.enum_("EnumTreasurehuntType")
[
value("INVALIDTREASURE_TYPE", INVALIDTREASURE_TYPE),
value("GOLD_TYPE", GOLD_TYPE),
value("HIGHLVL_TYPE", HIGHLVL_TYPE),
value("FREE_TYPE", FREE_TYPE),
value("RIDER_TYPE", RIDER_TYPE),
value("NATIONAL_TYPE", NATIONAL_TYPE),
value("NATIONALTEN_TYPE", NATIONALTEN_TYPE)
]
,
class_<EGuanQiaProperty>("EGuanQiaProperty")
.enum_("EnumEGuanQiaProperty")
[
value("GUAN_QIA_TYPE_INVALID_GUAN_QIA", GUAN_QIA_TYPE_INVALID_GUAN_QIA),
value("GUAN_QIA_TYPE_NORMAL", GUAN_QIA_TYPE_NORMAL),
value("GUAN_QIA_TYPE_ELITE", GUAN_QIA_TYPE_ELITE),
value("GUAN_QIA_TYPE_ACTIVE", GUAN_QIA_TYPE_ACTIVE)
]
,
class_<EGuanQiaAwardProperty>("EGuanQiaAwardProperty")
.enum_("EnumEGuanQiaAwardProperty")
[
value("GUAN_QIA_INVALID_AWARD", GUAN_QIA_INVALID_AWARD),
value("GUAN_QIA_NOT_HAVE_AWARD", GUAN_QIA_NOT_HAVE_AWARD),
value("GUAN_QIA_HAVE_AWARD", GUAN_QIA_HAVE_AWARD),
value("GUAN_QIA_HAS_AWARD", GUAN_QIA_HAS_AWARD)
]
,
class_<EGuanQiaFreshProperty>("EGuanQiaFreshProperty")
.enum_("EnumEGuanQiaFreshProperty")
[
value("GUAN_QIA_TYPE_INVALID_FRESH", GUAN_QIA_TYPE_INVALID_FRESH),
value("GUAN_QIA_TYPE_DAY", GUAN_QIA_TYPE_DAY),
value("GUAN_QIA_TYPE_WEEK", GUAN_QIA_TYPE_WEEK),
value("GUAN_QIA_TYPE_MONTH", GUAN_QIA_TYPE_MONTH)
]
,
class_<EGuanQiaGuaJiProperty>("EGuanQiaGuaJiProperty")
.enum_("EnumEGuanQiaGuaJiProperty")
[
value("GUAN_QIA_TYPE_GUAJI_INVALID", GUAN_QIA_TYPE_GUAJI_INVALID),
value("GUAN_QIA_TYPE_GUAJI_1", GUAN_QIA_TYPE_GUAJI_1),
value("GUAN_QIA_TYPE_GUAJI_3", GUAN_QIA_TYPE_GUAJI_3),
value("GUAN_QIA_TYPE_GUAJI_5", GUAN_QIA_TYPE_GUAJI_5)
]
,
class_<EGuanQiaDayFreshType>("EGuanQiaDayFreshType")
.enum_("EnumEGuanQiaDayFreshType")
[
value("GUAN_QIA_DAY_FRESH_TYPE_INVALID", GUAN_QIA_DAY_FRESH_TYPE_INVALID),
value("GUAN_QIA_DAY_FRESH_TYPE_NO_LIMIT", GUAN_QIA_DAY_FRESH_TYPE_NO_LIMIT),
value("GUAN_QIA_DAY_FRESH_TYPE_HAVE_LIMIT", GUAN_QIA_DAY_FRESH_TYPE_HAVE_LIMIT)
]
,
class_<EZoneServerState>("EZoneServerState")
.enum_("EnumEZoneServerState")
[
value("ZONE_SERVER_STATE_INVALID", ZONE_SERVER_STATE_INVALID),
value("ZONE_SERVER_STATE_NORMAL", ZONE_SERVER_STATE_NORMAL),
value("ZONE_SERVER_STATE_BUSY", ZONE_SERVER_STATE_BUSY),
value("ZONE_SERVER_STATE_CLOSE", ZONE_SERVER_STATE_CLOSE)
]
,
class_<EZoneServerFlag>("EZoneServerFlag")
.enum_("EnumEZoneServerFlag")
[
value("ZONE_SERVER_FLAG_INVALID", ZONE_SERVER_FLAG_INVALID),
value("ZONE_SERVER_FLAG_RECOMMEND", ZONE_SERVER_FLAG_RECOMMEND),
value("ZONE_SERVER_FLAG_NEW", ZONE_SERVER_FLAG_NEW)
]
,
class_<ESoldierType>("ESoldierType")
.enum_("EnumESoldierType")
[
value("SOLIDER_TYPE_INVALID", SOLIDER_TYPE_INVALID),
value("SOLIDER_TYPE_CAVALRY", SOLIDER_TYPE_CAVALRY),
value("SOLIDER_TYPE_INFANTRY", SOLIDER_TYPE_INFANTRY),
value("SOLIDER_TYPE_ARCHER", SOLIDER_TYPE_ARCHER)
]
,
class_<EFormationSoldierType>("EFormationSoldierType")
.enum_("EnumEFormationSoldierType")
[
value("FORMATION_TYPE_INVALID", FORMATION_TYPE_INVALID),
value("FORMATION_TYPE_CAVALRY", FORMATION_TYPE_CAVALRY),
value("FORMATION_TYPE_INFANTRY", FORMATION_TYPE_INFANTRY),
value("FORMATION_TYPE_ARCHER", FORMATION_TYPE_ARCHER)
]
,
class_<ECommanderType>("ECommanderType")
.enum_("EnumECommanderType")
[
value("COMMANDER_TYPE_INVALID", COMMANDER_TYPE_INVALID),
value("COMMANDER_TYPE_ATTACK", COMMANDER_TYPE_ATTACK),
value("COMMANDER_TYPE_DEFENSE", COMMANDER_TYPE_DEFENSE),
value("COMMANDER_TYPE_ASSIST", COMMANDER_TYPE_ASSIST)
]
,
class_<EGameObject>("EGameObject")
.enum_("EnumEGameObject")
[
value("OBJ_INVALID", OBJ_INVALID),
value("OBJ_ALL", OBJ_ALL),
value("OBJ_ROLE", OBJ_ROLE),
value("OBJ_HERO", OBJ_HERO),
value("OBJ_CAVALRY", OBJ_CAVALRY),
value("OBJ_INFANTRY", OBJ_INFANTRY),
value("OBJ_ARCHER", OBJ_ARCHER)
]
,
class_<ESkillState>("ESkillState")
.enum_("EnumESkillState")
[
value("INVALID_SKILLSTATE", INVALID_SKILLSTATE),
value("SKILL_UNLOCKSTATE", SKILL_UNLOCKSTATE),
value("SKILL_LOCKSTATE", SKILL_LOCKSTATE),
value("SKILL_ONUSESTATE", SKILL_ONUSESTATE),
value("ROLE_SKILL", ROLE_SKILL),
value("COMMANDER_SKILL", COMMANDER_SKILL)
]
,
class_<ESoldierScience>("ESoldierScience")
.enum_("EnumESoldierScience")
[
value("SOLDIER_SCIENCE_ADD_INVALID_TYPE", SOLDIER_SCIENCE_ADD_INVALID_TYPE),
value("SOLDIER_SCIENCE_ADD_TYPE_NUMBER", SOLDIER_SCIENCE_ADD_TYPE_NUMBER),
value("SOLDIER_SCIENCE_ADD_TYPE_PERCENTAGE", SOLDIER_SCIENCE_ADD_TYPE_PERCENTAGE)
]
,
class_<ESoldierNewLevel>("ESoldierNewLevel")
.enum_("EnumESoldierNewLevel")
[
value("SOLDIER_NEW_INVALID_LEVEL", SOLDIER_NEW_INVALID_LEVEL),
value("SOLDIER_NEW_LEVEL_1", SOLDIER_NEW_LEVEL_1),
value("SOLDIER_NEW_LEVEL_2", SOLDIER_NEW_LEVEL_2),
value("SOLDIER_NEW_LEVEL_3", SOLDIER_NEW_LEVEL_3),
value("SOLDIER_NEW_LEVEL_4", SOLDIER_NEW_LEVEL_4)
]
,
class_<ECommanderForster>("ECommanderForster")
.enum_("EnumECommanderForster")
[
value("COMMANDER_FORSTER_INVALID_TYPE", COMMANDER_FORSTER_INVALID_TYPE),
value("COMMANDER_FORSTER_BASE_FORSTER", COMMANDER_FORSTER_BASE_FORSTER),
value("COMMANDER_FORSTER_SPECIAL_FORSTER", COMMANDER_FORSTER_SPECIAL_FORSTER)
]
,
class_<EFightType>("EFightType")
.enum_("EnumEFightType")
[
value("FIGHT_TYPE_INVALID", FIGHT_TYPE_INVALID),
value("FIGHT_TYPE_CHALLENGE_OTHER", FIGHT_TYPE_CHALLENGE_OTHER),
value("FIGHT_TYPE_GUAN_QIA", FIGHT_TYPE_GUAN_QIA),
value("FIGHT_TYPE_ENDLESS_GUAN_QIA", FIGHT_TYPE_ENDLESS_GUAN_QIA)
]
,
class_<EFormationObject>("EFormationObject")
.enum_("EnumEFormationObject")
[
value("FORMATION_OBJECT_TYPE_INVALID", FORMATION_OBJECT_TYPE_INVALID),
value("FORMATION_OBJECT_TYPE_SOLDIER", FORMATION_OBJECT_TYPE_SOLDIER),
value("FORMATION_OBJECT_TYPE_HERO", FORMATION_OBJECT_TYPE_HERO)
]
,
class_<ERace>("ERace")
.enum_("EnumERace")
[
value("RACE_INVALID", RACE_INVALID),
value("RACE_HUMAN", RACE_HUMAN),
value("RACE_EVIL", RACE_EVIL)
]
,
class_<EScienceSoldierAttr>("EScienceSoldierAttr")
.enum_("EnumEScienceSoldierAttr")
[
value("SCIENCE_SOLDIER_INVALID_ATTR_TYPE", SCIENCE_SOLDIER_INVALID_ATTR_TYPE),
value("SCIENCE_SOLDIER_TYPE_ATTACK", SCIENCE_SOLDIER_TYPE_ATTACK),
value("SCIENCE_SOLDIER_TYPE_DEFENSE", SCIENCE_SOLDIER_TYPE_DEFENSE),
value("SCIENCE_SOLDIER_TYPE_HP", SCIENCE_SOLDIER_TYPE_HP),
value("SCIENCE_SOLDIER_TYPE_RESTRAIN", SCIENCE_SOLDIER_TYPE_RESTRAIN)
]
,
class_<EStoreInfoType>("EStoreInfoType")
.enum_("EnumEStoreInfoType")
[
value("STORE_ALLTYPE", STORE_ALLTYPE),
value("STORE_WASTETYPE", STORE_WASTETYPE),
value("STORE_INTENSIFYTYPE", STORE_INTENSIFYTYPE),
value("NODISCOUNT", NODISCOUNT),
value("DISCOUNT", DISCOUNT),
value("NOLIMESNUM", NOLIMESNUM),
value("LIMESNUM", LIMESNUM),
value("NOLIMESTIME", NOLIMESTIME),
value("LIMESTIME", LIMESTIME),
value("NOSELLFAST", NOSELLFAST),
value("SELLFAST", SELLFAST),
value("NOPERSONLIMESNUM", NOPERSONLIMESNUM),
value("PERSONLIMESNUM", PERSONLIMESNUM),
value("NOVIPGIFT", NOVIPGIFT),
value("VIPGIFT", VIPGIFT),
value("GAMESTRAT_TYPE", GAMESTRAT_TYPE),
value("PERIOD_TYPE", PERIOD_TYPE),
value("INVAL_TYPE", INVAL_TYPE),
value("SELL_STATE", SELL_STATE),
value("NOTSELL_STATE", NOTSELL_STATE),
value("GOOG_SPECIAL", GOOG_SPECIAL),
value("GOOG_NORMAL", GOOG_NORMAL),
value("GOOG_INVALID", GOOG_INVALID)
]
,
class_<EStoreType>("EStoreType")
.enum_("EnumEStoreType")
[
value("STORE_INAVLSATE", STORE_INAVLSATE),
value("STORE_LIMITTIME", STORE_LIMITTIME),
value("STORE_LIMITNUM", STORE_LIMITNUM),
value("STORE_DISCOUNT", STORE_DISCOUNT),
value("STORE_SELLFAST", STORE_SELLFAST),
value("STORE_LIMITNUM_PSONL", STORE_LIMITNUM_PSONL),
value("STORE_OTHER", STORE_OTHER)
]
,
class_<EGoodRecodeType>("EGoodRecodeType")
.enum_("EnumEGoodRecodeType")
[
value("IS_RECODE", IS_RECODE),
value("NOT_RECODE", NOT_RECODE)
]
,
class_<EPetFosterCritType>("EPetFosterCritType")
.enum_("EnumEPetFosterCritType")
[
value("PET_INVALID_CRIT_TYPE", PET_INVALID_CRIT_TYPE),
value("PET_CRIT_0_TYPE", PET_CRIT_0_TYPE),
value("PET_CRIT_1_TYPE", PET_CRIT_1_TYPE),
value("PET_CRIT_2_TYPE", PET_CRIT_2_TYPE),
value("PET_CRIT_3_TYPE", PET_CRIT_3_TYPE)
]
,
class_<ECourseReceiveState>("ECourseReceiveState")
.enum_("EnumECourseReceiveState")
[
value("COURSE_INVALID_STATE", COURSE_INVALID_STATE),
value("COURSE_CAN_NOT_RECEIVE", COURSE_CAN_NOT_RECEIVE),
value("COURSE_CAN_RECEIVE", COURSE_CAN_RECEIVE),
value("COURSE_HAVE_RECEIVE", COURSE_HAVE_RECEIVE)
]
,
class_<ECourseShowState>("ECourseShowState")
.enum_("EnumECourseShowState")
[
value("COURSE_INVALID_SHOW", COURSE_INVALID_SHOW),
value("COURSE_CAN_NOT_SHOW", COURSE_CAN_NOT_SHOW),
value("COURSE_CAN_SHOW", COURSE_CAN_SHOW)
]
,
class_<ECourseUpdateType>("ECourseUpdateType")
.enum_("EnumECourseUpdateType")
[
value("COURSE_INVALID_UPDATE_TYPE", COURSE_INVALID_UPDATE_TYPE),
value("COURSE_UPDATE_NO", COURSE_UPDATE_NO),
value("COURSE_UPDATE_DAY", COURSE_UPDATE_DAY),
value("COURSE_UPDATE_CYCLE", COURSE_UPDATE_CYCLE)
]
,
class_<ECourseDiffPosFlag>("ECourseDiffPosFlag")
.enum_("EnumECourseDiffPosFlag")
[
value("COURSE_INVALID_FLAG", COURSE_INVALID_FLAG),
value("COURSE_LOGIN_FLAG", COURSE_LOGIN_FLAG),
value("COURSE_RECHARGE_FLAG", COURSE_RECHARGE_FLAG),
value("COURSE_ROLE_UPGRADE_FLAG", COURSE_ROLE_UPGRADE_FLAG),
value("COURSE_EMIGRATED_FLAG", COURSE_EMIGRATED_FLAG),
value("COURSE_FOSTER_FLAG", COURSE_FOSTER_FLAG),
value("COURSE_SACRIFICE_FLAG", COURSE_SACRIFICE_FLAG),
value("COURSE_TREASURE_FLAG", COURSE_TREASURE_FLAG),
value("COURSE_ATHLETICS_FLAG", COURSE_ATHLETICS_FLAG),
value("COURSE_UPDATE_FLAG", COURSE_UPDATE_FLAG),
value("COURSE_EQUIPMENT_LEVEL_FLAG", COURSE_EQUIPMENT_LEVEL_FLAG),
value("COURSE_BAG_GZ_NUM_FLAG", COURSE_BAG_GZ_NUM_FLAG),
value("COURSE_SOLDIER_NUM_FLAG", COURSE_SOLDIER_NUM_FLAG),
value("COURSE_EMIGRATED_ACTIVE_FLAG", COURSE_EMIGRATED_ACTIVE_FLAG),
value("COURSE_ACTIVE_SUC_NUM_FLAG", COURSE_ACTIVE_SUC_NUM_FLAG),
value("COURSE_JIN_LIN_BAO_ZANG_NUM_FLAG", COURSE_JIN_LIN_BAO_ZANG_NUM_FLAG),
value("COURSE_ENDLESS_NUM_FLAG", COURSE_ENDLESS_NUM_FLAG)
]
,
class_<ECourseActionType>("ECourseActionType")
.enum_("EnumECourseActionType")
[
value("COURSE_INVALID_TYPE", COURSE_INVALID_TYPE),
value("COURSE_RECHARGE", COURSE_RECHARGE),
value("COURSE_CONTINUE_LOGIN", COURSE_CONTINUE_LOGIN),
value("COURSE_TOTAL_LOGIN", COURSE_TOTAL_LOGIN),
value("COURSE_REACH_LEVEL", COURSE_REACH_LEVEL),
value("COURSE_EMIGRATED_SUC", COURSE_EMIGRATED_SUC),
value("COURSE_FOSTER_LEVEL", COURSE_FOSTER_LEVEL),
value("COURSE_SACRIFICE_NUM", COURSE_SACRIFICE_NUM),
value("COURSE_TREASURE_NUM", COURSE_TREASURE_NUM),
value("COURSE_ATHLETICS_NUM", COURSE_ATHLETICS_NUM),
value("COURSE_EQUIPMENT_LEVEL", COURSE_EQUIPMENT_LEVEL),
value("COURSE_BAG_GZ_NUM", COURSE_BAG_GZ_NUM),
value("COURSE_SOLDIER_LEVEL", COURSE_SOLDIER_LEVEL),
value("COURSE_EMIGRATED_ACTIVE", COURSE_EMIGRATED_ACTIVE),
value("COURSE_ACTIVE_SUC_NUM", COURSE_ACTIVE_SUC_NUM),
value("COURSE_JIN_LIN_BAO_ZANG_NUM", COURSE_JIN_LIN_BAO_ZANG_NUM),
value("COURSE_ENDLESS_NUM", COURSE_ENDLESS_NUM)
]
,
class_<ECourseStatisticType>("ECourseStatisticType")
.enum_("EnumECourseStatisticType")
[
value("COURSE_INVALID_STATISTIC_TYPE", COURSE_INVALID_STATISTIC_TYPE),
value("COURSE_INHERIT_TYPE", COURSE_INHERIT_TYPE),
value("COURSE_NO_INHERIT_TYPE", COURSE_NO_INHERIT_TYPE),
value("COURSE_NO_STATISTIC_TYPE", COURSE_NO_STATISTIC_TYPE)
]
,
class_<ERankListType>("ERankListType")
.enum_("EnumERankListType")
[
value("RANK_LIST_TYPE_INVALID", RANK_LIST_TYPE_INVALID),
value("RANK_LIST_TYPE_RAND", RANK_LIST_TYPE_RAND),
value("RANK_LIST_TYPE_ALL", RANK_LIST_TYPE_ALL),
value("RANK_LIST_TYPE_MY", RANK_LIST_TYPE_MY),
value("RANK_LIST_TYPE_REFRESH", RANK_LIST_TYPE_REFRESH)
]
,
class_<EUsedTarget>("EUsedTarget")
.enum_("EnumEUsedTarget")
[
value("USED_TARGET_INVALID", USED_TARGET_INVALID),
value("USED_TARGET_TAG", USED_TARGET_TAG),
value("USED_TARGET_MY", USED_TARGET_MY),
value("USED_TARGET_HERO", USED_TARGET_HERO),
value("USED_TARGET_ALL_SOLDIER", USED_TARGET_ALL_SOLDIER),
value("USED_TARGET_PIKEMAN", USED_TARGET_PIKEMAN),
value("USED_TARGET_INFANTRY", USED_TARGET_INFANTRY),
value("USED_TARGET_ARCHER", USED_TARGET_ARCHER),
value("USED_TARGET_HERO_SOLDIER", USED_TARGET_HERO_SOLDIER),
value("USED_TARGET_BASE_CAMP", USED_TARGET_BASE_CAMP)
]
,
class_<EActiveRecord>("EActiveRecord")
.enum_("EnumEActiveRecord")
[
value("ACTIVE_INVALID_RECORD", ACTIVE_INVALID_RECORD),
value("ACTIVE_SAVE", ACTIVE_SAVE),
value("ACTIVE_DELETE", ACTIVE_DELETE),
value("ACTIVE_LIKE_DELETE", ACTIVE_LIKE_DELETE)
]
,
class_<EActiveJoin>("EActiveJoin")
.enum_("EnumEActiveJoin")
[
value("ACTIVE_JOIN_INVALId", ACTIVE_JOIN_INVALId),
value("ACTIVE_CAN_JOIN", ACTIVE_CAN_JOIN),
value("ACTIVE_CAN_NO_JOIN", ACTIVE_CAN_NO_JOIN),
value("ACTIVE_NO_CHANCE", ACTIVE_NO_CHANCE)
]
,
class_<EActiveType>("EActiveType")
.enum_("EnumEActiveType")
[
value("ACTIVE_TYPE_INVAlID", ACTIVE_TYPE_INVAlID),
value("ACTIVE_TYPE_XUN_BAO", ACTIVE_TYPE_XUN_BAO),
value("ACTIVE_TYPE_GUAN_QIA", ACTIVE_TYPE_GUAN_QIA),
value("ACTIVE_TYPE_TI_LI", ACTIVE_TYPE_TI_LI)
]
,
class_<EActiveWeek>("EActiveWeek")
.enum_("EnumEActiveWeek")
[
value("ACTIVE_WEEK_INVALID", ACTIVE_WEEK_INVALID),
value("ACTIVE_WEEK_1", ACTIVE_WEEK_1),
value("ACTIVE_WEEK_2", ACTIVE_WEEK_2),
value("ACTIVE_WEEK_3", ACTIVE_WEEK_3),
value("ACTIVE_WEEK_4", ACTIVE_WEEK_4),
value("ACTIVE_WEEK_5", ACTIVE_WEEK_5),
value("ACTIVE_WEEK_6", ACTIVE_WEEK_6),
value("ACTIVE_WEEK_7", ACTIVE_WEEK_7),
value("ACTIVE_WEEK_8", ACTIVE_WEEK_8)
]
,
class_<EOddAndWeightType>("EOddAndWeightType")
.enum_("EnumEOddAndWeightType")
[
value("ODDANDWEIGHTTYPE_INVALID", ODDANDWEIGHTTYPE_INVALID),
value("DROPODD_TYPE", DROPODD_TYPE),
value("DROPWEIGHT_TYPE", DROPWEIGHT_TYPE)
]
,
class_<EElfState>("EElfState")
.enum_("EnumEElfState")
[
value("ELF_INVAlID_STATE", ELF_INVAlID_STATE),
value("ELF_STATE_COMMON", ELF_STATE_COMMON),
value("ELF_STATE_EXCITE", ELF_STATE_EXCITE),
value("ELF_STATE_DEPRESSED", ELF_STATE_DEPRESSED)
]
,
class_<EElfUpdateState>("EElfUpdateState")
.enum_("EnumEElfUpdateState")
[
value("ELF_INVALID_UPDATE_STATE", ELF_INVALID_UPDATE_STATE),
value("ELF_UPDATE_STATE_NO", ELF_UPDATE_STATE_NO),
value("ELF_UPDATE_STATE_COMMON", ELF_UPDATE_STATE_COMMON),
value("ELF_UPDATE_STATE_DIRECT", ELF_UPDATE_STATE_DIRECT)
]
,
class_<ELogin7RewardFlag>("ELogin7RewardFlag")
.enum_("EnumELogin7RewardFlag")
[
value("LOGIN7_INVLID_STATE", LOGIN7_INVLID_STATE),
value("LOGIN7_CAN_NO_REWARD", LOGIN7_CAN_NO_REWARD),
value("LOGIN7_CAN_REWARD", LOGIN7_CAN_REWARD),
value("LOGIN7_HAVE_REWARD", LOGIN7_HAVE_REWARD)
]
,
class_<EAnnouncement>("EAnnouncement")
.enum_("EnumEAnnouncement")
[
value("ANNOUNCEMENT_INVALID", ANNOUNCEMENT_INVALID),
value("ANNOUNCEMENT_ROLE", ANNOUNCEMENT_ROLE),
value("ANNOUNCEMENT_ITEM", ANNOUNCEMENT_ITEM),
value("ANNOUNCEMENT_COMMANDER", ANNOUNCEMENT_COMMANDER),
value("ANNOUNCEMENT_ELF", ANNOUNCEMENT_ELF),
value("ANNOUNCEMENT_NUMBER", ANNOUNCEMENT_NUMBER)
]
,
class_<EAnnouncementEvent>("EAnnouncementEvent")
.enum_("EnumEAnnouncementEvent")
[
value("AET_SYS_INVALID", AET_SYS_INVALID),
value("AET_SYS_STOP", AET_SYS_STOP),
value("AET_GAME_NOTIY", AET_GAME_NOTIY),
value("AET_ROLE_LEVEL_UP", AET_ROLE_LEVEL_UP),
value("AET_ROLE_VIP_UP", AET_ROLE_VIP_UP),
value("AET_ROLE_GET_COMMANDER", AET_ROLE_GET_COMMANDER),
value("AET_ROLE_GET_ITEM", AET_ROLE_GET_ITEM),
value("AET_ROLE_GET_ELF", AET_ROLE_GET_ELF),
value("AET_RANK_LIST", AET_RANK_LIST),
value("AET_ENDLESS_GUANQIA", AET_ENDLESS_GUANQIA),
value("AET_PASS_GUANQIA", AET_PASS_GUANQIA),
value("AET_EQUIPMENT_LV_UP", AET_EQUIPMENT_LV_UP)
]
,
class_<EAnnouncementSystem>("EAnnouncementSystem")
.enum_("EnumEAnnouncementSystem")
[
value("ANNOUNCEMENT_SYS_INVALID", ANNOUNCEMENT_SYS_INVALID),
value("ANNOUNCEMENT_SYS_ELITE_GUANQIA", ANNOUNCEMENT_SYS_ELITE_GUANQIA),
value("ANNOUNCEMENT_SYS_ENDLESS", ANNOUNCEMENT_SYS_ENDLESS),
value("ANNOUNCEMENT_SYS_MALL", ANNOUNCEMENT_SYS_MALL),
value("ANNOUNCEMENT_SYS_RANKLIST", ANNOUNCEMENT_SYS_RANKLIST),
value("ANNOUNCEMENT_SYS_OPEN_TREASURE_BOX", ANNOUNCEMENT_SYS_OPEN_TREASURE_BOX)
]
,
class_<ECommanderStartLvL>("ECommanderStartLvL")
.enum_("EnumECommanderStartLvL")
[
value("COMMANDER_START_0", COMMANDER_START_0),
value("COMMANDER_START_1", COMMANDER_START_1),
value("COMMANDER_START_2", COMMANDER_START_2),
value("COMMANDER_START_3", COMMANDER_START_3),
value("COMMANDER_START_4", COMMANDER_START_4),
value("COMMANDER_START_5", COMMANDER_START_5)
]
,
class_<ECommanderRefresh>("ECommanderRefresh")
.enum_("EnumECommanderRefresh")
[
value("REFRESH_INVAL", REFRESH_INVAL),
value("COMMANDER_REFRESH", COMMANDER_REFRESH),
value("LONGCORRIDOR_REFRESH", LONGCORRIDOR_REFRESH),
value("ITEMUSE_REFRESH", ITEMUSE_REFRESH)
]
,
class_<ECommanderDiscern>("ECommanderDiscern")
.enum_("EnumECommanderDiscern")
[
value("DISCERN_INVAL", DISCERN_INVAL),
value("DISCERN_DEFAULT", DISCERN_DEFAULT),
value("DISCERN_FREE_F", DISCERN_FREE_F),
value("DISCERN_PAY_F", DISCERN_PAY_F)
]
,
class_<EVipRewardFlag>("EVipRewardFlag")
.enum_("EnumEVipRewardFlag")
[
value("VIP_FLAG_INVALID", VIP_FLAG_INVALID),
value("VIP_FLAG_NO", VIP_FLAG_NO),
value("VIP_FLAG_CAN", VIP_FLAG_CAN),
value("VIP_FLAG_HAVE_REWARD", VIP_FLAG_HAVE_REWARD)
]
,
class_<EWindowFlag>("EWindowFlag")
.enum_("EnumEWindowFlag")
[
value("WINDOW_FLAG_INVALID", WINDOW_FLAG_INVALID),
value("WINDOW_FLAG_ELF", WINDOW_FLAG_ELF)
]
,
class_<ELeaveGuanQiaState>("ELeaveGuanQiaState")
.enum_("EnumELeaveGuanQiaState")
[
value("GUAN_QIA_INVALID_STATE", GUAN_QIA_INVALID_STATE),
value("GUAN_QIA_WORLD_MAP", GUAN_QIA_WORLD_MAP),
value("GUAN_QIA_GUAN_QIA", GUAN_QIA_GUAN_QIA)
]
,
class_<EGuanQiaZJType>("EGuanQiaZJType")
.enum_("EnumEGuanQiaZJType")
[
value("GUAN_QIA_ZJ_INVALID_TYPE", GUAN_QIA_ZJ_INVALID_TYPE),
value("GUAN_QIA_ZJ_TYPE_COMMON", GUAN_QIA_ZJ_TYPE_COMMON),
value("GUAN_QIA_ZJ_TYPE_EXP_BACKUP", GUAN_QIA_ZJ_TYPE_EXP_BACKUP)
]
,
class_<EWelfareRewardType>("EWelfareRewardType")
.enum_("EnumEWelfareRewardType")
[
value("WELFARE_TYPE_INVALID", WELFARE_TYPE_INVALID),
value("WELFARE_TYPE_NO", WELFARE_TYPE_NO),
value("WELFARE_TYPE_HAVE_AND_NO_MAX", WELFARE_TYPE_HAVE_AND_NO_MAX),
value("WELFARE_TYPE_HAVE_AND_IS_MAX", WELFARE_TYPE_HAVE_AND_IS_MAX)
]
,
class_<EWelfareHdType>("EWelfareHdType")
.enum_("EnumEWelfareHdType")
[
value("WELFARE_HD_TYPE_INVALID", WELFARE_HD_TYPE_INVALID),
value("WELFARE_HD_TYPE_7DAY", WELFARE_HD_TYPE_7DAY)
]
,
class_<EActiveAddType>("EActiveAddType")
.enum_("EnumEActiveAddType")
[
value("OTHER_ACTIVE_ADD_TYPE_INVALID", OTHER_ACTIVE_ADD_TYPE_INVALID),
value("OTHER_ACTIVE_ADD_TYPE_XUN_BAO", OTHER_ACTIVE_ADD_TYPE_XUN_BAO),
value("OTHER_ACTIVE_ADD_TYPE_ZM_COMMANER", OTHER_ACTIVE_ADD_TYPE_ZM_COMMANER),
value("OTHER_ACTIVE_ADD_TYPE_EXP", OTHER_ACTIVE_ADD_TYPE_EXP),
value("OTHER_ACTIVE_ADD_TYPE_RANK", OTHER_ACTIVE_ADD_TYPE_RANK),
value("OTHER_ACTIVE_ADD_TYPE_SGYHJ", OTHER_ACTIVE_ADD_TYPE_SGYHJ),
value("OTHER_ACTIVE_ADD_TYPE_ELF", OTHER_ACTIVE_ADD_TYPE_ELF),
value("OTHER_ACTIVE_ADD_TYPE_ENDLESS", OTHER_ACTIVE_ADD_TYPE_ENDLESS)
]
,
class_<EGameRetCode>("EGameRetCode")
.enum_("EnumEGameRetCode")
[
value("RC_SUCCESS", RC_SUCCESS),
value("RC_FAILED", RC_FAILED),
value("RC_ENTER_GAME_FAILED", RC_ENTER_GAME_FAILED),
value("RC_LOGIN_FAILED", RC_LOGIN_FAILED),
value("RC_LOGIN_MAX_ROLE_NUM", RC_LOGIN_MAX_ROLE_NUM),
value("RC_LOGIN_NOENOUGH_OBJ_UID", RC_LOGIN_NOENOUGH_OBJ_UID),
value("RC_LOGIN_NO_MAP_SERVER", RC_LOGIN_NO_MAP_SERVER),
value("RC_LOGIN_NO_ROLE", RC_LOGIN_NO_ROLE),
value("RC_LOGIN_MIN_ROLE_NUM", RC_LOGIN_MIN_ROLE_NUM),
value("RC_LOGIN_ROLE_NAME_INVALID", RC_LOGIN_ROLE_NAME_INVALID),
value("RC_LOGIN_NO_MAP", RC_LOGIN_NO_MAP),
value("RC_LOGIN_HAS_SELECT_ROLE", RC_LOGIN_HAS_SELECT_ROLE),
value("RC_LOGIN_NAME_REPEAT", RC_LOGIN_NAME_REPEAT),
value("RC_LOGIN_CREATE_ROLE_FAILED", RC_LOGIN_CREATE_ROLE_FAILED),
value("RC_LOGIN_DELETE_ROLE_FAILED", RC_LOGIN_DELETE_ROLE_FAILED),
value("RC_LOGIN_REQUEST_WAIT", RC_LOGIN_REQUEST_WAIT),
value("RC_LOGIN_REQUEST_FAILED", RC_LOGIN_REQUEST_FAILED),
value("RC_LOGIN_OLD_ROLE_EXIST", RC_LOGIN_OLD_ROLE_EXIST),
value("RC_LOGIN_LIMIT", RC_LOGIN_LIMIT),
value("RC_LOGIN_SERVER_CLOSE", RC_LOGIN_SERVER_CLOSE),
value("RC_LOGIN_NO_ACCOUNT", RC_LOGIN_NO_ACCOUNT),
value("RC_LOGIN_RENAME_FAILED", RC_LOGIN_RENAME_FAILED),
value("RC_LOGIN_RENAME_REPEAT", RC_LOGIN_RENAME_REPEAT),
value("RC_ROLE_DIE", RC_ROLE_DIE),
value("RC_ROLE_OFFLINE", RC_ROLE_OFFLINE),
value("RC_ROLE_NOT_EXIST", RC_ROLE_NOT_EXIST),
value("RC_LIMIT_MOVE", RC_LIMIT_MOVE),
value("RC_DIE", RC_DIE),
value("RC_LACKGOLD", RC_LACKGOLD),
value("RC_LACKRMB", RC_LACKRMB),
value("RC_HAVENOT_COMMANDER", RC_HAVENOT_COMMANDER),
value("RC_INVALID_COMMANER_ID_ERR", RC_INVALID_COMMANER_ID_ERR),
value("RC_INVALID_FORSTER_TYPE_ERR", RC_INVALID_FORSTER_TYPE_ERR),
value("RC_NOT_ENOUGH_MONEY_ERR", RC_NOT_ENOUGH_MONEY_ERR),
value("RC_NOT_ENOUGH_FORSTER_MONERY_ERR", RC_NOT_ENOUGH_FORSTER_MONERY_ERR),
value("RC_HAVE_COMMANDER", RC_HAVE_COMMANDER),
value("RC_NOT_CALLUPPOINT", RC_NOT_CALLUPPOINT),
value("RC_NOT_ENOUGH_DIAMOD_ERR", RC_NOT_ENOUGH_DIAMOD_ERR),
value("RC_COMMANDER_MAX_LEVEL", RC_COMMANDER_MAX_LEVEL),
value("RC_HANDLE_DISMISSCOM", RC_HANDLE_DISMISSCOM),
value("RC_BAG_IS_FULL", RC_BAG_IS_FULL),
value("RC_BAG_HAVENOT_BAGTYPE", RC_BAG_HAVENOT_BAGTYPE),
value("RC_BAG_HAVENOT_TARGETITEM", RC_BAG_HAVENOT_TARGETITEM),
value("RC_BAG_USEITEM_FAILED", RC_BAG_USEITEM_FAILED),
value("RC_BAG_DELETEITEM_FAILED", RC_BAG_DELETEITEM_FAILED),
value("RC_BAG_DEDUCTITEM_FAILED", RC_BAG_DEDUCTITEM_FAILED),
value("RC_BAG_SELLTITEM_FAILED", RC_BAG_SELLTITEM_FAILED),
value("RC_BAG_HAVENOT_BUYGGRID", RC_BAG_HAVENOT_BUYGGRID),
value("RC_BAG_ITEM_CDTIME", RC_BAG_ITEM_CDTIME),
value("RC_BAG_ADDITEM_FAILED", RC_BAG_ADDITEM_FAILED),
value("RC_BAG_BUYGRID_FAILED", RC_BAG_BUYGRID_FAILED),
value("RC_BAG_CANNOTADDTOKEN", RC_BAG_CANNOTADDTOKEN),
value("RC_BAG_HAVENOT_ENM_OPENGIRD", RC_BAG_HAVENOT_ENM_OPENGIRD),
value("RC_BAG_CANNOT_ADDITEM_BYNULL", RC_BAG_CANNOT_ADDITEM_BYNULL),
value("RC_FORMATION_COMMANDER_ID_ERR", RC_FORMATION_COMMANDER_ID_ERR),
value("RC_FORMATION_HERO_ID_ERR", RC_FORMATION_HERO_ID_ERR),
value("RC_FORMATION_COORDINATE_ERR", RC_FORMATION_COORDINATE_ERR),
value("RC_FORMATION_TYPE_ERR", RC_FORMATION_TYPE_ERR),
value("RC_FORMATION_LEVEL_MAX_ERR", RC_FORMATION_LEVEL_MAX_ERR),
value("RC_FORMATION_TRAIN_POINT_NOT_ENOUGH_ERR", RC_FORMATION_TRAIN_POINT_NOT_ENOUGH_ERR),
value("RC_FORMATION_HERO_LIMIT_ERR", RC_FORMATION_HERO_LIMIT_ERR),
value("RC_FORMATION_SOLDIER_ID_ERR", RC_FORMATION_SOLDIER_ID_ERR),
value("RC_FORMATION_COMMANDER_NOT_OPEN_ERR", RC_FORMATION_COMMANDER_NOT_OPEN_ERR),
value("RC_FORMATION_COMMANDER_F_NUM_NO_ENOUGH_ERR", RC_FORMATION_COMMANDER_F_NUM_NO_ENOUGH_ERR),
value("RC_FORMATION_COST_NOT_ENOUGH_ERR", RC_FORMATION_COST_NOT_ENOUGH_ERR),
value("RC_FORMATION_COMMANDER_F_ID_NO_UNIQUE_ERR", RC_FORMATION_COMMANDER_F_ID_NO_UNIQUE_ERR),
value("RC_GUAN_QIA_INVALID_ID_ERR", RC_GUAN_QIA_INVALID_ID_ERR),
value("RC_GUAN_QIA_DIAMOND_NO_ENOUGH_ERR", RC_GUAN_QIA_DIAMOND_NO_ENOUGH_ERR),
value("RC_GUAN_QIA_NO_ENOUGH_COUNT_ERR", RC_GUAN_QIA_NO_ENOUGH_COUNT_ERR),
value("RC_GUAN_QIA_IS_OVER_ERR", RC_GUAN_QIA_IS_OVER_ERR),
value("RC_GUAN_QIA_NOT_OPEN_ERR", RC_GUAN_QIA_NOT_OPEN_ERR),
value("RC_GUAN_QIA_HAVE_GUA_JI_ERR", RC_GUAN_QIA_HAVE_GUA_JI_ERR),
value("RC_GUAN_QIA_NO_ENOUGH_HL_ERR", RC_GUAN_QIA_NO_ENOUGH_HL_ERR),
value("RC_GUAN_QIA_GUA_JI_TYPE_ERR", RC_GUAN_QIA_GUA_JI_TYPE_ERR),
value("RC_GUAN_QIA_INVALID_ZJ_ERR", RC_GUAN_QIA_INVALID_ZJ_ERR),
value("RC_GUAN_QIA_INVALID_REWARDID_ERR", RC_GUAN_QIA_INVALID_REWARDID_ERR),
value("RC_GUAN_QIA_INVALID_AWARD_ERR", RC_GUAN_QIA_INVALID_AWARD_ERR),
value("RC_GUAN_QIA_NO_ENOUGH_ITEM_ERR", RC_GUAN_QIA_NO_ENOUGH_ITEM_ERR),
value("RC_GUAN_QIA_NO_ENOUGH_RESET_ERR", RC_GUAN_QIA_NO_ENOUGH_RESET_ERR),
value("RC_GUAN_QIA_NO_ELITE_ERR", RC_GUAN_QIA_NO_ELITE_ERR),
value("RC_GUAN_QIA_NO_CS_LIMIT_ERR", RC_GUAN_QIA_NO_CS_LIMIT_ERR),
value("RC_GUAN_QIA_PACKET_NULL_ERR", RC_GUAN_QIA_PACKET_NULL_ERR),
value("RC_GUAN_QIA_INVALID_LEAVE_STATE_ERR", RC_GUAN_QIA_INVALID_LEAVE_STATE_ERR),
value("RC_GUAN_QIA_INVALID_CHALLENGE_TYPE_ERR", RC_GUAN_QIA_INVALID_CHALLENGE_TYPE_ERR),
value("RC_SOLDIER_SCIENCE_TYPE_ERR", RC_SOLDIER_SCIENCE_TYPE_ERR),
value("RC_SOLDIER_SCIENCE_ID_ERR", RC_SOLDIER_SCIENCE_ID_ERR),
value("RC_SOLDIER_SCIENCE_ISLIMIT_ERR", RC_SOLDIER_SCIENCE_ISLIMIT_ERR),
value("RC_SOLDIER_SCIENCE_POINT_ERR", RC_SOLDIER_SCIENCE_POINT_ERR),
value("RC_SOLDIER_SCIENCE_ROLE_LEVEL_ERR", RC_SOLDIER_SCIENCE_ROLE_LEVEL_ERR),
value("RC_SOLDIER_SCIENCE_ATTR_NOT_MAX_ERR", RC_SOLDIER_SCIENCE_ATTR_NOT_MAX_ERR),
value("RC_SOLDIER_SCIENCE_NOT_ALLOW_UPGRADE_ERR", RC_SOLDIER_SCIENCE_NOT_ALLOW_UPGRADE_ERR),
value("RC_SOLDIER_SCIENCE_IS_MAX_ERR", RC_SOLDIER_SCIENCE_IS_MAX_ERR),
value("RC_SOLDIER_NEW_PTR_IS_NULL_ERR", RC_SOLDIER_NEW_PTR_IS_NULL_ERR),
value("RC_SOLDIER_NEW_INVALID_SOLDIER_TYPE_ERR", RC_SOLDIER_NEW_INVALID_SOLDIER_TYPE_ERR),
value("RC_SOLDIER_NEW_INVALID_ATTR_TYPE_ERR", RC_SOLDIER_NEW_INVALID_ATTR_TYPE_ERR),
value("RC_SOLDIER_NEW_INVALID_TBL_KEY_ERR", RC_SOLDIER_NEW_INVALID_TBL_KEY_ERR),
value("RC_SOLDIER_NEW_NO_ENOUGH_GAME_MONEY_ERR", RC_SOLDIER_NEW_NO_ENOUGH_GAME_MONEY_ERR),
value("RC_SOLDIER_NEW_ATTR_UPGRADE_MAX_1_ERR", RC_SOLDIER_NEW_ATTR_UPGRADE_MAX_1_ERR),
value("RC_SOLDIER_NEW_ATTR_UPGRADE_MAX_2_ERR", RC_SOLDIER_NEW_ATTR_UPGRADE_MAX_2_ERR),
value("RC_SOLDIER_NEW_ATTR_UPGRADE_MAX_3_ERR", RC_SOLDIER_NEW_ATTR_UPGRADE_MAX_3_ERR),
value("RC_SOLDIER_NEW_NOT_UPGRADE_ERR", RC_SOLDIER_NEW_NOT_UPGRADE_ERR),
value("RC_SOLDIER_NEW_NOT_ENOUGH_LEVEL_ERR", RC_SOLDIER_NEW_NOT_ENOUGH_LEVEL_ERR),
value("RC_SOLDIER_NEW_NOT_ENOUGH_ITEM_ERR", RC_SOLDIER_NEW_NOT_ENOUGH_ITEM_ERR),
value("RC_SOLDIER_NEW_HAVE_MAX_SOLDIER_LV_ERR", RC_SOLDIER_NEW_HAVE_MAX_SOLDIER_LV_ERR),
value("RC_SOLDIER_NEW_ATTR_UPGRADE_MAX_4_ERR", RC_SOLDIER_NEW_ATTR_UPGRADE_MAX_4_ERR),
value("RC_SOLDIER_NEW_NOT_ENOUGH_ATTR_ITEM_ERR", RC_SOLDIER_NEW_NOT_ENOUGH_ATTR_ITEM_ERR),
value("RC_SKILL_HAVENOT_SKILL", RC_SKILL_HAVENOT_SKILL),
value("RC_SKILL_CANNOTSELECT_SKILL", RC_SKILL_CANNOTSELECT_SKILL),
value("RC_SKILL_ONUSE_STATE", RC_SKILL_ONUSE_STATE),
value("RC_SKILL_UPDATE_FAILED", RC_SKILL_UPDATE_FAILED),
value("RC_SKILL_ADD_FAILED", RC_SKILL_ADD_FAILED),
value("RC_SKILL_MINING_FAILED", RC_SKILL_MINING_FAILED),
value("RC_SKILL_HAVENOT_SPEND", RC_SKILL_HAVENOT_SPEND),
value("RC_SKILL_MAXLVL", RC_SKILL_MAXLVL),
value("RC_SKILL_LIMITLVL", RC_SKILL_LIMITLVL),
value("RC_GM_FAILD", RC_GM_FAILD),
value("RC_GM_CMD_FORMAT_ERROR", RC_GM_CMD_FORMAT_ERROR),
value("RC_GM_CMD_NO_GM_KEY_NAME", RC_GM_CMD_NO_GM_KEY_NAME),
value("RC_GM_CMD_NOT_FIND_GM_NAME", RC_GM_CMD_NOT_FIND_GM_NAME),
value("RC_GM_CMD_PARAM_ERROR", RC_GM_CMD_PARAM_ERROR),
value("RC_GM_CMD_NO_ENOUGH_POWER", RC_GM_CMD_NO_ENOUGH_POWER),
value("RC_BUFFER_FAILED", RC_BUFFER_FAILED),
value("RC_BUFFER_EXIST_SAME", RC_BUFFER_EXIST_SAME),
value("RC_BUFFER_NO_EXIST", RC_BUFFER_NO_EXIST),
value("RC_FIGHT_HAS_START", RC_FIGHT_HAS_START),
value("RC_PET_NO_ENOUGH_ERROR", RC_PET_NO_ENOUGH_ERROR),
value("RC_PET_INVALID_SHOW_ID_ERROR", RC_PET_INVALID_SHOW_ID_ERROR),
value("RC_PET_MAX_FOSTER_LEVEL_ERROR", RC_PET_MAX_FOSTER_LEVEL_ERROR),
value("RC_PET_INVALID_PET_ID_ERROR", RC_PET_INVALID_PET_ID_ERROR),
value("RC_PET_ITEM_NO_ENOUGH_ERROR", RC_PET_ITEM_NO_ENOUGH_ERROR),
value("RC_ELF_NULL_PTR_ERR", RC_ELF_NULL_PTR_ERR),
value("RC_ELF_IS_MAX_LV_ERR", RC_ELF_IS_MAX_LV_ERR),
value("RC_ELF_ITEM_NO_ENOUGH_ERR", RC_ELF_ITEM_NO_ENOUGH_ERR),
value("RC_ELF_INVALID_ELF_ID_ERR", RC_ELF_INVALID_ELF_ID_ERR),
value("RC_ELF_NO_OPEN_ERR", RC_ELF_NO_OPEN_ERR),
value("RC_ELF_RMB_NO_ENOUGH_ERR", RC_ELF_RMB_NO_ENOUGH_ERR),
value("RC_ELF_HAVE_FIGHT_ERR", RC_ELF_HAVE_FIGHT_ERR),
value("RC_CHAT_SMALL_LEVEL_ERR", RC_CHAT_SMALL_LEVEL_ERR),
value("RC_CHAT_GAP_TIME_TOO_SHORT_ERR", RC_CHAT_GAP_TIME_TOO_SHORT_ERR),
value("RC_CHAT_CONTENT_IS_EMPTY_ERR", RC_CHAT_CONTENT_IS_EMPTY_ERR),
value("RC_CHAT_CONTENT_ALL_EMPTY_ERR", RC_CHAT_CONTENT_ALL_EMPTY_ERR),
value("RC_CHAT_OTHER_FORBID_CONTENT_ERR", RC_CHAT_OTHER_FORBID_CONTENT_ERR),
value("RC_CHAT_INVALID_GM_ERR", RC_CHAT_INVALID_GM_ERR),
value("RC_CHAT_CONTENT_TOO_LONG_ERR", RC_CHAT_CONTENT_TOO_LONG_ERR),
value("RC_CHAT_FORBBID_ERR", RC_CHAT_FORBBID_ERR),
value("RC_MISSION_FAILD", RC_MISSION_FAILD),
value("RC_MISSION_NO_EXIST", RC_MISSION_NO_EXIST),
value("RC_MISSION_NO_LEVEL", RC_MISSION_NO_LEVEL),
value("RC_MISSION_NO_PRI_ID", RC_MISSION_NO_PRI_ID),
value("RC_MISSION_BAG_NO_EMPTY", RC_MISSION_BAG_NO_EMPTY),
value("RC_MISSION_HAS_ACCEPT", RC_MISSION_HAS_ACCEPT),
value("RC_MISSION_HAS_FINISH", RC_MISSION_HAS_FINISH),
value("RC_MISSION_NO_COLLECT_ITEM", RC_MISSION_NO_COLLECT_ITEM),
value("RC_MISSION_NO_FINISHED", RC_MISSION_NO_FINISHED),
value("RC_GOOD_HAVENOT", RC_GOOD_HAVENOT),
value("RC_GOOD_BUYFAILED", RC_GOOD_BUYFAILED),
value("RC_GOOD_HAVENOTNUM", RC_GOOD_HAVENOTNUM),
value("RC_GOOD_OVERBUYNUM", RC_GOOD_OVERBUYNUM),
value("RC_GOOD_CANNOT_BY_LVL", RC_GOOD_CANNOT_BY_LVL),
value("RC_GOOD_CANNOT_BY_VIPLVL", RC_GOOD_CANNOT_BY_VIPLVL),
value("RC_FAILED_TREASURE", RC_FAILED_TREASURE),
value("RC_MAP_FAILD", RC_MAP_FAILD),
value("RC_MAP_NO_TRANSMIT_ID", RC_MAP_NO_TRANSMIT_ID),
value("RC_MAP_NO_IN_TRANSMIT", RC_MAP_NO_IN_TRANSMIT),
value("RC_MAP_LEVEL_IS_LESS", RC_MAP_LEVEL_IS_LESS),
value("RC_MAP_NO_FIND_DEST_MAP", RC_MAP_NO_FIND_DEST_MAP),
value("RC_MAP_CHANGE_LINE_WAIT", RC_MAP_CHANGE_LINE_WAIT),
value("RC_MAP_CHANGE_LINE_FAILED", RC_MAP_CHANGE_LINE_FAILED),
value("RC_MAP_OPENING_DYNAMAP", RC_MAP_OPENING_DYNAMAP),
value("RC_MAP_CHANGING_LINE", RC_MAP_CHANGING_LINE),
value("RC_COURSE_EMPTY_PTR_ERR", RC_COURSE_EMPTY_PTR_ERR),
value("RC_COURSE_NO_RECORD_IN_TBL_ERR", RC_COURSE_NO_RECORD_IN_TBL_ERR),
value("RC_COURSE_NO_RECORD_IN_MEMORY_ERR", RC_COURSE_NO_RECORD_IN_MEMORY_ERR),
value("RC_COURSE_CAN_NOT_RECEIVE_ERR", RC_COURSE_CAN_NOT_RECEIVE_ERR),
value("RC_COURSE_HAVE_RECEIVE_ERR", RC_COURSE_HAVE_RECEIVE_ERR),
value("RC_COURSE_WRONG_RECEIVE_STATE_ERR", RC_COURSE_WRONG_RECEIVE_STATE_ERR),
value("RC_COURSE_NO_CAN_SHOW_ERR", RC_COURSE_NO_CAN_SHOW_ERR),
value("RC_EQUIP_UPGRADE_CANNOT_FIND", RC_EQUIP_UPGRADE_CANNOT_FIND),
value("RC_UPGRADE_MAX", RC_UPGRADE_MAX),
value("RC_UPGRADE_FAILED", RC_UPGRADE_FAILED),
value("RC_STRENG_MAX", RC_STRENG_MAX),
value("RC_STRENG_FAILED", RC_STRENG_FAILED),
value("RC_HAVE_EQUIP", RC_HAVE_EQUIP),
value("RC_EQUIP_CANNOT_FIND", RC_EQUIP_CANNOT_FIND),
value("RC_EQUIPWARFLAG_CANNOT_STRENG", RC_EQUIPWARFLAG_CANNOT_STRENG),
value("RC_UPGRADE_MATERIAL_HAVENOT_ENOUGH", RC_UPGRADE_MATERIAL_HAVENOT_ENOUGH),
value("RC_UPGRADE_HAVE_NOT_REACHED", RC_UPGRADE_HAVE_NOT_REACHED),
value("RC_ADDEQUIP_MAX", RC_ADDEQUIP_MAX),
value("RC_NO_ENOUGH_CHALLENGE_NUM", RC_NO_ENOUGH_CHALLENGE_NUM),
value("RC_CANT_CHALLENGE_MY", RC_CANT_CHALLENGE_MY),
value("RC_OTHER_NO_IN_RANK_LIST", RC_OTHER_NO_IN_RANK_LIST),
value("RC_MY_NO_IN_RANK_LIST", RC_MY_NO_IN_RANK_LIST),
value("RC_HAS_GET_RANK_LIST_AWARD", RC_HAS_GET_RANK_LIST_AWARD),
value("RC_HAS_IN_FIGHT", RC_HAS_IN_FIGHT),
value("RC_GET_AWARD_NO_IN_RANK_LIST", RC_GET_AWARD_NO_IN_RANK_LIST),
value("RC_RANK_LIST_IS_MY_LOSER", RC_RANK_LIST_IS_MY_LOSER),
value("RC_FRESH_IS_TOO_MANY", RC_FRESH_IS_TOO_MANY),
value("RC_NO_DAIMOD_CAN_GET", RC_NO_DAIMOD_CAN_GET),
value("RC_NO_DAIMOD_CAN_EXCHANGE", RC_NO_DAIMOD_CAN_EXCHANGE),
value("RC_DAIMOD_TOO_SMALL", RC_DAIMOD_TOO_SMALL),
value("RC_HAVE_GET_OLD_DAIMOD", RC_HAVE_GET_OLD_DAIMOD),
value("RC_UPDATE_NO_ENOUGH_DIAMOD", RC_UPDATE_NO_ENOUGH_DIAMOD),
value("RC_VIP_NULL_PTR_ERR", RC_VIP_NULL_PTR_ERR),
value("RC_VIP_POWER_MEDICINE_USE_NO_ENOUGH_ERR", RC_VIP_POWER_MEDICINE_USE_NO_ENOUGH_ERR),
value("RC_VIP_POWER_IS_MAX_ERR", RC_VIP_POWER_IS_MAX_ERR),
value("RC_VIP_INVALID_LV_SMALL_ERR", RC_VIP_INVALID_LV_SMALL_ERR),
value("RC_VIP_NO_REWARD_ERR", RC_VIP_NO_REWARD_ERR),
value("RC_VIP_HAVE_REWARD_ERR", RC_VIP_HAVE_REWARD_ERR),
value("RC_VIP_YB_NO_ENOUGH_ERR", RC_VIP_YB_NO_ENOUGH_ERR),
value("RC_ACTIVE_PTR_ERR", RC_ACTIVE_PTR_ERR),
value("RC_ACTIVE_WRONG_ACTIVE_ID_ERR", RC_ACTIVE_WRONG_ACTIVE_ID_ERR),
value("RC_ACTIVE_LIKE_DELETE_ID_ERR", RC_ACTIVE_LIKE_DELETE_ID_ERR),
value("RC_ACTIVE_TIME_ERR", RC_ACTIVE_TIME_ERR),
value("RC_ACTIVE_RMB_ERR", RC_ACTIVE_RMB_ERR),
value("RC_ACTIVE_NUM_IS_MAX_ERR", RC_ACTIVE_NUM_IS_MAX_ERR),
value("RC_ACTIVE_NUM_TI_LI_MAX_ERR", RC_ACTIVE_NUM_TI_LI_MAX_ERR),
value("RC_ACTIVE_NO_SHOW_ERR", RC_ACTIVE_NO_SHOW_ERR),
value("RC_ACTIVE_NO_OPEN_ERR", RC_ACTIVE_NO_OPEN_ERR),
value("RC_ACTIVE_NO_CAN_JOIN_ERR", RC_ACTIVE_NO_CAN_JOIN_ERR),
value("RC_REGIST_SYSTEM_ERR", RC_REGIST_SYSTEM_ERR),
value("RC_REGIST_HAVE_REGIST_ERR", RC_REGIST_HAVE_REGIST_ERR),
value("RC_LOGIN7_SYSTEM_ERR", RC_LOGIN7_SYSTEM_ERR),
value("RC_LOGIN7_NO_REWARD_ERR", RC_LOGIN7_NO_REWARD_ERR),
value("RC_LOGIN7_INVALID_DAY_ERR", RC_LOGIN7_INVALID_DAY_ERR),
value("RC_LOGIN7_INVALID_REWARD_STATE_ERR", RC_LOGIN7_INVALID_REWARD_STATE_ERR),
value("RC_ENDLESS_GUANQIA_INVALID", RC_ENDLESS_GUANQIA_INVALID),
value("RC_ENDLESS_NOENOUGH_NUM", RC_ENDLESS_NOENOUGH_NUM),
value("RC_ENDLESS_BUY_NUM_MAX", RC_ENDLESS_BUY_NUM_MAX),
value("RC_ENDLESS_HP_MAX", RC_ENDLESS_HP_MAX),
value("RC_ENDLESS_NO_IN_RANK", RC_ENDLESS_NO_IN_RANK),
value("RC_ENDLESS_NO_HP", RC_ENDLESS_NO_HP),
value("RC_ENDLESS_DIFF_ERROR", RC_ENDLESS_DIFF_ERROR),
value("RC_ENDLESS_NO_APPEAR_ID", RC_ENDLESS_NO_APPEAR_ID),
value("RC_ENDLESS_NO_AWARD_ID", RC_ENDLESS_NO_AWARD_ID),
value("RC_ENDLESS_NO_WISDOM", RC_ENDLESS_NO_WISDOM),
value("RC_ENDLESS_CANT_GET_RANK_AWARD", RC_ENDLESS_CANT_GET_RANK_AWARD),
value("RC_HAVE_EXCHANGE_GIFT_ERR", RC_HAVE_EXCHANGE_GIFT_ERR),
value("RC_EXCHANGE_GET_GIFT_INFO_DB_ERR", RC_EXCHANGE_GET_GIFT_INFO_DB_ERR),
value("RC_EXCHANGE_GET_GIFT_PLAT_ID_ERR", RC_EXCHANGE_GET_GIFT_PLAT_ID_ERR),
value("RC_EXCHANGE_GET_GIFT_ACTION_ERR", RC_EXCHANGE_GET_GIFT_ACTION_ERR),
value("RC_EXCHANGE_GET_GIFT_INVALID_ERR", RC_EXCHANGE_GET_GIFT_INVALID_ERR),
value("RC_EXCHANGE_GET_GIfT_INVALID_LEN_ERR", RC_EXCHANGE_GET_GIfT_INVALID_LEN_ERR),
value("RC_EXCHANGE_GET_GIFT_ADD_ITEM_ERR", RC_EXCHANGE_GET_GIFT_ADD_ITEM_ERR),
value("RC_EXCHANGE_GET_GIFT_BAG_FULL_ERR", RC_EXCHANGE_GET_GIFT_BAG_FULL_ERR),
value("RC_EXCHANGE_GET_GIFT_HAVE_DH_ERR", RC_EXCHANGE_GET_GIFT_HAVE_DH_ERR),
value("RC_WELFARE_IS_MAX_ERR", RC_WELFARE_IS_MAX_ERR),
value("RC_WELFARE_HAVE_RECEIVE_ERR", RC_WELFARE_HAVE_RECEIVE_ERR),
value("RC_WELFARE_INVALID_HD_TYPE_ERR", RC_WELFARE_INVALID_HD_TYPE_ERR),
value("RC_WELFARE_INVALID_REWARD_ERR", RC_WELFARE_INVALID_REWARD_ERR),
value("RC_TEXT_INVALID", RC_TEXT_INVALID),
value("RC_REGISTE_MAP_REPEAT", RC_REGISTE_MAP_REPEAT),
value("RC_REGISTE_MAP_NOT_ADD", RC_REGISTE_MAP_NOT_ADD),
value("RC_CHANGE_LINE_ROLE_FULL", RC_CHANGE_LINE_ROLE_FULL),
value("RC_REGISTE_SERVER_REPEAT", RC_REGISTE_SERVER_REPEAT),
value("RC_RECHARGE_WORLD_SERVER_ERR", RC_RECHARGE_WORLD_SERVER_ERR),
value("RC_RECHARGE_WORLD_SERVER_DB_ERR", RC_RECHARGE_WORLD_SERVER_DB_ERR),
value("RC_RECHARGE_MAP_SERVER_UN_EXIST", RC_RECHARGE_MAP_SERVER_UN_EXIST),
value("RC_RECHARGE_TIME_OUT", RC_RECHARGE_TIME_OUT),
value("RC_RECHARGE_ROLE_UNEXIST", RC_RECHARGE_ROLE_UNEXIST),
value("RC_RECHARGE_HAS_CHANGE_LINE", RC_RECHARGE_HAS_CHANGE_LINE),
value("RC_RECHARGE_HAS_REQUEST_STATUS", RC_RECHARGE_HAS_REQUEST_STATUS),
value("RC_RECHARGE_HAS_RECHARGE", RC_RECHARGE_HAS_RECHARGE),
value("RC_RECHARGE_USER_UN_EXIST", RC_RECHARGE_USER_UN_EXIST),
value("RC_RECHARGE_ROLE_NOT_ENTER", RC_RECHARGE_ROLE_NOT_ENTER)
]
,
class_<CHttpDefaultHandler>("CHttpDefaultHandler")

.def("getHandleIp", &CHttpDefaultHandler::getHandleIp)
.def("getHandlePort", &CHttpDefaultHandler::getHandlePort)

,
class_<EBagType>("EBagType")
.enum_("EnumEBagType")
[
value("INVALIDBAG_TYPE", INVALIDBAG_TYPE),
value("BAGCONTAINTER_TYPE", BAGCONTAINTER_TYPE)
]
,
class_<ItemQualityType>("ItemQualityType")
.enum_("EnumItemQualityType")
[
value("GREEN_EQUIP", GREEN_EQUIP),
value("BULE_EQUIP", BULE_EQUIP),
value("PURPLE_EQUIP", PURPLE_EQUIP),
value("PURPLE_EQUIP_F", PURPLE_EQUIP_F),
value("PURPLE_EQUIP_S", PURPLE_EQUIP_S),
value("ORGANGE_EQUIP", ORGANGE_EQUIP),
value("ORGANGE_EQUIP_F", ORGANGE_EQUIP_F),
value("ORGANGE_EQUIP_S", ORGANGE_EQUIP_S)
]
,
class_<ItemEquipMentPositionType>("ItemEquipMentPositionType")
.enum_("EnumItemEquipMentPositionType")
[
value("WEAPON_TYPE", WEAPON_TYPE),
value("ARMOR_TYPE", ARMOR_TYPE),
value("TOTEM_TYPE", TOTEM_TYPE),
value("SHIELD_TYPE", SHIELD_TYPE),
value("MEDAL_TYPE", MEDAL_TYPE),
value("WARFLAG_TYPE", WARFLAG_TYPE),
value("POSITION_MAXTYPE", POSITION_MAXTYPE)
]
,
class_<ItemEquipAddStrengResult>("ItemEquipAddStrengResult")
.enum_("EnumItemEquipAddStrengResult")
[
value("ADDODD_SUCESS", ADDODD_SUCESS),
value("ADDODD_FAILED", ADDODD_FAILED)
]
,
class_<EquipStrengState>("EquipStrengState")
.enum_("EnumEquipStrengState")
[
value("EQUIP_SUCESS", EQUIP_SUCESS),
value("EQUIP_FAILED", EQUIP_FAILED)
]
,
class_<ERechargeLog>("ERechargeLog")
.enum_("EnumERechargeLog")
[
value("RECHARGE_LOG_PLAT_REQUEST", RECHARGE_LOG_PLAT_REQUEST),
value("RECHARGE_LOG_SERIA_NO_ERR", RECHARGE_LOG_SERIA_NO_ERR),
value("RECHARGE_LOG_SEND_GAME", RECHARGE_LOG_SEND_GAME),
value("RECHARGE_LOG_SEND_GAME_FAILED", RECHARGE_LOG_SEND_GAME_FAILED),
value("RECHARGE_LOG_ONLINE", RECHARGE_LOG_ONLINE),
value("RECHARGE_LOG_OFFLINE", RECHARGE_LOG_OFFLINE),
value("RECHARGE_LOG_FAILED", RECHARGE_LOG_FAILED),
value("RECHARGE_LOG_RETRY", RECHARGE_LOG_RETRY)
]
,
class_<ERechargeRecordStatus>("ERechargeRecordStatus")
.enum_("EnumERechargeRecordStatus")
[
value("RECHARGE_RECORD_STATUS_PALT", RECHARGE_RECORD_STATUS_PALT),
value("RECHARGE_RECORD_STATUS_ACCOUNT_SUCCESS", RECHARGE_RECORD_STATUS_ACCOUNT_SUCCESS),
value("RECHARGE_RECORD_STATUS_ACCOUNT_FAILED", RECHARGE_RECORD_STATUS_ACCOUNT_FAILED),
value("RECHARGE_RECORD_STATUS_RETRY_SUCCESS", RECHARGE_RECORD_STATUS_RETRY_SUCCESS)
]
,
class_<EMoneyRecordTouchType>("EMoneyRecordTouchType")
.enum_("EnumEMoneyRecordTouchType")
[
value("MONEYRECORDDEFINE", MONEYRECORDDEFINE),
value("EQUIPMENT_UPLVL", EQUIPMENT_UPLVL),
value("SOLIDIER_UPLVL", SOLIDIER_UPLVL),
value("MALL_BUYITEM", MALL_BUYITEM),
value("COMANDER_UPLVL", COMANDER_UPLVL),
value("REFRESH_COMMANDER", REFRESH_COMMANDER),
value("OPEN_BAGGUID", OPEN_BAGGUID),
value("ADDODD_EQUIP_UPLVL", ADDODD_EQUIP_UPLVL),
value("UNDERGROUND_TOLLGATE", UNDERGROUND_TOLLGATE),
value("ACT_FAIRY_TOWN", ACT_FAIRY_TOWN),
value("BUY_VIP_GIFTBAG", BUY_VIP_GIFTBAG),
value("ELF_UPDATESTATE", ELF_UPDATESTATE),
value("RETURNMONEYBYCOM", RETURNMONEYBYCOM),
value("RANKLIST_REWARD", RANKLIST_REWARD),
value("NEWLOGIN_REWARD", NEWLOGIN_REWARD),
value("LEVELRAWARD", LEVELRAWARD),
value("JJC_UPDATE_COST", JJC_UPDATE_COST),
value("SKILL_UPDATE", SKILL_UPDATE),
value("LOGIN_CHECK", LOGIN_CHECK),
value("RECORD_SELL_ITEM", RECORD_SELL_ITEM),
value("RECORD_ENDLESS_FIGHT", RECORD_ENDLESS_FIGHT),
value("RECORD_GUANQIA_FIGHT", RECORD_GUANQIA_FIGHT),
value("RECORD_MISSION_AWARD", RECORD_MISSION_AWARD),
value("RECORD_RANK_LIST_FIGHT", RECORD_RANK_LIST_FIGHT),
value("RECORD_NEW_ROLE_AWARD", RECORD_NEW_ROLE_AWARD),
value("RECORD_PET_FOSTER", RECORD_PET_FOSTER),
value("RECORD_COMPENSATE_RMB", RECORD_COMPENSATE_RMB),
value("MONEY_GM", MONEY_GM)
]
,
class_<EItemRecordTouchType>("EItemRecordTouchType")
.enum_("EnumEItemRecordTouchType")
[
value("ITEMRECORDDEFINE", ITEMRECORDDEFINE),
value("TOLLGATE_DROP", TOLLGATE_DROP),
value("MALL_BUY", MALL_BUY),
value("COURSE_REWARD", COURSE_REWARD),
value("SIGNIN_REWARD", SIGNIN_REWARD),
value("CHALLENGE_REWARD", CHALLENGE_REWARD),
value("ACT_ELITETOLLGATE", ACT_ELITETOLLGATE),
value("EQUIPMENT_ADVANCE", EQUIPMENT_ADVANCE),
value("SOLIDIER_ADVANCE", SOLIDIER_ADVANCE),
value("ELF_UPLVL", ELF_UPLVL),
value("SKILLOPEN", SKILLOPEN),
value("SKILLUPLVL", SKILLUPLVL),
value("USEITEM", USEITEM),
value("ENDLESS_DAY_AWARD", ENDLESS_DAY_AWARD),
value("EXCHANGE_GIFT_AWARD", EXCHANGE_GIFT_AWARD),
value("SOLDIER_ATTR_UPGRADE", SOLDIER_ATTR_UPGRADE),
value("WELFARE_REWARD", WELFARE_REWARD),
value("OPEN14_ACTIVE", OPEN14_ACTIVE),
value("NEW_ROLE", NEW_ROLE),
value("ITEM_GM", ITEM_GM)
]
,
class_<EMissionStateType>("EMissionStateType")
.enum_("EnumEMissionStateType")
[
value("DEFINEMISSION", DEFINEMISSION),
value("CANACCEPT", CANACCEPT),
value("ACCEPT_PASS", ACCEPT_PASS),
value("SUBMIT", SUBMIT),
value("SUBMIT_PASS", SUBMIT_PASS)
]
,
class_<EPayStateType>("EPayStateType")
.enum_("EnumEPayStateType")
[
value("NOTFIRST_PAY", NOTFIRST_PAY),
value("FIRST_PAY", FIRST_PAY)
]
,
class_<CStopTimer>("CStopTimer")

.def("initData", &CStopTimer::initData)
.def("update", &CStopTimer::update)
.def("doStopSave", &CStopTimer::doStopSave)
.def("doStop", &CStopTimer::doStop)
.def("onStop", &CStopTimer::onStop)
.def("isStopTime", &CStopTimer::isStopTime)
.def("isSaveTime", &CStopTimer::isSaveTime)
.def("isStop", &CStopTimer::isStop)
.def("getScriptEngine", &CStopTimer::getScriptEngine)
.def("setScriptEngine", &CStopTimer::setScriptEngine)
.def("getStopStartTime", &CStopTimer::getStopStartTime)
.def("setStopStartTime", &CStopTimer::setStopStartTime)
.def("getStopLastTime", &CStopTimer::getStopLastTime)
.def("setStopLastTime", &CStopTimer::setStopLastTime)
.def("getStopSaveTime", &CStopTimer::getStopSaveTime)
.def("setStopSaveTime", &CStopTimer::setStopSaveTime)
.def("getService", &CStopTimer::getService)
.def("setService", &CStopTimer::setService)

];
*/
return true;
}
