#include "script_lua_inc.h"
#include "lua_tinker.h"
#include "tolua++.h"
#include "lua_base_conversions.h"
#include "lua_base_conversions_impl.h"
#include "tolua_fix.h"


#include "__header.h"

int lua_worldserver_CBasePacket_getFlag(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_getFlag'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned char ret = cobj->getFlag();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CBasePacket:getFlag has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_getFlag'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_isCompress(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_isCompress'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isCompress();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CBasePacket:isCompress has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_isCompress'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_setPacketID(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_setPacketID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CBasePacket:setPacketID");
        if(!ok)
            return 0;
        cobj->setPacketID(arg0);
        return 0;
    }

    gxError("CBasePacket:setPacketID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_setPacketID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_setUnCompressed(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_setUnCompressed'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->setUnCompressed();
        return 0;
    }

    gxError("CBasePacket:setUnCompressed has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_setUnCompressed'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_data(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_data'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->data();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CBasePacket:data has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_data'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_setTotalLen(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_setTotalLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CBasePacket:setTotalLen");
        if(!ok)
            return 0;
        cobj->setTotalLen(arg0);
        return 0;
    }

    gxError("CBasePacket:setTotalLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_setTotalLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_setFlag(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_setFlag'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CBasePacket:setFlag");
        if(!ok)
            return 0;
        cobj->setFlag(arg0);
        return 0;
    }

    gxError("CBasePacket:setFlag has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_setFlag'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_setCompressed(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_setCompressed'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->setCompressed();
        return 0;
    }

    gxError("CBasePacket:setCompressed has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_setCompressed'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_isCrypt(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_isCrypt'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isCrypt();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CBasePacket:isCrypt has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_isCrypt'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_getPacketID(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CBasePacket_getPacketID'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 0) {
            unsigned short ret = cobj->getPacketID();
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            unsigned short ret = cobj->getPacketID();
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CBasePacket:getPacketID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_getPacketID'.",&tolua_err);
    return 0;
}
int lua_worldserver_CBasePacket_getTotalLen(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_getTotalLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getTotalLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CBasePacket:getTotalLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_getTotalLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_check(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePacket_check'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->check();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CBasePacket:check has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePacket_check'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePacket_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CBasePacket* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CBasePacket:CBasePacket");
        if(!ok)
            return 0;
        cobj = new CBasePacket(arg0);
        tolua_pushusertype(tolua_S,(void*)cobj,"CBasePacket");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CBasePacket:CBasePacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

}

static int lua_worldserver_CBasePacket_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CBasePacket)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CBasePacket",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CBasePacket* self = (CBasePacket*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CBasePacket(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CBasePacket");
    tolua_cclass(tolua_S,"CBasePacket","CBasePacket","",lua_worldserver_CBasePacket_finalize);

    tolua_beginmodule(tolua_S,"CBasePacket");
        tolua_function(tolua_S,"new",lua_worldserver_CBasePacket_constructor);
        tolua_function(tolua_S,"getFlag",lua_worldserver_CBasePacket_getFlag);
        tolua_function(tolua_S,"isCompress",lua_worldserver_CBasePacket_isCompress);
        tolua_function(tolua_S,"setPacketID",lua_worldserver_CBasePacket_setPacketID);
        tolua_function(tolua_S,"setUnCompressed",lua_worldserver_CBasePacket_setUnCompressed);
        tolua_function(tolua_S,"data",lua_worldserver_CBasePacket_data);
        tolua_function(tolua_S,"setTotalLen",lua_worldserver_CBasePacket_setTotalLen);
        tolua_function(tolua_S,"setFlag",lua_worldserver_CBasePacket_setFlag);
        tolua_function(tolua_S,"setCompressed",lua_worldserver_CBasePacket_setCompressed);
        tolua_function(tolua_S,"isCrypt",lua_worldserver_CBasePacket_isCrypt);
        tolua_function(tolua_S,"getPacketID",lua_worldserver_CBasePacket_getPacketID);
        tolua_function(tolua_S,"getTotalLen",lua_worldserver_CBasePacket_getTotalLen);
        tolua_function(tolua_S,"check",lua_worldserver_CBasePacket_check);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CBasePacket).name();
    g_luaType[typeName] = "CBasePacket";
    g_typeCast["CBasePacket"] = "CBasePacket";
    return 1;
}

int lua_worldserver_CRequestPacket_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CRequestPacket* cobj = nullptr;
    bool ok  = true;
   
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 0) {
            cobj = new CRequestPacket();
            tolua_pushusertype(tolua_S,(void*)cobj,"CRequestPacket");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CRequestPacket:CRequestPacket");

            if (!ok) { break; }
            cobj = new CRequestPacket(arg0);
            tolua_pushusertype(tolua_S,(void*)cobj,"CRequestPacket");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CRequestPacket:CRequestPacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

}

static int lua_worldserver_CRequestPacket_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CRequestPacket)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CRequestPacket",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CRequestPacket* self = (CRequestPacket*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CRequestPacket(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CRequestPacket");
    tolua_cclass(tolua_S,"CRequestPacket","CRequestPacket","CBasePacket",lua_worldserver_CRequestPacket_finalize);

    tolua_beginmodule(tolua_S,"CRequestPacket");
        tolua_function(tolua_S,"new",lua_worldserver_CRequestPacket_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CRequestPacket).name();
    g_luaType[typeName] = "CRequestPacket";
    g_typeCast["CRequestPacket"] = "CRequestPacket";
    return 1;
}

int lua_worldserver_CResponsePacket_isSuccess(lua_State* tolua_S)
{
    int argc = 0;
    CResponsePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CResponsePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CResponsePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CResponsePacket_isSuccess'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isSuccess();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CResponsePacket:isSuccess has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CResponsePacket_isSuccess'.",&tolua_err);
	return 0;
}
int lua_worldserver_CResponsePacket_setRetCode(lua_State* tolua_S)
{
    int argc = 0;
    CResponsePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CResponsePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CResponsePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CResponsePacket_setRetCode'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CResponsePacket:setRetCode");
        if(!ok)
            return 0;
        cobj->setRetCode(arg0);
        return 0;
    }

    gxError("CResponsePacket:setRetCode has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CResponsePacket_setRetCode'.",&tolua_err);
	return 0;
}
int lua_worldserver_CResponsePacket_getRetCode(lua_State* tolua_S)
{
    int argc = 0;
    CResponsePacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CResponsePacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (CResponsePacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CResponsePacket_getRetCode'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getRetCode();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CResponsePacket:getRetCode has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CResponsePacket_getRetCode'.",&tolua_err);
	return 0;
}
int lua_worldserver_CResponsePacket_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CResponsePacket* cobj = nullptr;
    bool ok  = true;
   
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 0) {
            cobj = new CResponsePacket();
            tolua_pushusertype(tolua_S,(void*)cobj,"CResponsePacket");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CResponsePacket:CResponsePacket");

            if (!ok) { break; }
            cobj = new CResponsePacket(arg0);
            tolua_pushusertype(tolua_S,(void*)cobj,"CResponsePacket");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CResponsePacket:CResponsePacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

}

static int lua_worldserver_CResponsePacket_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CResponsePacket)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CResponsePacket",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CResponsePacket* self = (CResponsePacket*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CResponsePacket(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CResponsePacket");
    tolua_cclass(tolua_S,"CResponsePacket","CResponsePacket","CBasePacket",lua_worldserver_CResponsePacket_finalize);

    tolua_beginmodule(tolua_S,"CResponsePacket");
        tolua_function(tolua_S,"new",lua_worldserver_CResponsePacket_constructor);
        tolua_function(tolua_S,"isSuccess",lua_worldserver_CResponsePacket_isSuccess);
        tolua_function(tolua_S,"setRetCode",lua_worldserver_CResponsePacket_setRetCode);
        tolua_function(tolua_S,"getRetCode",lua_worldserver_CResponsePacket_getRetCode);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CResponsePacket).name();
    g_luaType[typeName] = "CResponsePacket";
    g_typeCast["CResponsePacket"] = "CResponsePacket";
    return 1;
}

int lua_worldserver_CServerPacket_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CServerPacket* cobj = nullptr;
    bool ok  = true;
   
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CServerPacket:CServerPacket");

            if (!ok) { break; }
            cobj = new CServerPacket(arg0);
            tolua_pushusertype(tolua_S,(void*)cobj,"CServerPacket");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            cobj = new CServerPacket();
            tolua_pushusertype(tolua_S,(void*)cobj,"CServerPacket");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CServerPacket:CServerPacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CServerPacket_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CServerPacket)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CServerPacket",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CServerPacket* self = (CServerPacket*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CServerPacket(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CServerPacket");
    tolua_cclass(tolua_S,"CServerPacket","CServerPacket","CResponsePacket",lua_worldserver_CServerPacket_finalize);

    tolua_beginmodule(tolua_S,"CServerPacket");
        tolua_function(tolua_S,"new",lua_worldserver_CServerPacket_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CServerPacket).name();
    g_luaType[typeName] = "CServerPacket";
    g_typeCast["CServerPacket"] = "CServerPacket";
    return 1;
}

static int lua_worldserver_PackHandleAttr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PackHandleAttr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PackHandleAttr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PackHandleAttr* self = (PackHandleAttr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PackHandleAttr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PackHandleAttr");
    tolua_cclass(tolua_S,"PackHandleAttr","PackHandleAttr","",nullptr);

    tolua_beginmodule(tolua_S,"PackHandleAttr");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PackHandleAttr).name();
    g_luaType[typeName] = "PackHandleAttr";
    g_typeCast["PackHandleAttr"] = "PackHandleAttr";
    return 1;
}

static int lua_worldserver_SockAttr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (SockAttr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"SockAttr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        SockAttr* self = (SockAttr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_SockAttr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"SockAttr");
    tolua_cclass(tolua_S,"SockAttr","SockAttr","",nullptr);

    tolua_beginmodule(tolua_S,"SockAttr");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(SockAttr).name();
    g_luaType[typeName] = "SockAttr";
    g_typeCast["SockAttr"] = "SockAttr";
    return 1;
}

int lua_worldserver_MCCompress_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MCCompress* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MCCompress",0,&tolua_err)) goto tolua_lerror;
    cobj = (MCCompress*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MCCompress_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MCCompress:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MCCompress_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MCCompress_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MCCompress* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MCCompress();
        tolua_pushusertype(tolua_S,(void*)cobj,"MCCompress");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MCCompress:MCCompress has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MCCompress_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MCCompress)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MCCompress",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MCCompress* self = (MCCompress*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MCCompress(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MCCompress");
    tolua_cclass(tolua_S,"MCCompress","MCCompress","CServerPacket",lua_worldserver_MCCompress_finalize);

    tolua_beginmodule(tolua_S,"MCCompress");
        tolua_function(tolua_S,"new",lua_worldserver_MCCompress_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MCCompress_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MCCompress).name();
    g_luaType[typeName] = "MCCompress";
    g_typeCast["MCCompress"] = "MCCompress";
    return 1;
}

static int lua_worldserver_PackCompress_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PackCompress)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PackCompress",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PackCompress* self = (PackCompress*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PackCompress(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PackCompress");
    tolua_cclass(tolua_S,"PackCompress","PackCompress","",nullptr);

    tolua_beginmodule(tolua_S,"PackCompress");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PackCompress).name();
    g_luaType[typeName] = "PackCompress";
    g_typeCast["PackCompress"] = "PackCompress";
    return 1;
}

static int lua_worldserver_PackEncrypt_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PackEncrypt)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PackEncrypt",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PackEncrypt* self = (PackEncrypt*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PackEncrypt(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PackEncrypt");
    tolua_cclass(tolua_S,"PackEncrypt","PackEncrypt","",nullptr);

    tolua_beginmodule(tolua_S,"PackEncrypt");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PackEncrypt).name();
    g_luaType[typeName] = "PackEncrypt";
    g_typeCast["PackEncrypt"] = "PackEncrypt";
    return 1;
}

int lua_worldserver_CBasePackHandleAry_parse(lua_State* tolua_S)
{
    int argc = 0;
    CBasePackHandleAry* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePackHandleAry",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePackHandleAry*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePackHandleAry_parse'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        const char* arg0;
        int arg1;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CBasePackHandleAry:parse"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CBasePackHandleAry:parse");
        if(!ok)
            return 0;
        bool ret = cobj->parse(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CBasePackHandleAry:parse has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePackHandleAry_parse'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePackHandleAry_getBasePack(lua_State* tolua_S)
{
    int argc = 0;
    CBasePackHandleAry* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBasePackHandleAry",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBasePackHandleAry*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBasePackHandleAry_getBasePack'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CBasePackHandleAry:getBasePack");
        if(!ok)
            return 0;
        CBasePacket* ret = cobj->getBasePack(arg0);
        object_to_luaval<CBasePacket>(tolua_S, "CBasePacket",(CBasePacket*)ret);
        return 1;
    }

    gxError("CBasePackHandleAry:getBasePack has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBasePackHandleAry_getBasePack'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBasePackHandleAry_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CBasePackHandleAry* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CBasePackHandleAry();
        tolua_pushusertype(tolua_S,(void*)cobj,"CBasePackHandleAry");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CBasePackHandleAry:CBasePackHandleAry has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CBasePackHandleAry_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CBasePackHandleAry)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CBasePackHandleAry",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CBasePackHandleAry* self = (CBasePackHandleAry*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CBasePackHandleAry(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CBasePackHandleAry");
    tolua_cclass(tolua_S,"CBasePackHandleAry","CBasePackHandleAry","CPackHandleAry",lua_worldserver_CBasePackHandleAry_finalize);

    tolua_beginmodule(tolua_S,"CBasePackHandleAry");
        tolua_function(tolua_S,"new",lua_worldserver_CBasePackHandleAry_constructor);
        tolua_function(tolua_S,"parse",lua_worldserver_CBasePackHandleAry_parse);
        tolua_function(tolua_S,"getBasePack",lua_worldserver_CBasePackHandleAry_getBasePack);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CBasePackHandleAry).name();
    g_luaType[typeName] = "CBasePackHandleAry";
    g_typeCast["CBasePackHandleAry"] = "CBasePackHandleAry";
    return 1;
}

static int lua_worldserver_TUnpacketIDHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (TUnpacketIDHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"TUnpacketIDHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        TUnpacketIDHandler* self = (TUnpacketIDHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_TUnpacketIDHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"TUnpacketIDHandler");
    tolua_cclass(tolua_S,"TUnpacketIDHandler","TUnpacketIDHandler","",nullptr);

    tolua_beginmodule(tolua_S,"TUnpacketIDHandler");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(TUnpacketIDHandler).name();
    g_luaType[typeName] = "TUnpacketIDHandler";
    g_typeCast["TUnpacketIDHandler"] = "TUnpacketIDHandler";
    return 1;
}

int lua_worldserver_CGameSocketPacketHandler_onPackAfterFromSocket(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_onPackAfterFromSocket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        const char* arg0;
        int arg1;
        char* arg2;
        int arg3;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:onPackAfterFromSocket"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:onPackAfterFromSocket");

        CScriptString arg2_tmp; ok &= luaval_to_script_string(tolua_S, 4, &arg2_tmp, "CGameSocketPacketHandler:onPackAfterFromSocket"); arg2 = (char*)arg2_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CGameSocketPacketHandler:onPackAfterFromSocket");
        if(!ok)
            return 0;
        int ret = cobj->onPackAfterFromSocket(arg0, arg1, arg2, arg3);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:onPackAfterFromSocket has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_onPackAfterFromSocket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_onPackBeforeFlushToSocket(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_onPackBeforeFlushToSocket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        const char* arg0;
        int arg1;
        char* arg2;
        int arg3;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:onPackBeforeFlushToSocket"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:onPackBeforeFlushToSocket");

        CScriptString arg2_tmp; ok &= luaval_to_script_string(tolua_S, 4, &arg2_tmp, "CGameSocketPacketHandler:onPackBeforeFlushToSocket"); arg2 = (char*)arg2_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CGameSocketPacketHandler:onPackBeforeFlushToSocket");
        if(!ok)
            return 0;
        int ret = cobj->onPackBeforeFlushToSocket(arg0, arg1, arg2, arg3);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:onPackBeforeFlushToSocket has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_onPackBeforeFlushToSocket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_onBeforeFlushToSocket(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_onBeforeFlushToSocket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        const char* arg0;
        int arg1;
        char* arg2;
        int arg3;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:onBeforeFlushToSocket"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:onBeforeFlushToSocket");

        CScriptString arg2_tmp; ok &= luaval_to_script_string(tolua_S, 4, &arg2_tmp, "CGameSocketPacketHandler:onBeforeFlushToSocket"); arg2 = (char*)arg2_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CGameSocketPacketHandler:onBeforeFlushToSocket");
        if(!ok)
            return 0;
        int ret = cobj->onBeforeFlushToSocket(arg0, arg1, arg2, arg3);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:onBeforeFlushToSocket has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_onBeforeFlushToSocket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_setAttr(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_setAttr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        SockAttr* arg0;

        ok &= luaval_to_object<SockAttr>(tolua_S, 2, "SockAttr", &arg0, "CGameSocketPacketHandler:setAttr");
        if(!ok)
            return 0;
        cobj->setAttr(arg0);
        return 0;
    }

    gxError("CGameSocketPacketHandler:setAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_setAttr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_onSendPack(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_onSendPack'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        const char* arg0;
        int arg1;
        bool arg2;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:onSendPack"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:onSendPack");

        ok &= luaval_to_boolean(tolua_S, 4,(bool*)&arg2, "CGameSocketPacketHandler:onSendPack");
        if(!ok)
            return 0;
        cobj->onSendPack(arg0, arg1, arg2);
        return 0;
    }

    gxError("CGameSocketPacketHandler:onSendPack has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_onSendPack'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_doCompress(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_doCompress'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        const char* arg0;
        int arg1;
        char* arg2;
        int arg3;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:doCompress"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:doCompress");

        CScriptString arg2_tmp; ok &= luaval_to_script_string(tolua_S, 4, &arg2_tmp, "CGameSocketPacketHandler:doCompress"); arg2 = (char*)arg2_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CGameSocketPacketHandler:doCompress");
        if(!ok)
            return 0;
        int ret = cobj->doCompress(arg0, arg1, arg2, arg3);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:doCompress has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_doCompress'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_onAfterReadFromSocket(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_onAfterReadFromSocket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        const char* arg0;
        int arg1;
        char* arg2;
        int arg3;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:onAfterReadFromSocket"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:onAfterReadFromSocket");

        CScriptString arg2_tmp; ok &= luaval_to_script_string(tolua_S, 4, &arg2_tmp, "CGameSocketPacketHandler:onAfterReadFromSocket"); arg2 = (char*)arg2_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CGameSocketPacketHandler:onAfterReadFromSocket");
        if(!ok)
            return 0;
        int ret = cobj->onAfterReadFromSocket(arg0, arg1, arg2, arg3);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:onAfterReadFromSocket has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_onAfterReadFromSocket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_doEncrypt(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_doEncrypt'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        const char* arg0;
        int arg1;
        char* arg2;
        int arg3;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:doEncrypt"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:doEncrypt");

        CScriptString arg2_tmp; ok &= luaval_to_script_string(tolua_S, 4, &arg2_tmp, "CGameSocketPacketHandler:doEncrypt"); arg2 = (char*)arg2_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CGameSocketPacketHandler:doEncrypt");
        if(!ok)
            return 0;
        int ret = cobj->doEncrypt(arg0, arg1, arg2, arg3);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:doEncrypt has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_doEncrypt'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_canCompress(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_canCompress'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CBasePacket* arg0;

        ok &= luaval_to_object<CBasePacket>(tolua_S, 2, "CBasePacket", &arg0, "CGameSocketPacketHandler:canCompress");
        if(!ok)
            return 0;
        bool ret = cobj->canCompress(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:canCompress has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_canCompress'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_getMaxVarPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_getMaxVarPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const char* arg0;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:getMaxVarPackLen"); arg0 = (char*)arg0_tmp.buffer;
        if(!ok)
            return 0;
        int ret = cobj->getMaxVarPackLen(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:getMaxVarPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_getMaxVarPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_needHandle(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_needHandle'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        GXMISC::ISocketPacketHandler::EPackOpt arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CGameSocketPacketHandler:needHandle");
        if(!ok)
            return 0;
        bool ret = cobj->needHandle(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:needHandle has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_needHandle'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_getPackHeaderLen(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_getPackHeaderLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getPackHeaderLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:getPackHeaderLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_getPackHeaderLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_canUnpacket(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_canUnpacket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->canUnpacket();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:canUnpacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_canUnpacket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_canReadPack(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_canReadPack'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        const char* arg0;
        int arg1;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:canReadPack"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:canReadPack");
        if(!ok)
            return 0;
        int ret = cobj->canReadPack(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:canReadPack has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_canReadPack'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_isVarPacket(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_isVarPacket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        const char* arg0;
        int arg1;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:isVarPacket"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:isVarPacket");
        if(!ok)
            return 0;
        bool ret = cobj->isVarPacket(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CGameSocketPacketHandler:isVarPacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_isVarPacket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_onHandleVarUnpacket(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_onHandleVarUnpacket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        char* arg0;
        const char* arg1;
        int arg2;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:onHandleVarUnpacket"); arg0 = (char*)arg0_tmp.buffer;

        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "CGameSocketPacketHandler:onHandleVarUnpacket"); arg1 = (char*)arg1_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CGameSocketPacketHandler:onHandleVarUnpacket");
        if(!ok)
            return 0;
        cobj->onHandleVarUnpacket(arg0, arg1, arg2);
        return 0;
    }

    gxError("CGameSocketPacketHandler:onHandleVarUnpacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_onHandleVarUnpacket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_onRecvPack(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameSocketPacketHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameSocketPacketHandler_onRecvPack'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        const char* arg0;
        int arg1;
        bool arg2;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CGameSocketPacketHandler:onRecvPack"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameSocketPacketHandler:onRecvPack");

        ok &= luaval_to_boolean(tolua_S, 4,(bool*)&arg2, "CGameSocketPacketHandler:onRecvPack");
        if(!ok)
            return 0;
        cobj->onRecvPack(arg0, arg1, arg2);
        return 0;
    }

    gxError("CGameSocketPacketHandler:onRecvPack has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_onRecvPack'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameSocketPacketHandler_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CGameSocketPacketHandler::Setup();
        return 0;
    }
    gxError("CGameSocketPacketHandler:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameSocketPacketHandler_OnFlushDataToNetLoop(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        GXMISC::CNetLoopWrap* arg0;
        const char* arg1;
        int arg2;
        unsigned long long arg3;
        ok &= luaval_to_object<GXMISC::CNetLoopWrap>(tolua_S, 2, "CNetLoopWrap", &arg0, "CGameSocketPacketHandler:OnFlushDataToNetLoop");
        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "CGameSocketPacketHandler:OnFlushDataToNetLoop"); arg1 = (char*)arg1_tmp.buffer;
        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CGameSocketPacketHandler:OnFlushDataToNetLoop");
        ok &= luaval_to_uint64(tolua_S, 5, (uint64*)&arg3, "CGameSocketPacketHandler:OnFlushDataToNetLoop");
        if(!ok)
            return 0;
        bool ret = CGameSocketPacketHandler::OnFlushDataToNetLoop(arg0, arg1, arg2, arg3);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("CGameSocketPacketHandler:OnFlushDataToNetLoop has wrong number of arguments: {0}, was expecting {1}\n ", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameSocketPacketHandler_OnFlushDataToNetLoop'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameSocketPacketHandler_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CGameSocketPacketHandler* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CGameSocketPacketHandler();
        tolua_pushusertype(tolua_S,(void*)cobj,"CGameSocketPacketHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CGameSocketPacketHandler:CGameSocketPacketHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CGameSocketPacketHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CGameSocketPacketHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CGameSocketPacketHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CGameSocketPacketHandler* self = (CGameSocketPacketHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CGameSocketPacketHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CGameSocketPacketHandler");
    tolua_cclass(tolua_S,"CGameSocketPacketHandler","CGameSocketPacketHandler","ISocketPacketHandler",lua_worldserver_CGameSocketPacketHandler_finalize);

    tolua_beginmodule(tolua_S,"CGameSocketPacketHandler");
        tolua_function(tolua_S,"new",lua_worldserver_CGameSocketPacketHandler_constructor);
        tolua_function(tolua_S,"onPackAfterFromSocket",lua_worldserver_CGameSocketPacketHandler_onPackAfterFromSocket);
        tolua_function(tolua_S,"onPackBeforeFlushToSocket",lua_worldserver_CGameSocketPacketHandler_onPackBeforeFlushToSocket);
        tolua_function(tolua_S,"onBeforeFlushToSocket",lua_worldserver_CGameSocketPacketHandler_onBeforeFlushToSocket);
        tolua_function(tolua_S,"setAttr",lua_worldserver_CGameSocketPacketHandler_setAttr);
        tolua_function(tolua_S,"onSendPack",lua_worldserver_CGameSocketPacketHandler_onSendPack);
        tolua_function(tolua_S,"doCompress",lua_worldserver_CGameSocketPacketHandler_doCompress);
        tolua_function(tolua_S,"onAfterReadFromSocket",lua_worldserver_CGameSocketPacketHandler_onAfterReadFromSocket);
        tolua_function(tolua_S,"doEncrypt",lua_worldserver_CGameSocketPacketHandler_doEncrypt);
        tolua_function(tolua_S,"canCompress",lua_worldserver_CGameSocketPacketHandler_canCompress);
        tolua_function(tolua_S,"getMaxVarPackLen",lua_worldserver_CGameSocketPacketHandler_getMaxVarPackLen);
        tolua_function(tolua_S,"needHandle",lua_worldserver_CGameSocketPacketHandler_needHandle);
        tolua_function(tolua_S,"getPackHeaderLen",lua_worldserver_CGameSocketPacketHandler_getPackHeaderLen);
        tolua_function(tolua_S,"canUnpacket",lua_worldserver_CGameSocketPacketHandler_canUnpacket);
        tolua_function(tolua_S,"canReadPack",lua_worldserver_CGameSocketPacketHandler_canReadPack);
        tolua_function(tolua_S,"isVarPacket",lua_worldserver_CGameSocketPacketHandler_isVarPacket);
        tolua_function(tolua_S,"onHandleVarUnpacket",lua_worldserver_CGameSocketPacketHandler_onHandleVarUnpacket);
        tolua_function(tolua_S,"onRecvPack",lua_worldserver_CGameSocketPacketHandler_onRecvPack);
        tolua_function(tolua_S,"Setup", lua_worldserver_CGameSocketPacketHandler_Setup);
        tolua_function(tolua_S,"OnFlushDataToNetLoop", lua_worldserver_CGameSocketPacketHandler_OnFlushDataToNetLoop);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CGameSocketPacketHandler).name();
    g_luaType[typeName] = "CGameSocketPacketHandler";
    g_typeCast["CGameSocketPacketHandler"] = "CGameSocketPacketHandler";
    return 1;
}

int lua_worldserver_CWBRegiste_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWBRegiste* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWBRegiste",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWBRegiste*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWBRegiste_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWBRegiste:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWBRegiste_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWBRegiste_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWBRegiste* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWBRegiste();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWBRegiste");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWBRegiste:CWBRegiste has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWBRegiste_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWBRegiste)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWBRegiste",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWBRegiste* self = (CWBRegiste*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWBRegiste(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWBRegiste");
    tolua_cclass(tolua_S,"CWBRegiste","CWBRegiste","CRequestPacket",lua_worldserver_CWBRegiste_finalize);

    tolua_beginmodule(tolua_S,"CWBRegiste");
        tolua_function(tolua_S,"new",lua_worldserver_CWBRegiste_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWBRegiste_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWBRegiste).name();
    g_luaType[typeName] = "CWBRegiste";
    g_typeCast["CWBRegiste"] = "CWBRegiste";
    return 1;
}

int lua_worldserver_CBWRegisteRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CBWRegisteRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBWRegisteRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBWRegisteRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBWRegisteRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CBWRegisteRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBWRegisteRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBWRegisteRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CBWRegisteRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CBWRegisteRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"CBWRegisteRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CBWRegisteRet:CBWRegisteRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CBWRegisteRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CBWRegisteRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CBWRegisteRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CBWRegisteRet* self = (CBWRegisteRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CBWRegisteRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CBWRegisteRet");
    tolua_cclass(tolua_S,"CBWRegisteRet","CBWRegisteRet","CResponsePacket",lua_worldserver_CBWRegisteRet_finalize);

    tolua_beginmodule(tolua_S,"CBWRegisteRet");
        tolua_function(tolua_S,"new",lua_worldserver_CBWRegisteRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CBWRegisteRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CBWRegisteRet).name();
    g_luaType[typeName] = "CBWRegisteRet";
    g_typeCast["CBWRegisteRet"] = "CBWRegisteRet";
    return 1;
}

int lua_worldserver_BWRecharge_toString(lua_State* tolua_S)
{
    int argc = 0;
    BWRecharge* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"BWRecharge",0,&tolua_err)) goto tolua_lerror;
    cobj = (BWRecharge*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_BWRecharge_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("BWRecharge:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_BWRecharge_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_BWRecharge_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    BWRecharge* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"BWRecharge",0,&tolua_err)) goto tolua_lerror;
    cobj = (BWRecharge*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_BWRecharge_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("BWRecharge:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_BWRecharge_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_BWRecharge_constructor(lua_State* tolua_S)
{
    int argc = 0;
    BWRecharge* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new BWRecharge();
        tolua_pushusertype(tolua_S,(void*)cobj,"BWRecharge");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("BWRecharge:BWRecharge has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_BWRecharge_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (BWRecharge)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"BWRecharge",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        BWRecharge* self = (BWRecharge*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_BWRecharge(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"BWRecharge");
    tolua_cclass(tolua_S,"BWRecharge","BWRecharge","CRequestPacket",lua_worldserver_BWRecharge_finalize);

    tolua_beginmodule(tolua_S,"BWRecharge");
        tolua_function(tolua_S,"new",lua_worldserver_BWRecharge_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_BWRecharge_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_BWRecharge_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(BWRecharge).name();
    g_luaType[typeName] = "BWRecharge";
    g_typeCast["BWRecharge"] = "BWRecharge";
    return 1;
}

int lua_worldserver_WBRechargeRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WBRechargeRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WBRechargeRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WBRechargeRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WBRechargeRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WBRechargeRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WBRechargeRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WBRechargeRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WBRechargeRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WBRechargeRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WBRechargeRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WBRechargeRet:WBRechargeRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WBRechargeRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WBRechargeRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WBRechargeRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WBRechargeRet* self = (WBRechargeRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WBRechargeRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WBRechargeRet");
    tolua_cclass(tolua_S,"WBRechargeRet","WBRechargeRet","CResponsePacket",lua_worldserver_WBRechargeRet_finalize);

    tolua_beginmodule(tolua_S,"WBRechargeRet");
        tolua_function(tolua_S,"new",lua_worldserver_WBRechargeRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WBRechargeRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WBRechargeRet).name();
    g_luaType[typeName] = "WBRechargeRet";
    g_typeCast["WBRechargeRet"] = "WBRechargeRet";
    return 1;
}

int lua_worldserver_CBillMod_RechargeToAccount(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CBillMod",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 6)
    {
        GXMISC::CFixString<50> arg0;
        unsigned long long arg1;
        int arg2;
        int arg3;
        CWorldPlayer* arg4;
        CWorldUser* arg5;
        ok &= luaval_to_fixstring(tolua_S, 2,&arg0, "CBillMod:RechargeToAccount");
        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CBillMod:RechargeToAccount");
        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CBillMod:RechargeToAccount");
        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CBillMod:RechargeToAccount");
        ok &= luaval_to_object<CWorldPlayer>(tolua_S, 6, "CWorldPlayer", &arg4, "CBillMod:RechargeToAccount");
        ok &= luaval_to_object<CWorldUser>(tolua_S, 7, "CWorldUser", &arg5, "CBillMod:RechargeToAccount");
        if(!ok)
            return 0;
        int ret = (int)CBillMod::RechargeToAccount(arg0, arg1, arg2, arg3, arg4, arg5);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CBillMod:RechargeToAccount has wrong number of arguments: {0}, was expecting {1}\n ", argc, 6);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBillMod_RechargeToAccount'.", &tolua_err);
    return 0;
}
int lua_worldserver_CBillMod_OnChargeRmb(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CBillMod",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 5)
    {
        GXMISC::CFixString<50> arg0;
        unsigned long long arg1;
        unsigned long long arg2;
        int arg3;
        int arg4;
        ok &= luaval_to_fixstring(tolua_S, 2,&arg0, "CBillMod:OnChargeRmb");
        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CBillMod:OnChargeRmb");
        ok &= luaval_to_uint64(tolua_S, 4, (uint64*)&arg2, "CBillMod:OnChargeRmb");
        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CBillMod:OnChargeRmb");
        ok &= luaval_to_sint32(tolua_S, 6,(sint32*)&arg4, "CBillMod:OnChargeRmb");
        if(!ok)
            return 0;
        CBillMod::OnChargeRmb(arg0, arg1, arg2, arg3, arg4);
        return 0;
    }
    gxError("CBillMod:OnChargeRmb has wrong number of arguments: {0}, was expecting {1}\n ", argc, 5);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBillMod_OnChargeRmb'.", &tolua_err);
    return 0;
}
int lua_worldserver_CBillMod_RechargeToMapServer(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CBillMod",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        BWRecharge* arg0;
        CWorldPlayer* arg1;
        CWorldUser* arg2;
        ok &= luaval_to_object<BWRecharge>(tolua_S, 2, "BWRecharge", &arg0, "CBillMod:RechargeToMapServer");
        ok &= luaval_to_object<CWorldPlayer>(tolua_S, 3, "CWorldPlayer", &arg1, "CBillMod:RechargeToMapServer");
        ok &= luaval_to_object<CWorldUser>(tolua_S, 4, "CWorldUser", &arg2, "CBillMod:RechargeToMapServer");
        if(!ok)
            return 0;
        int ret = (int)CBillMod::RechargeToMapServer(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CBillMod:RechargeToMapServer has wrong number of arguments: {0}, was expecting {1}\n ", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBillMod_RechargeToMapServer'.", &tolua_err);
    return 0;
}
int lua_worldserver_CBillMod_OnFirstChargeRmb(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CBillMod",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        unsigned long long arg0;
        unsigned long long arg1;
        GXMISC::CFixString<50> arg2;
        int arg3;
        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CBillMod:OnFirstChargeRmb");
        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CBillMod:OnFirstChargeRmb");
        ok &= luaval_to_fixstring(tolua_S, 4,&arg2, "CBillMod:OnFirstChargeRmb");
        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CBillMod:OnFirstChargeRmb");
        if(!ok)
            return 0;
        CBillMod::OnFirstChargeRmb(arg0, arg1, arg2, arg3);
        return 0;
    }
    gxError("CBillMod:OnFirstChargeRmb has wrong number of arguments: {0}, was expecting {1}\n ", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBillMod_OnFirstChargeRmb'.", &tolua_err);
    return 0;
}
static int lua_worldserver_CBillMod_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CBillMod)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CBillMod",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CBillMod* self = (CBillMod*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CBillMod(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CBillMod");
    tolua_cclass(tolua_S,"CBillMod","CBillMod","",nullptr);

    tolua_beginmodule(tolua_S,"CBillMod");
        tolua_function(tolua_S,"RechargeToAccount", lua_worldserver_CBillMod_RechargeToAccount);
        tolua_function(tolua_S,"OnChargeRmb", lua_worldserver_CBillMod_OnChargeRmb);
        tolua_function(tolua_S,"RechargeToMapServer", lua_worldserver_CBillMod_RechargeToMapServer);
        tolua_function(tolua_S,"OnFirstChargeRmb", lua_worldserver_CBillMod_OnFirstChargeRmb);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CBillMod).name();
    g_luaType[typeName] = "CBillMod";
    g_typeCast["CBillMod"] = "CBillMod";
    return 1;
}

static int lua_worldserver__PackBuffer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (_PackBuffer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"_PackBuffer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        _PackBuffer* self = (_PackBuffer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver__PackBuffer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"_PackBuffer");
    tolua_cclass(tolua_S,"_PackBuffer","_PackBuffer","",nullptr);

    tolua_beginmodule(tolua_S,"_PackBuffer");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(_PackBuffer).name();
    g_luaType[typeName] = "_PackBuffer";
    g_typeCast["_PackBuffer"] = "_PackBuffer";
    return 1;
}

static int lua_worldserver__PackSimpleBuff_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (_PackSimpleBuff)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"_PackSimpleBuff",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        _PackSimpleBuff* self = (_PackSimpleBuff*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver__PackSimpleBuff(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"_PackSimpleBuff");
    tolua_cclass(tolua_S,"_PackSimpleBuff","_PackSimpleBuff","",nullptr);

    tolua_beginmodule(tolua_S,"_PackSimpleBuff");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(_PackSimpleBuff).name();
    g_luaType[typeName] = "_PackSimpleBuff";
    g_typeCast["_PackSimpleBuff"] = "_PackSimpleBuff";
    return 1;
}

int lua_worldserver_PackLoginRole_setParam(lua_State* tolua_S)
{
    int argc = 0;
    PackLoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"PackLoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (PackLoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_PackLoginRole_setParam'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 7) 
    {
        const char* arg0;
        unsigned long long arg1;
        unsigned char arg2;
        unsigned char arg3;
        unsigned char arg4;
        unsigned int arg5;
        unsigned int arg6;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "PackLoginRole:setParam"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "PackLoginRole:setParam");

        ok &= luaval_to_uint8(tolua_S, 4,(uint8*)&arg2, "PackLoginRole:setParam");

        ok &= luaval_to_uint8(tolua_S, 5,(uint8*)&arg3, "PackLoginRole:setParam");

        ok &= luaval_to_uint8(tolua_S, 6,(uint8*)&arg4, "PackLoginRole:setParam");

        ok &= luaval_to_uint32(tolua_S, 7,(uint32*)&arg5, "PackLoginRole:setParam");

        ok &= luaval_to_uint32(tolua_S, 8,(uint32*)&arg6, "PackLoginRole:setParam");
        if(!ok)
            return 0;
        cobj->setParam(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        return 0;
    }

    gxError("PackLoginRole:setParam has wrong number of arguments: {0}, was expecting {1} \n", argc, 7);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_PackLoginRole_setParam'.",&tolua_err);
	return 0;
}
int lua_worldserver_PackLoginRole_toString(lua_State* tolua_S)
{
    int argc = 0;
    PackLoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"PackLoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (PackLoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_PackLoginRole_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("PackLoginRole:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_PackLoginRole_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_PackLoginRole_constructor(lua_State* tolua_S)
{
    int argc = 0;
    PackLoginRole* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new PackLoginRole();
        tolua_pushusertype(tolua_S,(void*)cobj,"PackLoginRole");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("PackLoginRole:PackLoginRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_PackLoginRole_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PackLoginRole)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PackLoginRole",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PackLoginRole* self = (PackLoginRole*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PackLoginRole(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PackLoginRole");
    tolua_cclass(tolua_S,"PackLoginRole","PackLoginRole","",lua_worldserver_PackLoginRole_finalize);

    tolua_beginmodule(tolua_S,"PackLoginRole");
        tolua_function(tolua_S,"new",lua_worldserver_PackLoginRole_constructor);
        tolua_function(tolua_S,"setParam",lua_worldserver_PackLoginRole_setParam);
        tolua_function(tolua_S,"toString",lua_worldserver_PackLoginRole_toString);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PackLoginRole).name();
    g_luaType[typeName] = "PackLoginRole";
    g_typeCast["PackLoginRole"] = "PackLoginRole";
    return 1;
}

static int lua_worldserver_PackRoleShape_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PackRoleShape)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PackRoleShape",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PackRoleShape* self = (PackRoleShape*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PackRoleShape(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PackRoleShape");
    tolua_cclass(tolua_S,"PackRoleShape","PackRoleShape","IStreamableAll",nullptr);

    tolua_beginmodule(tolua_S,"PackRoleShape");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PackRoleShape).name();
    g_luaType[typeName] = "PackRoleShape";
    g_typeCast["PackRoleShape"] = "PackRoleShape";
    return 1;
}

static int lua_worldserver_PackMonsterShape_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PackMonsterShape)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PackMonsterShape",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PackMonsterShape* self = (PackMonsterShape*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PackMonsterShape(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PackMonsterShape");
    tolua_cclass(tolua_S,"PackMonsterShape","PackMonsterShape","",nullptr);

    tolua_beginmodule(tolua_S,"PackMonsterShape");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PackMonsterShape).name();
    g_luaType[typeName] = "PackMonsterShape";
    g_typeCast["PackMonsterShape"] = "PackMonsterShape";
    return 1;
}

static int lua_worldserver_PacketSourceWay_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PacketSourceWay)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PacketSourceWay",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PacketSourceWay* self = (PacketSourceWay*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PacketSourceWay(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PacketSourceWay");
    tolua_cclass(tolua_S,"PacketSourceWay","PacketSourceWay","",nullptr);

    tolua_beginmodule(tolua_S,"PacketSourceWay");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PacketSourceWay).name();
    g_luaType[typeName] = "PacketSourceWay";
    g_typeCast["PacketSourceWay"] = "PacketSourceWay";
    return 1;
}

static int lua_worldserver_PacketNewRegister_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PacketNewRegister)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PacketNewRegister",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PacketNewRegister* self = (PacketNewRegister*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PacketNewRegister(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PacketNewRegister");
    tolua_cclass(tolua_S,"PacketNewRegister","PacketNewRegister","",nullptr);

    tolua_beginmodule(tolua_S,"PacketNewRegister");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PacketNewRegister).name();
    g_luaType[typeName] = "PacketNewRegister";
    g_typeCast["PacketNewRegister"] = "PacketNewRegister";
    return 1;
}

static int lua_worldserver_PacketLoginTime_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PacketLoginTime)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PacketLoginTime",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PacketLoginTime* self = (PacketLoginTime*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PacketLoginTime(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PacketLoginTime");
    tolua_cclass(tolua_S,"PacketLoginTime","PacketLoginTime","",nullptr);

    tolua_beginmodule(tolua_S,"PacketLoginTime");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PacketLoginTime).name();
    g_luaType[typeName] = "PacketLoginTime";
    g_typeCast["PacketLoginTime"] = "PacketLoginTime";
    return 1;
}

static int lua_worldserver_PacketSingletonInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PacketSingletonInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PacketSingletonInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PacketSingletonInfo* self = (PacketSingletonInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PacketSingletonInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PacketSingletonInfo");
    tolua_cclass(tolua_S,"PacketSingletonInfo","PacketSingletonInfo","",nullptr);

    tolua_beginmodule(tolua_S,"PacketSingletonInfo");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PacketSingletonInfo).name();
    g_luaType[typeName] = "PacketSingletonInfo";
    g_typeCast["PacketSingletonInfo"] = "PacketSingletonInfo";
    return 1;
}

static int lua_worldserver_PacketGameCollectInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PacketGameCollectInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PacketGameCollectInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PacketGameCollectInfo* self = (PacketGameCollectInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PacketGameCollectInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PacketGameCollectInfo");
    tolua_cclass(tolua_S,"PacketGameCollectInfo","PacketGameCollectInfo","",nullptr);

    tolua_beginmodule(tolua_S,"PacketGameCollectInfo");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PacketGameCollectInfo).name();
    g_luaType[typeName] = "PacketGameCollectInfo";
    g_typeCast["PacketGameCollectInfo"] = "PacketGameCollectInfo";
    return 1;
}

static int lua_worldserver_PacketCreateBrforeInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (PacketCreateBrforeInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"PacketCreateBrforeInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        PacketCreateBrforeInfo* self = (PacketCreateBrforeInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_PacketCreateBrforeInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"PacketCreateBrforeInfo");
    tolua_cclass(tolua_S,"PacketCreateBrforeInfo","PacketCreateBrforeInfo","",nullptr);

    tolua_beginmodule(tolua_S,"PacketCreateBrforeInfo");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(PacketCreateBrforeInfo).name();
    g_luaType[typeName] = "PacketCreateBrforeInfo";
    g_typeCast["PacketCreateBrforeInfo"] = "PacketCreateBrforeInfo";
    return 1;
}

static int lua_worldserver_TAdjust_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (TAdjust)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"TAdjust",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        TAdjust* self = (TAdjust*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_TAdjust(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"TAdjust");
    tolua_cclass(tolua_S,"TAdjust","TAdjust","",nullptr);

    tolua_beginmodule(tolua_S,"TAdjust");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(TAdjust).name();
    g_luaType[typeName] = "TAdjust";
    g_typeCast["TAdjust"] = "TAdjust";
    return 1;
}

int lua_worldserver_AxisPos_toSinglePos(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_toSinglePos'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        uint64 ret = cobj->toSinglePos();
        lua_tinker::push(tolua_S,ret);
        return 1;
    }

    gxError("AxisPos:toSinglePos has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_toSinglePos'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_isValid(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_isValid'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isValid();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("AxisPos:isValid has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_isValid'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_getDirect(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_getDirect'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const AxisPos* arg0;

        ok &= luaval_to_object<const AxisPos>(tolua_S, 2, "AxisPos", &arg0, "AxisPos:getDirect");
        if(!ok)
            return 0;
        const int ret = cobj->getDirect(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("AxisPos:getDirect has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_getDirect'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_getX(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_getX'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        short ret = cobj->getX();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("AxisPos:getX has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_getX'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_getY(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_getY'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        short ret = cobj->getY();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("AxisPos:getY has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_getY'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("AxisPos:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_toString(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("AxisPos:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_setX(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_setX'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        short arg0;

        ok &= luaval_to_sint16(tolua_S, 2,(sint16*)&arg0, "AxisPos:setX");
        if(!ok)
            return 0;
        cobj->setX(arg0);
        return 0;
    }

    gxError("AxisPos:setX has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_setX'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_setY(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err)) goto tolua_lerror;
    cobj = (AxisPos*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AxisPos_setY'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        short arg0;

        ok &= luaval_to_sint16(tolua_S, 2,(sint16*)&arg0, "AxisPos:setY");
        if(!ok)
            return 0;
        cobj->setY(arg0);
        return 0;
    }

    gxError("AxisPos:setY has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AxisPos_setY'.",&tolua_err);
	return 0;
}
int lua_worldserver_AxisPos_constructor(lua_State* tolua_S)
{
    int argc = 0;
    AxisPos* cobj = nullptr;
    bool ok  = true;
   
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            short arg0;
            ok &= luaval_to_sint16(tolua_S, 2,(sint16*)&arg0, "AxisPos:AxisPos");

            if (!ok) { break; }
            short arg1;
            ok &= luaval_to_sint16(tolua_S, 3,(sint16*)&arg1, "AxisPos:AxisPos");

            if (!ok) { break; }
            cobj = new AxisPos(arg0, arg1);
            tolua_pushusertype(tolua_S,(void*)cobj,"AxisPos");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            cobj = new AxisPos();
            tolua_pushusertype(tolua_S,(void*)cobj,"AxisPos");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("AxisPos:AxisPos has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_AxisPos_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (AxisPos)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"AxisPos",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        AxisPos* self = (AxisPos*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_AxisPos(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"AxisPos");
    tolua_cclass(tolua_S,"AxisPos","AxisPos","",lua_worldserver_AxisPos_finalize);

    tolua_beginmodule(tolua_S,"AxisPos");
        tolua_function(tolua_S,"new",lua_worldserver_AxisPos_constructor);
        tolua_function(tolua_S,"toSinglePos",lua_worldserver_AxisPos_toSinglePos);
        tolua_function(tolua_S,"isValid",lua_worldserver_AxisPos_isValid);
        tolua_function(tolua_S,"getDirect",lua_worldserver_AxisPos_getDirect);
        tolua_function(tolua_S,"getX",lua_worldserver_AxisPos_getX);
        tolua_function(tolua_S,"getY",lua_worldserver_AxisPos_getY);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_AxisPos_cleanUp);
        tolua_function(tolua_S,"toString",lua_worldserver_AxisPos_toString);
        tolua_function(tolua_S,"setX",lua_worldserver_AxisPos_setX);
        tolua_function(tolua_S,"setY",lua_worldserver_AxisPos_setY);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(AxisPos).name();
    g_luaType[typeName] = "AxisPos";
    g_typeCast["AxisPos"] = "AxisPos";
    return 1;
}

static int lua_worldserver_AreaRect_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (AreaRect)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"AreaRect",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        AreaRect* self = (AreaRect*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_AreaRect(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"AreaRect");
    tolua_cclass(tolua_S,"AreaRect","AreaRect","",nullptr);

    tolua_beginmodule(tolua_S,"AreaRect");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(AreaRect).name();
    g_luaType[typeName] = "AreaRect";
    g_typeCast["AreaRect"] = "AreaRect";
    return 1;
}

static int lua_worldserver_MapPos_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MapPos)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MapPos",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MapPos* self = (MapPos*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MapPos(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MapPos");
    tolua_cclass(tolua_S,"MapPos","MapPos","",nullptr);

    tolua_beginmodule(tolua_S,"MapPos");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MapPos).name();
    g_luaType[typeName] = "MapPos";
    g_typeCast["MapPos"] = "MapPos";
    return 1;
}

int lua_worldserver_CRandGen_reset(lua_State* tolua_S)
{
    int argc = 0;
    CRandGen* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRandGen",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRandGen*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRandGen_reset'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->reset();
        return 0;
    }
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CRandGen:reset");
        if(!ok)
            return 0;
        cobj->reset(arg0);
        return 0;
    }

    gxError("CRandGen:reset has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandGen_reset'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRandGen_randBool(lua_State* tolua_S)
{
    int argc = 0;
    CRandGen* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRandGen",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRandGen*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRandGen_randBool'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->randBool();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CRandGen:randBool has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandGen_randBool'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRandGen_randOdds(lua_State* tolua_S)
{
    int argc = 0;
    CRandGen* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRandGen",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRandGen*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRandGen_randOdds'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned int arg0;
        unsigned int arg1;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CRandGen:randOdds");

        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CRandGen:randOdds");
        if(!ok)
            return 0;
        bool ret = cobj->randOdds(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CRandGen:randOdds has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandGen_randOdds'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRandGen_randUInt(lua_State* tolua_S)
{
    int argc = 0;
    CRandGen* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRandGen",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRandGen*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRandGen_randUInt'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->randUInt();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CRandGen:randUInt has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandGen_randUInt'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRandGen_randNumList(lua_State* tolua_S)
{
    int argc = 0;
    CRandGen* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRandGen",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRandGen*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRandGen_randNumList'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 5) 
    {
        std::vector<int, std::allocator<int> >* arg0;
        int arg1;
        int arg2;
        int arg3;
        int arg4;

        ok &= luaval_to_object<std::vector<int, std::allocator<int> >>(tolua_S, 2, "std::vector<int, std::allocator<int> >*", &arg0, "CRandGen:randNumList");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CRandGen:randNumList");

        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CRandGen:randNumList");

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CRandGen:randNumList");

        ok &= luaval_to_sint32(tolua_S, 6,(sint32*)&arg4, "CRandGen:randNumList");
        if(!ok)
            return 0;
        bool ret = cobj->randNumList(arg0, arg1, arg2, arg3, arg4);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 6) 
    {
        std::vector<int, std::allocator<int> >* arg0;
        int arg1;
        int arg2;
        int arg3;
        int arg4;
        bool arg5;

        ok &= luaval_to_object<std::vector<int, std::allocator<int> >>(tolua_S, 2, "std::vector<int, std::allocator<int> >*", &arg0, "CRandGen:randNumList");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CRandGen:randNumList");

        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CRandGen:randNumList");

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CRandGen:randNumList");

        ok &= luaval_to_sint32(tolua_S, 6,(sint32*)&arg4, "CRandGen:randNumList");

        ok &= luaval_to_boolean(tolua_S, 7,(bool*)&arg5, "CRandGen:randNumList");
        if(!ok)
            return 0;
        bool ret = cobj->randNumList(arg0, arg1, arg2, arg3, arg4, arg5);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CRandGen:randNumList has wrong number of arguments: {0}, was expecting {1} \n", argc, 5);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandGen_randNumList'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRandGen_randDouble(lua_State* tolua_S)
{
    int argc = 0;
    CRandGen* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRandGen",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRandGen*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRandGen_randDouble'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        double ret = cobj->randDouble();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CRandGen:randDouble has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandGen_randDouble'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRandGen_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CRandGen",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CRandGen* ret = CRandGen::GetPtr();
        object_to_luaval<CRandGen>(tolua_S, "CRandGen",(CRandGen*)ret);
        return 1;
    }
    gxError("CRandGen:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandGen_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CRandGen_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CRandGen* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CRandGen();
        tolua_pushusertype(tolua_S,(void*)cobj,"CRandGen");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CRandGen:CRandGen");
        if(!ok)
            return 0;
        cobj = new CRandGen(arg0);
        tolua_pushusertype(tolua_S,(void*)cobj,"CRandGen");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CRandGen:CRandGen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CRandGen_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CRandGen)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CRandGen",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CRandGen* self = (CRandGen*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CRandGen(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CRandGen");
    tolua_cclass(tolua_S,"CRandGen","CRandGen","CManualSingleton<CRandGen>",lua_worldserver_CRandGen_finalize);

    tolua_beginmodule(tolua_S,"CRandGen");
        tolua_function(tolua_S,"new",lua_worldserver_CRandGen_constructor);
        tolua_function(tolua_S,"reset",lua_worldserver_CRandGen_reset);
        tolua_function(tolua_S,"randBool",lua_worldserver_CRandGen_randBool);
        tolua_function(tolua_S,"randOdds",lua_worldserver_CRandGen_randOdds);
        tolua_function(tolua_S,"randUInt",lua_worldserver_CRandGen_randUInt);
        tolua_function(tolua_S,"randNumList",lua_worldserver_CRandGen_randNumList);
        tolua_function(tolua_S,"randDouble",lua_worldserver_CRandGen_randDouble);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CRandGen_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CRandGen).name();
    g_luaType[typeName] = "CRandGen";
    g_typeCast["CRandGen"] = "CRandGen";
    return 1;
}

int lua_worldserver_CGameMisc_GenSceneID(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 4)
    {
        unsigned short arg0;
        unsigned char arg1;
        unsigned short arg2;
        unsigned int arg3;
        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CGameMisc:GenSceneID");
        ok &= luaval_to_uint8(tolua_S, 3,(uint8*)&arg1, "CGameMisc:GenSceneID");
        ok &= luaval_to_uint16(tolua_S, 4, (uint16*)&arg2, "CGameMisc:GenSceneID");
        ok &= luaval_to_uint32(tolua_S, 5,(uint32*)&arg3, "CGameMisc:GenSceneID");
        if(!ok)
            return 0;
        unsigned long long ret = CGameMisc::GenSceneID(arg0, arg1, arg2, arg3);
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }
    gxError("CGameMisc:GenSceneID has wrong number of arguments: {0}, was expecting {1}\n ", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GenSceneID'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GenRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        unsigned long long arg0;
        unsigned short arg1;
        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CGameMisc:GenRoleUID");
        ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CGameMisc:GenRoleUID");
        if(!ok)
            return 0;
        unsigned long long ret = CGameMisc::GenRoleUID(arg0, arg1);
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }
    gxError("CGameMisc:GenRoleUID has wrong number of arguments: {0}, was expecting {1}\n ", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GenRoleUID'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_ToSeconds(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        char arg0;
        char arg1;
        char arg2;
        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "CGameMisc:ToSeconds");
        ok &= luaval_to_sint8(tolua_S, 3,(sint8*)&arg1, "CGameMisc:ToSeconds");
        ok &= luaval_to_sint8(tolua_S, 4,(sint8*)&arg2, "CGameMisc:ToSeconds");
        if(!ok)
            return 0;
        int ret = CGameMisc::ToSeconds(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:ToSeconds has wrong number of arguments: {0}, was expecting {1}\n ", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_ToSeconds'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_IsInValidRadius(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 5)
    {
        short arg0;
        short arg1;
        short arg2;
        short arg3;
        unsigned char arg4;
        ok &= luaval_to_sint16(tolua_S, 2,(sint16*)&arg0, "CGameMisc:IsInValidRadius");
        ok &= luaval_to_sint16(tolua_S, 3,(sint16*)&arg1, "CGameMisc:IsInValidRadius");
        ok &= luaval_to_sint16(tolua_S, 4,(sint16*)&arg2, "CGameMisc:IsInValidRadius");
        ok &= luaval_to_sint16(tolua_S, 5,(sint16*)&arg3, "CGameMisc:IsInValidRadius");
        ok &= luaval_to_uint8(tolua_S, 6,(uint8*)&arg4, "CGameMisc:IsInValidRadius");
        if(!ok)
            return 0;
        bool ret = CGameMisc::IsInValidRadius(arg0, arg1, arg2, arg3, arg4);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("CGameMisc:IsInValidRadius has wrong number of arguments: {0}, was expecting {1}\n ", argc, 5);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_IsInValidRadius'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_IsSameDay(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        unsigned int arg0;
        unsigned int arg1;
        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CGameMisc:IsSameDay");
        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CGameMisc:IsSameDay");
        if(!ok)
            return 0;
        bool ret = CGameMisc::IsSameDay(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("CGameMisc:IsSameDay has wrong number of arguments: {0}, was expecting {1}\n ", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_IsSameDay'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetDir(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        AxisPos arg0;
        AxisPos arg1;
        ok &= luaval_to_axispos(tolua_S, 2, "AxisPos", &arg0, "CGameMisc:GetDir");
        ok &= luaval_to_axispos(tolua_S, 3, "AxisPos", &arg1, "CGameMisc:GetDir");
        if(!ok)
            return 0;
        unsigned char ret = CGameMisc::GetDir(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:GetDir has wrong number of arguments: {0}, was expecting {1}\n ", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetDir'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetWorldIDByRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        unsigned long long arg0;
        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CGameMisc:GetWorldIDByRoleUID");
        if(!ok)
            return 0;
        unsigned short ret = CGameMisc::GetWorldIDByRoleUID(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:GetWorldIDByRoleUID has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetWorldIDByRoleUID'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetOpposeDir(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        unsigned char arg0;
        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CGameMisc:GetOpposeDir");
        if(!ok)
            return 0;
        unsigned char ret = CGameMisc::GetOpposeDir(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:GetOpposeDir has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetOpposeDir'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetMapType(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        unsigned long long arg0;
        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CGameMisc:GetMapType");
        if(!ok)
            return 0;
        unsigned char ret = CGameMisc::GetMapType(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:GetMapType has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetMapType'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_RandDir(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        unsigned char ret = CGameMisc::RandDir();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:RandDir has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_RandDir'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetMapServerID(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        unsigned long long arg0;
        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CGameMisc:GetMapServerID");
        if(!ok)
            return 0;
        unsigned short ret = CGameMisc::GetMapServerID(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:GetMapServerID has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetMapServerID'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetMapID(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        unsigned long long arg0;
        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CGameMisc:GetMapID");
        if(!ok)
            return 0;
        unsigned short ret = CGameMisc::GetMapID(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:GetMapID has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetMapID'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetDirForAngle(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        AxisPos arg0;
        AxisPos arg1;
        ok &= luaval_to_axispos(tolua_S, 2, "AxisPos", &arg0, "CGameMisc:GetDirForAngle");
        ok &= luaval_to_axispos(tolua_S, 3, "AxisPos", &arg1, "CGameMisc:GetDirForAngle");
        if(!ok)
            return 0;
        unsigned char ret = CGameMisc::GetDirForAngle(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:GetDirForAngle has wrong number of arguments: {0}, was expecting {1}\n ", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetDirForAngle'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_IsNormalMap(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        ESceneType arg0;
        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CGameMisc:IsNormalMap");
        if(!ok)
            return 0;
        bool ret = CGameMisc::IsNormalMap(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("CGameMisc:IsNormalMap has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_IsNormalMap'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_ToNumber(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        std::string arg0;
        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CGameMisc:ToNumber");
        if(!ok)
            return 0;
        int ret = CGameMisc::ToNumber(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:ToNumber has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_ToNumber'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetRoleUIDSeedByRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        unsigned long long arg0;
        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CGameMisc:GetRoleUIDSeedByRoleUID");
        if(!ok)
            return 0;
        unsigned long long ret = CGameMisc::GetRoleUIDSeedByRoleUID(arg0);
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }
    gxError("CGameMisc:GetRoleUIDSeedByRoleUID has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetRoleUIDSeedByRoleUID'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_MySqrt(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        AxisPos arg0;
        AxisPos arg1;
        ok &= luaval_to_axispos(tolua_S, 2, "AxisPos", &arg0, "CGameMisc:MySqrt");
        ok &= luaval_to_axispos(tolua_S, 3, "AxisPos", &arg1, "CGameMisc:MySqrt");
        if(!ok)
            return 0;
        double ret = CGameMisc::MySqrt(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:MySqrt has wrong number of arguments: {0}, was expecting {1}\n ", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_MySqrt'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_GetFourDir(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        AxisPos arg0;
        AxisPos arg1;
        ok &= luaval_to_axispos(tolua_S, 2, "AxisPos", &arg0, "CGameMisc:GetFourDir");
        ok &= luaval_to_axispos(tolua_S, 3, "AxisPos", &arg1, "CGameMisc:GetFourDir");
        if(!ok)
            return 0;
        unsigned char ret = CGameMisc::GetFourDir(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:GetFourDir has wrong number of arguments: {0}, was expecting {1}\n ", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_GetFourDir'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_ToLocalDay(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)) goto tolua_lerror;

    argc = lua_gettop(tolua_S)-1;

    do 
    {
        if (argc == 2)
        {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int ret = CGameMisc::ToLocalDay(arg0, arg1);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 3)
        {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int ret = CGameMisc::ToLocalDay(arg0, arg1, arg2);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 4)
        {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int arg3;
            ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int ret = CGameMisc::ToLocalDay(arg0, arg1, arg2, arg3);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    } while (0);
    ok  = true;
    do 
    {
        if (argc == 1)
        {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CGameMisc:ToLocalDay");
            if (!ok) { break; }
            int ret = CGameMisc::ToLocalDay(arg0);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    } while (0);
    ok  = true;

    gxError("CGameMisc:ToLocalDay has wrong number of arguments: {0}, was expecting {1}",argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_ToLocalDay'.",&tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_MyAngle(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 2)
    {
        AxisPos arg0;
        AxisPos arg1;
        ok &= luaval_to_axispos(tolua_S, 2, "AxisPos", &arg0, "CGameMisc:MyAngle");
        ok &= luaval_to_axispos(tolua_S, 3, "AxisPos", &arg1, "CGameMisc:MyAngle");
        if(!ok)
            return 0;
        double ret = CGameMisc::MyAngle(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }
    gxError("CGameMisc:MyAngle has wrong number of arguments: {0}, was expecting {1}\n ", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_MyAngle'.", &tolua_err);
    return 0;
}
int lua_worldserver_CGameMisc_IsDynamicMap(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CGameMisc",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 1)
    {
        ESceneType arg0;
        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CGameMisc:IsDynamicMap");
        if(!ok)
            return 0;
        bool ret = CGameMisc::IsDynamicMap(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("CGameMisc:IsDynamicMap has wrong number of arguments: {0}, was expecting {1}\n ", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameMisc_IsDynamicMap'.", &tolua_err);
    return 0;
}
static int lua_worldserver_CGameMisc_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CGameMisc)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CGameMisc",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CGameMisc* self = (CGameMisc*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CGameMisc(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CGameMisc");
    tolua_cclass(tolua_S,"CGameMisc","CGameMisc","",nullptr);

    tolua_beginmodule(tolua_S,"CGameMisc");
        tolua_function(tolua_S,"GenSceneID", lua_worldserver_CGameMisc_GenSceneID);
        tolua_function(tolua_S,"GenRoleUID", lua_worldserver_CGameMisc_GenRoleUID);
        tolua_function(tolua_S,"ToSeconds", lua_worldserver_CGameMisc_ToSeconds);
        tolua_function(tolua_S,"IsInValidRadius", lua_worldserver_CGameMisc_IsInValidRadius);
        tolua_function(tolua_S,"IsSameDay", lua_worldserver_CGameMisc_IsSameDay);
        tolua_function(tolua_S,"GetDir", lua_worldserver_CGameMisc_GetDir);
        tolua_function(tolua_S,"GetWorldIDByRoleUID", lua_worldserver_CGameMisc_GetWorldIDByRoleUID);
        tolua_function(tolua_S,"GetOpposeDir", lua_worldserver_CGameMisc_GetOpposeDir);
        tolua_function(tolua_S,"GetMapType", lua_worldserver_CGameMisc_GetMapType);
        tolua_function(tolua_S,"RandDir", lua_worldserver_CGameMisc_RandDir);
        tolua_function(tolua_S,"GetMapServerID", lua_worldserver_CGameMisc_GetMapServerID);
        tolua_function(tolua_S,"GetMapID", lua_worldserver_CGameMisc_GetMapID);
        tolua_function(tolua_S,"GetDirForAngle", lua_worldserver_CGameMisc_GetDirForAngle);
        tolua_function(tolua_S,"IsNormalMap", lua_worldserver_CGameMisc_IsNormalMap);
        tolua_function(tolua_S,"ToNumber", lua_worldserver_CGameMisc_ToNumber);
        tolua_function(tolua_S,"GetRoleUIDSeedByRoleUID", lua_worldserver_CGameMisc_GetRoleUIDSeedByRoleUID);
        tolua_function(tolua_S,"MySqrt", lua_worldserver_CGameMisc_MySqrt);
        tolua_function(tolua_S,"GetFourDir", lua_worldserver_CGameMisc_GetFourDir);
        tolua_function(tolua_S,"ToLocalDay", lua_worldserver_CGameMisc_ToLocalDay);
        tolua_function(tolua_S,"MyAngle", lua_worldserver_CGameMisc_MyAngle);
        tolua_function(tolua_S,"IsDynamicMap", lua_worldserver_CGameMisc_IsDynamicMap);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CGameMisc).name();
    g_luaType[typeName] = "CGameMisc";
    g_typeCast["CGameMisc"] = "CGameMisc";
    return 1;
}

int lua_worldserver_IAttrBase_setStrength(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setStrength'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setStrength");
        if(!ok)
            return 0;
        cobj->setStrength(arg0);
        return 0;
    }

    gxError("IAttrBase:setStrength has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setStrength'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addMaxHp(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addMaxHp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addMaxHp");
        if(!ok)
            return 0;
        int ret = cobj->addMaxHp(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addMaxHp has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addMaxHp'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setDamage(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setDamage'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setDamage");
        if(!ok)
            return 0;
        cobj->setDamage(arg0);
        return 0;
    }

    gxError("IAttrBase:setDamage has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setDamage'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addPhysicDefense(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addPhysicDefense'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addPhysicDefense");
        if(!ok)
            return 0;
        int ret = cobj->addPhysicDefense(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addPhysicDefense has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addPhysicDefense'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addPower(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addPower'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addPower");
        if(!ok)
            return 0;
        int ret = cobj->addPower(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addPower has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addPower'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getDamageReduce(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getDamageReduce'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getDamageReduce();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getDamageReduce has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getDamageReduce'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addDamageReduce(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addDamageReduce'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addDamageReduce");
        if(!ok)
            return 0;
        int ret = cobj->addDamageReduce(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addDamageReduce has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addDamageReduce'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getStrength(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getStrength'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getStrength();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getStrength has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getStrength'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setHp(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setHp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setHp");
        if(!ok)
            return 0;
        cobj->setHp(arg0);
        return 0;
    }

    gxError("IAttrBase:setHp has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setHp'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getMoveSpeed(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getMoveSpeed'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getMoveSpeed();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getMoveSpeed has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getMoveSpeed'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addDodge(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addDodge'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addDodge");
        if(!ok)
            return 0;
        int ret = cobj->addDodge(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addDodge has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addDodge'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addWisdom(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addWisdom'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addWisdom");
        if(!ok)
            return 0;
        int ret = cobj->addWisdom(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addWisdom has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addWisdom'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getCrit(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getCrit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getCrit();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getCrit has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getCrit'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setWisdom(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setWisdom'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setWisdom");
        if(!ok)
            return 0;
        cobj->setWisdom(arg0);
        return 0;
    }

    gxError("IAttrBase:setWisdom has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setWisdom'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getPhysicDefense(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getPhysicDefense'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getPhysicDefense();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getPhysicDefense has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getPhysicDefense'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addSkillAttack(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addSkillAttack'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addSkillAttack");
        if(!ok)
            return 0;
        int ret = cobj->addSkillAttack(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addSkillAttack has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addSkillAttack'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setPower(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setPower'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setPower");
        if(!ok)
            return 0;
        cobj->setPower(arg0);
        return 0;
    }

    gxError("IAttrBase:setPower has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setPower'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setDodge(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setDodge'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setDodge");
        if(!ok)
            return 0;
        cobj->setDodge(arg0);
        return 0;
    }

    gxError("IAttrBase:setDodge has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setDodge'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setAgility(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setAgility'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setAgility");
        if(!ok)
            return 0;
        cobj->setAgility(arg0);
        return 0;
    }

    gxError("IAttrBase:setAgility has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setAgility'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getPhysicAttck(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getPhysicAttck'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getPhysicAttck();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getPhysicAttck has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getPhysicAttck'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getWisdom(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getWisdom'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getWisdom();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getWisdom has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getWisdom'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getMp(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getMp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getMp();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getMp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getMp'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addAgility(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addAgility'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addAgility");
        if(!ok)
            return 0;
        int ret = cobj->addAgility(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addAgility has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addAgility'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setPhysicDefense(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setPhysicDefense'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setPhysicDefense");
        if(!ok)
            return 0;
        cobj->setPhysicDefense(arg0);
        return 0;
    }

    gxError("IAttrBase:setPhysicDefense has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setPhysicDefense'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addCrit(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addCrit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addCrit");
        if(!ok)
            return 0;
        int ret = cobj->addCrit(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addCrit has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addCrit'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getDodge(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getDodge'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getDodge();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getDodge has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getDodge'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setValue(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        char arg0;
        int arg1;

        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "IAttrBase:setValue");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "IAttrBase:setValue");
        if(!ok)
            return 0;
        cobj->setValue(arg0, arg1);
        return 0;
    }

    gxError("IAttrBase:setValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addEnergy(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addEnergy'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addEnergy");
        if(!ok)
            return 0;
        int ret = cobj->addEnergy(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addEnergy has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addEnergy'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getMaxHp(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getMaxHp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getMaxHp();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getMaxHp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getMaxHp'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setMp(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setMp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setMp");
        if(!ok)
            return 0;
        cobj->setMp(arg0);
        return 0;
    }

    gxError("IAttrBase:setMp has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setMp'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setMaxEnergy(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setMaxEnergy'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setMaxEnergy");
        if(!ok)
            return 0;
        cobj->setMaxEnergy(arg0);
        return 0;
    }

    gxError("IAttrBase:setMaxEnergy has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setMaxEnergy'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getDamage(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getDamage'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getDamage();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getDamage has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getDamage'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addStrength(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addStrength'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addStrength");
        if(!ok)
            return 0;
        int ret = cobj->addStrength(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addStrength has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addStrength'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setSkillAttack(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setSkillAttack'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setSkillAttack");
        if(!ok)
            return 0;
        cobj->setSkillAttack(arg0);
        return 0;
    }

    gxError("IAttrBase:setSkillAttack has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setSkillAttack'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setMaxHp(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setMaxHp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setMaxHp");
        if(!ok)
            return 0;
        cobj->setMaxHp(arg0);
        return 0;
    }

    gxError("IAttrBase:setMaxHp has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setMaxHp'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setPhysicAttck(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setPhysicAttck'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setPhysicAttck");
        if(!ok)
            return 0;
        cobj->setPhysicAttck(arg0);
        return 0;
    }

    gxError("IAttrBase:setPhysicAttck has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setPhysicAttck'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getPower(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getPower'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getPower();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getPower has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getPower'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getAgility(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getAgility'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getAgility();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getAgility has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getAgility'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addHp(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addHp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addHp");
        if(!ok)
            return 0;
        int ret = cobj->addHp(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addHp has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addHp'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getValue(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        char arg0;

        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "IAttrBase:getValue");
        if(!ok)
            return 0;
        int ret = cobj->getValue(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getMaxEnergy(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getMaxEnergy'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getMaxEnergy();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getMaxEnergy has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getMaxEnergy'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setDamageReduce(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setDamageReduce'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setDamageReduce");
        if(!ok)
            return 0;
        cobj->setDamageReduce(arg0);
        return 0;
    }

    gxError("IAttrBase:setDamageReduce has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setDamageReduce'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addDamage(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addDamage'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addDamage");
        if(!ok)
            return 0;
        int ret = cobj->addDamage(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addDamage has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addDamage'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addMaxEnergy(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addMaxEnergy'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addMaxEnergy");
        if(!ok)
            return 0;
        int ret = cobj->addMaxEnergy(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addMaxEnergy has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addMaxEnergy'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addPhysicAttck(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addPhysicAttck'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addPhysicAttck");
        if(!ok)
            return 0;
        int ret = cobj->addPhysicAttck(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addPhysicAttck has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addPhysicAttck'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addMoveSpeed(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addMoveSpeed'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:addMoveSpeed");
        if(!ok)
            return 0;
        int ret = cobj->addMoveSpeed(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addMoveSpeed has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addMoveSpeed'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setMoveSpeed(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setMoveSpeed'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setMoveSpeed");
        if(!ok)
            return 0;
        cobj->setMoveSpeed(arg0);
        return 0;
    }

    gxError("IAttrBase:setMoveSpeed has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setMoveSpeed'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_addValue(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_addValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        char arg0;
        int arg1;

        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "IAttrBase:addValue");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "IAttrBase:addValue");
        if(!ok)
            return 0;
        int ret = cobj->addValue(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:addValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_addValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getHp(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getHp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getHp();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getHp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getHp'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_setCrit(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_setCrit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IAttrBase:setCrit");
        if(!ok)
            return 0;
        cobj->setCrit(arg0);
        return 0;
    }

    gxError("IAttrBase:setCrit has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_setCrit'.",&tolua_err);
	return 0;
}
int lua_worldserver_IAttrBase_getSkillAttack(lua_State* tolua_S)
{
    int argc = 0;
    IAttrBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (IAttrBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IAttrBase_getSkillAttack'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getSkillAttack();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("IAttrBase:getSkillAttack has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IAttrBase_getSkillAttack'.",&tolua_err);
	return 0;
}
static int lua_worldserver_IAttrBase_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (IAttrBase)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"IAttrBase",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        IAttrBase* self = (IAttrBase*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_IAttrBase(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"IAttrBase");
    tolua_cclass(tolua_S,"IAttrBase","IAttrBase","",nullptr);

    tolua_beginmodule(tolua_S,"IAttrBase");
        tolua_function(tolua_S,"setStrength",lua_worldserver_IAttrBase_setStrength);
        tolua_function(tolua_S,"addMaxHp",lua_worldserver_IAttrBase_addMaxHp);
        tolua_function(tolua_S,"setDamage",lua_worldserver_IAttrBase_setDamage);
        tolua_function(tolua_S,"addPhysicDefense",lua_worldserver_IAttrBase_addPhysicDefense);
        tolua_function(tolua_S,"addPower",lua_worldserver_IAttrBase_addPower);
        tolua_function(tolua_S,"getDamageReduce",lua_worldserver_IAttrBase_getDamageReduce);
        tolua_function(tolua_S,"addDamageReduce",lua_worldserver_IAttrBase_addDamageReduce);
        tolua_function(tolua_S,"getStrength",lua_worldserver_IAttrBase_getStrength);
        tolua_function(tolua_S,"setHp",lua_worldserver_IAttrBase_setHp);
        tolua_function(tolua_S,"getMoveSpeed",lua_worldserver_IAttrBase_getMoveSpeed);
        tolua_function(tolua_S,"addDodge",lua_worldserver_IAttrBase_addDodge);
        tolua_function(tolua_S,"addWisdom",lua_worldserver_IAttrBase_addWisdom);
        tolua_function(tolua_S,"getCrit",lua_worldserver_IAttrBase_getCrit);
        tolua_function(tolua_S,"setWisdom",lua_worldserver_IAttrBase_setWisdom);
        tolua_function(tolua_S,"getPhysicDefense",lua_worldserver_IAttrBase_getPhysicDefense);
        tolua_function(tolua_S,"addSkillAttack",lua_worldserver_IAttrBase_addSkillAttack);
        tolua_function(tolua_S,"setPower",lua_worldserver_IAttrBase_setPower);
        tolua_function(tolua_S,"setDodge",lua_worldserver_IAttrBase_setDodge);
        tolua_function(tolua_S,"setAgility",lua_worldserver_IAttrBase_setAgility);
        tolua_function(tolua_S,"getPhysicAttck",lua_worldserver_IAttrBase_getPhysicAttck);
        tolua_function(tolua_S,"getWisdom",lua_worldserver_IAttrBase_getWisdom);
        tolua_function(tolua_S,"getMp",lua_worldserver_IAttrBase_getMp);
        tolua_function(tolua_S,"addAgility",lua_worldserver_IAttrBase_addAgility);
        tolua_function(tolua_S,"setPhysicDefense",lua_worldserver_IAttrBase_setPhysicDefense);
        tolua_function(tolua_S,"addCrit",lua_worldserver_IAttrBase_addCrit);
        tolua_function(tolua_S,"getDodge",lua_worldserver_IAttrBase_getDodge);
        tolua_function(tolua_S,"setValue",lua_worldserver_IAttrBase_setValue);
        tolua_function(tolua_S,"addEnergy",lua_worldserver_IAttrBase_addEnergy);
        tolua_function(tolua_S,"getMaxHp",lua_worldserver_IAttrBase_getMaxHp);
        tolua_function(tolua_S,"setMp",lua_worldserver_IAttrBase_setMp);
        tolua_function(tolua_S,"setMaxEnergy",lua_worldserver_IAttrBase_setMaxEnergy);
        tolua_function(tolua_S,"getDamage",lua_worldserver_IAttrBase_getDamage);
        tolua_function(tolua_S,"addStrength",lua_worldserver_IAttrBase_addStrength);
        tolua_function(tolua_S,"setSkillAttack",lua_worldserver_IAttrBase_setSkillAttack);
        tolua_function(tolua_S,"setMaxHp",lua_worldserver_IAttrBase_setMaxHp);
        tolua_function(tolua_S,"setPhysicAttck",lua_worldserver_IAttrBase_setPhysicAttck);
        tolua_function(tolua_S,"getPower",lua_worldserver_IAttrBase_getPower);
        tolua_function(tolua_S,"getAgility",lua_worldserver_IAttrBase_getAgility);
        tolua_function(tolua_S,"addHp",lua_worldserver_IAttrBase_addHp);
        tolua_function(tolua_S,"getValue",lua_worldserver_IAttrBase_getValue);
        tolua_function(tolua_S,"getMaxEnergy",lua_worldserver_IAttrBase_getMaxEnergy);
        tolua_function(tolua_S,"setDamageReduce",lua_worldserver_IAttrBase_setDamageReduce);
        tolua_function(tolua_S,"addDamage",lua_worldserver_IAttrBase_addDamage);
        tolua_function(tolua_S,"addMaxEnergy",lua_worldserver_IAttrBase_addMaxEnergy);
        tolua_function(tolua_S,"addPhysicAttck",lua_worldserver_IAttrBase_addPhysicAttck);
        tolua_function(tolua_S,"addMoveSpeed",lua_worldserver_IAttrBase_addMoveSpeed);
        tolua_function(tolua_S,"setMoveSpeed",lua_worldserver_IAttrBase_setMoveSpeed);
        tolua_function(tolua_S,"addValue",lua_worldserver_IAttrBase_addValue);
        tolua_function(tolua_S,"getHp",lua_worldserver_IAttrBase_getHp);
        tolua_function(tolua_S,"setCrit",lua_worldserver_IAttrBase_setCrit);
        tolua_function(tolua_S,"getSkillAttack",lua_worldserver_IAttrBase_getSkillAttack);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(IAttrBase).name();
    g_luaType[typeName] = "IAttrBase";
    g_typeCast["IAttrBase"] = "IAttrBase";
    return 1;
}

int lua_worldserver_AddAttr_setAddType(lua_State* tolua_S)
{
    int argc = 0;
    AddAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AddAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (AddAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AddAttr_setAddType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        char arg0;

        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "AddAttr:setAddType");
        if(!ok)
            return 0;
        cobj->setAddType(arg0);
        return 0;
    }

    gxError("AddAttr:setAddType has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AddAttr_setAddType'.",&tolua_err);
	return 0;
}
int lua_worldserver_AddAttr_isValid(lua_State* tolua_S)
{
    int argc = 0;
    AddAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AddAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (AddAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AddAttr_isValid'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isValid();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("AddAttr:isValid has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AddAttr_isValid'.",&tolua_err);
	return 0;
}
int lua_worldserver_AddAttr_setAttrValue(lua_State* tolua_S)
{
    int argc = 0;
    AddAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AddAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (AddAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AddAttr_setAttrValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "AddAttr:setAttrValue");
        if(!ok)
            return 0;
        cobj->setAttrValue(arg0);
        return 0;
    }

    gxError("AddAttr:setAttrValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AddAttr_setAttrValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_AddAttr_getAttrValue(lua_State* tolua_S)
{
    int argc = 0;
    AddAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AddAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (AddAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AddAttr_getAttrValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getAttrValue();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("AddAttr:getAttrValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AddAttr_getAttrValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_AddAttr_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    AddAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AddAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (AddAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AddAttr_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("AddAttr:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AddAttr_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_AddAttr_isRate(lua_State* tolua_S)
{
    int argc = 0;
    AddAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AddAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (AddAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AddAttr_isRate'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isRate();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("AddAttr:isRate has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AddAttr_isRate'.",&tolua_err);
	return 0;
}
int lua_worldserver_AddAttr_getAddType(lua_State* tolua_S)
{
    int argc = 0;
    AddAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AddAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (AddAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AddAttr_getAddType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        char ret = cobj->getAddType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("AddAttr:getAddType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AddAttr_getAddType'.",&tolua_err);
	return 0;
}
int lua_worldserver_AddAttr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    AddAttr* cobj = nullptr;
    bool ok  = true;
   
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            unsigned char arg0;
            ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "AddAttr:AddAttr");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "AddAttr:AddAttr");

            if (!ok) { break; }
            cobj = new AddAttr(arg0, arg1);
            tolua_pushusertype(tolua_S,(void*)cobj,"AddAttr");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            cobj = new AddAttr();
            tolua_pushusertype(tolua_S,(void*)cobj,"AddAttr");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("AddAttr:AddAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_AddAttr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (AddAttr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"AddAttr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        AddAttr* self = (AddAttr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_AddAttr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"AddAttr");
    tolua_cclass(tolua_S,"AddAttr","AddAttr","",lua_worldserver_AddAttr_finalize);

    tolua_beginmodule(tolua_S,"AddAttr");
        tolua_function(tolua_S,"new",lua_worldserver_AddAttr_constructor);
        tolua_function(tolua_S,"setAddType",lua_worldserver_AddAttr_setAddType);
        tolua_function(tolua_S,"isValid",lua_worldserver_AddAttr_isValid);
        tolua_function(tolua_S,"setAttrValue",lua_worldserver_AddAttr_setAttrValue);
        tolua_function(tolua_S,"getAttrValue",lua_worldserver_AddAttr_getAttrValue);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_AddAttr_cleanUp);
        tolua_function(tolua_S,"isRate",lua_worldserver_AddAttr_isRate);
        tolua_function(tolua_S,"getAddType",lua_worldserver_AddAttr_getAddType);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(AddAttr).name();
    g_luaType[typeName] = "AddAttr";
    g_typeCast["AddAttr"] = "AddAttr";
    return 1;
}

int lua_worldserver_Attr_setAttrType(lua_State* tolua_S)
{
    int argc = 0;
    Attr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"Attr",0,&tolua_err)) goto tolua_lerror;
    cobj = (Attr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_Attr_setAttrType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        char arg0;

        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "Attr:setAttrType");
        if(!ok)
            return 0;
        cobj->setAttrType(arg0);
        return 0;
    }

    gxError("Attr:setAttrType has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_Attr_setAttrType'.",&tolua_err);
	return 0;
}
int lua_worldserver_Attr_getAttrType(lua_State* tolua_S)
{
    int argc = 0;
    Attr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"Attr",0,&tolua_err)) goto tolua_lerror;
    cobj = (Attr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_Attr_getAttrType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        char ret = cobj->getAttrType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("Attr:getAttrType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_Attr_getAttrType'.",&tolua_err);
	return 0;
}
int lua_worldserver_Attr_isValid(lua_State* tolua_S)
{
    int argc = 0;
    Attr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"Attr",0,&tolua_err)) goto tolua_lerror;
    cobj = (Attr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_Attr_isValid'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isValid();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("Attr:isValid has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_Attr_isValid'.",&tolua_err);
	return 0;
}
int lua_worldserver_Attr_setAttrValue(lua_State* tolua_S)
{
    int argc = 0;
    Attr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"Attr",0,&tolua_err)) goto tolua_lerror;
    cobj = (Attr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_Attr_setAttrValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "Attr:setAttrValue");
        if(!ok)
            return 0;
        cobj->setAttrValue(arg0);
        return 0;
    }

    gxError("Attr:setAttrValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_Attr_setAttrValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_Attr_getAttrValue(lua_State* tolua_S)
{
    int argc = 0;
    Attr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"Attr",0,&tolua_err)) goto tolua_lerror;
    cobj = (Attr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_Attr_getAttrValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getAttrValue();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("Attr:getAttrValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_Attr_getAttrValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_Attr_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    Attr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"Attr",0,&tolua_err)) goto tolua_lerror;
    cobj = (Attr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_Attr_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }
    if (argc == 1) 
    {
        EAttributes arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "Attr:cleanUp");
        if(!ok)
            return 0;
        cobj->cleanUp(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        EAttributes arg0;
        int arg1;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "Attr:cleanUp");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "Attr:cleanUp");
        if(!ok)
            return 0;
        cobj->cleanUp(arg0, arg1);
        return 0;
    }

    gxError("Attr:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_Attr_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_Attr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    Attr* cobj = nullptr;
    bool ok  = true;
   
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            char arg0;
            ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "Attr:Attr");

            if (!ok) { break; }
            int arg1;
            ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "Attr:Attr");

            if (!ok) { break; }
            cobj = new Attr(arg0, arg1);
            tolua_pushusertype(tolua_S,(void*)cobj,"Attr");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            cobj = new Attr();
            tolua_pushusertype(tolua_S,(void*)cobj,"Attr");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("Attr:Attr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_Attr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (Attr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"Attr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        Attr* self = (Attr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_Attr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"Attr");
    tolua_cclass(tolua_S,"Attr","Attr","",lua_worldserver_Attr_finalize);

    tolua_beginmodule(tolua_S,"Attr");
        tolua_function(tolua_S,"new",lua_worldserver_Attr_constructor);
        tolua_function(tolua_S,"setAttrType",lua_worldserver_Attr_setAttrType);
        tolua_function(tolua_S,"getAttrType",lua_worldserver_Attr_getAttrType);
        tolua_function(tolua_S,"isValid",lua_worldserver_Attr_isValid);
        tolua_function(tolua_S,"setAttrValue",lua_worldserver_Attr_setAttrValue);
        tolua_function(tolua_S,"getAttrValue",lua_worldserver_Attr_getAttrValue);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_Attr_cleanUp);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(Attr).name();
    g_luaType[typeName] = "Attr";
    g_typeCast["Attr"] = "Attr";
    return 1;
}

int lua_worldserver_ExtendAttr_getValueType(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (ExtendAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ExtendAttr_getValueType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned char ret = cobj->getValueType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("ExtendAttr:getValueType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ExtendAttr_getValueType'.",&tolua_err);
	return 0;
}
int lua_worldserver_ExtendAttr_setAttrType(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (ExtendAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ExtendAttr_setAttrType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        char arg0;

        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "ExtendAttr:setAttrType");
        if(!ok)
            return 0;
        cobj->setAttrType(arg0);
        return 0;
    }

    gxError("ExtendAttr:setAttrType has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ExtendAttr_setAttrType'.",&tolua_err);
	return 0;
}
int lua_worldserver_ExtendAttr_getAttrType(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (ExtendAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ExtendAttr_getAttrType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        char ret = cobj->getAttrType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("ExtendAttr:getAttrType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ExtendAttr_getAttrType'.",&tolua_err);
	return 0;
}
int lua_worldserver_ExtendAttr_setAttrValue(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (ExtendAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ExtendAttr_setAttrValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "ExtendAttr:setAttrValue");
        if(!ok)
            return 0;
        cobj->setAttrValue(arg0);
        return 0;
    }

    gxError("ExtendAttr:setAttrValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ExtendAttr_setAttrValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_ExtendAttr_setValueType(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (ExtendAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ExtendAttr_setValueType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "ExtendAttr:setValueType");
        if(!ok)
            return 0;
        cobj->setValueType(arg0);
        return 0;
    }

    gxError("ExtendAttr:setValueType has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ExtendAttr_setValueType'.",&tolua_err);
	return 0;
}
int lua_worldserver_ExtendAttr_getAttrValue(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (ExtendAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ExtendAttr_getAttrValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getAttrValue();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("ExtendAttr:getAttrValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ExtendAttr_getAttrValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_ExtendAttr_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (ExtendAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ExtendAttr_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("ExtendAttr:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ExtendAttr_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_ExtendAttr_isRate(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (ExtendAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ExtendAttr_isRate'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isRate();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("ExtendAttr:isRate has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ExtendAttr_isRate'.",&tolua_err);
	return 0;
}
int lua_worldserver_ExtendAttr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ExtendAttr* cobj = nullptr;
    bool ok  = true;
   
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 3) {
            char arg0;
            ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "ExtendAttr:ExtendAttr");

            if (!ok) { break; }
            unsigned char arg1;
            ok &= luaval_to_uint8(tolua_S, 3,(uint8*)&arg1, "ExtendAttr:ExtendAttr");

            if (!ok) { break; }
            int arg2;
            ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "ExtendAttr:ExtendAttr");

            if (!ok) { break; }
            cobj = new ExtendAttr(arg0, arg1, arg2);
            tolua_pushusertype(tolua_S,(void*)cobj,"ExtendAttr");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            cobj = new ExtendAttr();
            tolua_pushusertype(tolua_S,(void*)cobj,"ExtendAttr");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("ExtendAttr:ExtendAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_ExtendAttr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (ExtendAttr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"ExtendAttr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        ExtendAttr* self = (ExtendAttr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_ExtendAttr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ExtendAttr");
    tolua_cclass(tolua_S,"ExtendAttr","ExtendAttr","",lua_worldserver_ExtendAttr_finalize);

    tolua_beginmodule(tolua_S,"ExtendAttr");
        tolua_function(tolua_S,"new",lua_worldserver_ExtendAttr_constructor);
        tolua_function(tolua_S,"getValueType",lua_worldserver_ExtendAttr_getValueType);
        tolua_function(tolua_S,"setAttrType",lua_worldserver_ExtendAttr_setAttrType);
        tolua_function(tolua_S,"getAttrType",lua_worldserver_ExtendAttr_getAttrType);
        tolua_function(tolua_S,"setAttrValue",lua_worldserver_ExtendAttr_setAttrValue);
        tolua_function(tolua_S,"setValueType",lua_worldserver_ExtendAttr_setValueType);
        tolua_function(tolua_S,"getAttrValue",lua_worldserver_ExtendAttr_getAttrValue);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_ExtendAttr_cleanUp);
        tolua_function(tolua_S,"isRate",lua_worldserver_ExtendAttr_isRate);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ExtendAttr).name();
    g_luaType[typeName] = "ExtendAttr";
    g_typeCast["ExtendAttr"] = "ExtendAttr";
    return 1;
}

int lua_worldserver_CActionBan_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    CActionBan* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CActionBan",0,&tolua_err)) goto tolua_lerror;
    cobj = (CActionBan*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CActionBan_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("CActionBan:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CActionBan_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_CActionBan_reset(lua_State* tolua_S)
{
    int argc = 0;
    CActionBan* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CActionBan",0,&tolua_err)) goto tolua_lerror;
    cobj = (CActionBan*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CActionBan_reset'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->reset();
        return 0;
    }

    gxError("CActionBan:reset has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CActionBan_reset'.",&tolua_err);
	return 0;
}
int lua_worldserver_CActionBan_getState(lua_State* tolua_S)
{
    int argc = 0;
    CActionBan* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CActionBan",0,&tolua_err)) goto tolua_lerror;
    cobj = (CActionBan*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CActionBan_getState'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            char arg0;
            ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "CActionBan:getState");

            if (!ok) { break; }
            bool ret = cobj->getState(arg0);
            tolua_pushboolean(tolua_S,(bool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            const GXMISC::CBit16* ret = cobj->getState();
            object_to_luaval<GXMISC::CBit16>(tolua_S, "CBit16",(GXMISC::CBit16*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CActionBan:getState has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CActionBan_getState'.",&tolua_err);
    return 0;
}
int lua_worldserver_CActionBan_setValue(lua_State* tolua_S)
{
    int argc = 0;
    CActionBan* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CActionBan",0,&tolua_err)) goto tolua_lerror;
    cobj = (CActionBan*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CActionBan_setValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        char arg0;
        bool arg1;

        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "CActionBan:setValue");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CActionBan:setValue");
        if(!ok)
            return 0;
        cobj->setValue(arg0, arg1);
        return 0;
    }

    gxError("CActionBan:setValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CActionBan_setValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_CActionBan_getValue(lua_State* tolua_S)
{
    int argc = 0;
    CActionBan* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CActionBan",0,&tolua_err)) goto tolua_lerror;
    cobj = (CActionBan*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CActionBan_getValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        char arg0;

        ok &= luaval_to_sint8(tolua_S, 2,(sint8*)&arg0, "CActionBan:getValue");
        if(!ok)
            return 0;
        bool ret = cobj->getValue(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CActionBan:getValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CActionBan_getValue'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CActionBan_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CActionBan)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CActionBan",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CActionBan* self = (CActionBan*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CActionBan(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CActionBan");
    tolua_cclass(tolua_S,"CActionBan","CActionBan","",nullptr);

    tolua_beginmodule(tolua_S,"CActionBan");
        tolua_function(tolua_S,"cleanUp",lua_worldserver_CActionBan_cleanUp);
        tolua_function(tolua_S,"reset",lua_worldserver_CActionBan_reset);
        tolua_function(tolua_S,"getState",lua_worldserver_CActionBan_getState);
        tolua_function(tolua_S,"setValue",lua_worldserver_CActionBan_setValue);
        tolua_function(tolua_S,"getValue",lua_worldserver_CActionBan_getValue);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CActionBan).name();
    g_luaType[typeName] = "CActionBan";
    g_typeCast["CActionBan"] = "CActionBan";
    return 1;
}

int lua_worldserver_SkillAttr_setValue(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_setValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "SkillAttr:setValue");
        if(!ok)
            return 0;
        cobj->setValue(arg0);
        return 0;
    }

    gxError("SkillAttr:setValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_setValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_getRate(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_getRate'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getRate();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("SkillAttr:getRate has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_getRate'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_getValue(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_getValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getValue();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("SkillAttr:getValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_getValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_setRate(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_setRate'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "SkillAttr:setRate");
        if(!ok)
            return 0;
        cobj->setRate(arg0);
        return 0;
    }

    gxError("SkillAttr:setRate has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_setRate'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_add(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_add'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const SkillAttr* arg0;

        ok &= luaval_to_object<const SkillAttr>(tolua_S, 2, "SkillAttr", &arg0, "SkillAttr:add");
        if(!ok)
            return 0;
        cobj->add(arg0);
        return 0;
    }

    gxError("SkillAttr:add has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_add'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("SkillAttr:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_addRate(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_addRate'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "SkillAttr:addRate");
        if(!ok)
            return 0;
        int ret = cobj->addRate(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("SkillAttr:addRate has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_addRate'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_addValue(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_addValue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "SkillAttr:addValue");
        if(!ok)
            return 0;
        int ret = cobj->addValue(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("SkillAttr:addValue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_addValue'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_isEmpty(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (SkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_SkillAttr_isEmpty'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isEmpty();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("SkillAttr:isEmpty has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_SkillAttr_isEmpty'.",&tolua_err);
	return 0;
}
int lua_worldserver_SkillAttr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    SkillAttr* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new SkillAttr();
        tolua_pushusertype(tolua_S,(void*)cobj,"SkillAttr");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("SkillAttr:SkillAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_SkillAttr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (SkillAttr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"SkillAttr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        SkillAttr* self = (SkillAttr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_SkillAttr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"SkillAttr");
    tolua_cclass(tolua_S,"SkillAttr","SkillAttr","",lua_worldserver_SkillAttr_finalize);

    tolua_beginmodule(tolua_S,"SkillAttr");
        tolua_function(tolua_S,"new",lua_worldserver_SkillAttr_constructor);
        tolua_function(tolua_S,"setValue",lua_worldserver_SkillAttr_setValue);
        tolua_function(tolua_S,"getRate",lua_worldserver_SkillAttr_getRate);
        tolua_function(tolua_S,"getValue",lua_worldserver_SkillAttr_getValue);
        tolua_function(tolua_S,"setRate",lua_worldserver_SkillAttr_setRate);
        tolua_function(tolua_S,"add",lua_worldserver_SkillAttr_add);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_SkillAttr_cleanUp);
        tolua_function(tolua_S,"addRate",lua_worldserver_SkillAttr_addRate);
        tolua_function(tolua_S,"addValue",lua_worldserver_SkillAttr_addValue);
        tolua_function(tolua_S,"isEmpty",lua_worldserver_SkillAttr_isEmpty);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(SkillAttr).name();
    g_luaType[typeName] = "SkillAttr";
    g_typeCast["SkillAttr"] = "SkillAttr";
    return 1;
}

int lua_worldserver_CSkillAttr_addFixCritHurt(lua_State* tolua_S)
{
    int argc = 0;
    CSkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSkillAttr_addFixCritHurt'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned char arg0;
        int arg1;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CSkillAttr:addFixCritHurt");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CSkillAttr:addFixCritHurt");
        if(!ok)
            return 0;
        int ret = cobj->addFixCritHurt(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CSkillAttr:addFixCritHurt has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSkillAttr_addFixCritHurt'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSkillAttr_getFixCritHurt(lua_State* tolua_S)
{
    int argc = 0;
    CSkillAttr* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CSkillAttr_getFixCritHurt'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 0) {
            const SkillAttr* ret = cobj->getFixCritHurt();
            object_to_luaval<SkillAttr>(tolua_S, "SkillAttr",(SkillAttr*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned char arg0;
            ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CSkillAttr:getFixCritHurt");

            if (!ok) { break; }
            int ret = cobj->getFixCritHurt(arg0);
            tolua_pushnumber(tolua_S,(lua_Number)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CSkillAttr:getFixCritHurt has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSkillAttr_getFixCritHurt'.",&tolua_err);
    return 0;
}
int lua_worldserver_CSkillAttr_getAppendCritRate(lua_State* tolua_S)
{
    int argc = 0;
    CSkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSkillAttr_getAppendCritRate'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getAppendCritRate();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CSkillAttr:getAppendCritRate has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSkillAttr_getAppendCritRate'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSkillAttr_setFixCritHurt(lua_State* tolua_S)
{
    int argc = 0;
    CSkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSkillAttr_setFixCritHurt'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned char arg0;
        int arg1;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CSkillAttr:setFixCritHurt");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CSkillAttr:setFixCritHurt");
        if(!ok)
            return 0;
        cobj->setFixCritHurt(arg0, arg1);
        return 0;
    }

    gxError("CSkillAttr:setFixCritHurt has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSkillAttr_setFixCritHurt'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSkillAttr_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    CSkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSkillAttr_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("CSkillAttr:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSkillAttr_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSkillAttr_isFixCritHurt(lua_State* tolua_S)
{
    int argc = 0;
    CSkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSkillAttr_isFixCritHurt'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isFixCritHurt();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSkillAttr:isFixCritHurt has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSkillAttr_isFixCritHurt'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSkillAttr_setAppendCritRate(lua_State* tolua_S)
{
    int argc = 0;
    CSkillAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSkillAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSkillAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSkillAttr_setAppendCritRate'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CSkillAttr:setAppendCritRate");
        if(!ok)
            return 0;
        cobj->setAppendCritRate(arg0);
        return 0;
    }

    gxError("CSkillAttr:setAppendCritRate has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSkillAttr_setAppendCritRate'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSkillAttr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CSkillAttr* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CSkillAttr();
        tolua_pushusertype(tolua_S,(void*)cobj,"CSkillAttr");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CSkillAttr:CSkillAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CSkillAttr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CSkillAttr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CSkillAttr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CSkillAttr* self = (CSkillAttr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CSkillAttr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CSkillAttr");
    tolua_cclass(tolua_S,"CSkillAttr","CSkillAttr","CDetailAttrBase<int, 49>",lua_worldserver_CSkillAttr_finalize);

    tolua_beginmodule(tolua_S,"CSkillAttr");
        tolua_function(tolua_S,"new",lua_worldserver_CSkillAttr_constructor);
        tolua_function(tolua_S,"addFixCritHurt",lua_worldserver_CSkillAttr_addFixCritHurt);
        tolua_function(tolua_S,"getFixCritHurt",lua_worldserver_CSkillAttr_getFixCritHurt);
        tolua_function(tolua_S,"getAppendCritRate",lua_worldserver_CSkillAttr_getAppendCritRate);
        tolua_function(tolua_S,"setFixCritHurt",lua_worldserver_CSkillAttr_setFixCritHurt);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_CSkillAttr_cleanUp);
        tolua_function(tolua_S,"isFixCritHurt",lua_worldserver_CSkillAttr_isFixCritHurt);
        tolua_function(tolua_S,"setAppendCritRate",lua_worldserver_CSkillAttr_setAppendCritRate);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CSkillAttr).name();
    g_luaType[typeName] = "CSkillAttr";
    g_typeCast["CSkillAttr"] = "CSkillAttr";
    return 1;
}

int lua_worldserver_CBufferAttr_reset(lua_State* tolua_S)
{
    int argc = 0;
    CBufferAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBufferAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBufferAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBufferAttr_reset'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->reset();
        return 0;
    }

    gxError("CBufferAttr:reset has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBufferAttr_reset'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBufferAttr_toString(lua_State* tolua_S)
{
    int argc = 0;
    CBufferAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBufferAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBufferAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBufferAttr_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CBufferAttr:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBufferAttr_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CBufferAttr_resetBase(lua_State* tolua_S)
{
    int argc = 0;
    CBufferAttr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CBufferAttr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CBufferAttr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CBufferAttr_resetBase'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->resetBase();
        return 0;
    }

    gxError("CBufferAttr:resetBase has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CBufferAttr_resetBase'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CBufferAttr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CBufferAttr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CBufferAttr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CBufferAttr* self = (CBufferAttr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CBufferAttr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CBufferAttr");
    tolua_cclass(tolua_S,"CBufferAttr","CBufferAttr","CDetailAttrBase<int, 49>",nullptr);

    tolua_beginmodule(tolua_S,"CBufferAttr");
        tolua_function(tolua_S,"reset",lua_worldserver_CBufferAttr_reset);
        tolua_function(tolua_S,"toString",lua_worldserver_CBufferAttr_toString);
        tolua_function(tolua_S,"resetBase",lua_worldserver_CBufferAttr_resetBase);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CBufferAttr).name();
    g_luaType[typeName] = "CBufferAttr";
    g_typeCast["CBufferAttr"] = "CBufferAttr";
    return 1;
}

static int lua_worldserver_ServerPwdInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (ServerPwdInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"ServerPwdInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        ServerPwdInfo* self = (ServerPwdInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_ServerPwdInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ServerPwdInfo");
    tolua_cclass(tolua_S,"ServerPwdInfo","ServerPwdInfo","",nullptr);

    tolua_beginmodule(tolua_S,"ServerPwdInfo");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ServerPwdInfo).name();
    g_luaType[typeName] = "ServerPwdInfo";
    g_typeCast["ServerPwdInfo"] = "ServerPwdInfo";
    return 1;
}

static int lua_worldserver_SceneData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (SceneData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"SceneData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        SceneData* self = (SceneData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_SceneData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"SceneData");
    tolua_cclass(tolua_S,"SceneData","SceneData","",nullptr);

    tolua_beginmodule(tolua_S,"SceneData");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(SceneData).name();
    g_luaType[typeName] = "SceneData";
    g_typeCast["SceneData"] = "SceneData";
    return 1;
}

static int lua_worldserver_ChangeLineWait_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (ChangeLineWait)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"ChangeLineWait",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        ChangeLineWait* self = (ChangeLineWait*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_ChangeLineWait(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ChangeLineWait");
    tolua_cclass(tolua_S,"ChangeLineWait","ChangeLineWait","",nullptr);

    tolua_beginmodule(tolua_S,"ChangeLineWait");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ChangeLineWait).name();
    g_luaType[typeName] = "ChangeLineWait";
    g_typeCast["ChangeLineWait"] = "ChangeLineWait";
    return 1;
}

static int lua_worldserver_LoadWaitEnter_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LoadWaitEnter)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LoadWaitEnter",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LoadWaitEnter* self = (LoadWaitEnter*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LoadWaitEnter(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LoadWaitEnter");
    tolua_cclass(tolua_S,"LoadWaitEnter","LoadWaitEnter","",nullptr);

    tolua_beginmodule(tolua_S,"LoadWaitEnter");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LoadWaitEnter).name();
    g_luaType[typeName] = "LoadWaitEnter";
    g_typeCast["LoadWaitEnter"] = "LoadWaitEnter";
    return 1;
}

static int lua_worldserver_RoleSceneRecord_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (RoleSceneRecord)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"RoleSceneRecord",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        RoleSceneRecord* self = (RoleSceneRecord*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_RoleSceneRecord(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"RoleSceneRecord");
    tolua_cclass(tolua_S,"RoleSceneRecord","RoleSceneRecord","",nullptr);

    tolua_beginmodule(tolua_S,"RoleSceneRecord");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(RoleSceneRecord).name();
    g_luaType[typeName] = "RoleSceneRecord";
    g_typeCast["RoleSceneRecord"] = "RoleSceneRecord";
    return 1;
}

static int lua_worldserver_LoadRoleData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LoadRoleData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LoadRoleData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LoadRoleData* self = (LoadRoleData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LoadRoleData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LoadRoleData");
    tolua_cclass(tolua_S,"LoadRoleData","LoadRoleData","",nullptr);

    tolua_beginmodule(tolua_S,"LoadRoleData");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LoadRoleData).name();
    g_luaType[typeName] = "LoadRoleData";
    g_typeCast["LoadRoleData"] = "LoadRoleData";
    return 1;
}

static int lua_worldserver_MapServerUpdate_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MapServerUpdate)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MapServerUpdate",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MapServerUpdate* self = (MapServerUpdate*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MapServerUpdate(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MapServerUpdate");
    tolua_cclass(tolua_S,"MapServerUpdate","MapServerUpdate","",nullptr);

    tolua_beginmodule(tolua_S,"MapServerUpdate");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MapServerUpdate).name();
    g_luaType[typeName] = "MapServerUpdate";
    g_typeCast["MapServerUpdate"] = "MapServerUpdate";
    return 1;
}

static int lua_worldserver_BuffImpact_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (BuffImpact)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"BuffImpact",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        BuffImpact* self = (BuffImpact*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_BuffImpact(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"BuffImpact");
    tolua_cclass(tolua_S,"BuffImpact","BuffImpact","",nullptr);

    tolua_beginmodule(tolua_S,"BuffImpact");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(BuffImpact).name();
    g_luaType[typeName] = "BuffImpact";
    g_typeCast["BuffImpact"] = "BuffImpact";
    return 1;
}

int lua_worldserver_AttackorImpact_isInvalid(lua_State* tolua_S)
{
    int argc = 0;
    AttackorImpact* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AttackorImpact",0,&tolua_err)) goto tolua_lerror;
    cobj = (AttackorImpact*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AttackorImpact_isInvalid'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isInvalid();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("AttackorImpact:isInvalid has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AttackorImpact_isInvalid'.",&tolua_err);
	return 0;
}
int lua_worldserver_AttackorImpact_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    AttackorImpact* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AttackorImpact",0,&tolua_err)) goto tolua_lerror;
    cobj = (AttackorImpact*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AttackorImpact_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("AttackorImpact:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AttackorImpact_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_AttackorImpact_toString(lua_State* tolua_S)
{
    int argc = 0;
    AttackorImpact* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"AttackorImpact",0,&tolua_err)) goto tolua_lerror;
    cobj = (AttackorImpact*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_AttackorImpact_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("AttackorImpact:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_AttackorImpact_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_AttackorImpact_constructor(lua_State* tolua_S)
{
    int argc = 0;
    AttackorImpact* cobj = nullptr;
    bool ok  = true;
   
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            const BuffImpact* arg0;
            ok &= luaval_to_object<const BuffImpact>(tolua_S, 2, "BuffImpact", &arg0, "AttackorImpact:AttackorImpact");

            if (!ok) { break; }
            cobj = new AttackorImpact(arg0);
            tolua_pushusertype(tolua_S,(void*)cobj,"AttackorImpact");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            cobj = new AttackorImpact();
            tolua_pushusertype(tolua_S,(void*)cobj,"AttackorImpact");
            tolua_register_gc(tolua_S,lua_gettop(tolua_S));
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("AttackorImpact:AttackorImpact has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_AttackorImpact_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (AttackorImpact)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"AttackorImpact",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        AttackorImpact* self = (AttackorImpact*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_AttackorImpact(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"AttackorImpact");
    tolua_cclass(tolua_S,"AttackorImpact","AttackorImpact","",lua_worldserver_AttackorImpact_finalize);

    tolua_beginmodule(tolua_S,"AttackorImpact");
        tolua_function(tolua_S,"new",lua_worldserver_AttackorImpact_constructor);
        tolua_function(tolua_S,"isInvalid",lua_worldserver_AttackorImpact_isInvalid);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_AttackorImpact_cleanUp);
        tolua_function(tolua_S,"toString",lua_worldserver_AttackorImpact_toString);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(AttackorImpact).name();
    g_luaType[typeName] = "AttackorImpact";
    g_typeCast["AttackorImpact"] = "AttackorImpact";
    return 1;
}

static int lua_worldserver_OwnSkill_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (OwnSkill)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"OwnSkill",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        OwnSkill* self = (OwnSkill*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_OwnSkill(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"OwnSkill");
    tolua_cclass(tolua_S,"OwnSkill","OwnSkill","",nullptr);

    tolua_beginmodule(tolua_S,"OwnSkill");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(OwnSkill).name();
    g_luaType[typeName] = "OwnSkill";
    g_typeCast["OwnSkill"] = "OwnSkill";
    return 1;
}

static int lua_worldserver_ExtUseSkill_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (ExtUseSkill)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"ExtUseSkill",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        ExtUseSkill* self = (ExtUseSkill*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_ExtUseSkill(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ExtUseSkill");
    tolua_cclass(tolua_S,"ExtUseSkill","ExtUseSkill","",nullptr);

    tolua_beginmodule(tolua_S,"ExtUseSkill");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ExtUseSkill).name();
    g_luaType[typeName] = "ExtUseSkill";
    g_typeCast["ExtUseSkill"] = "ExtUseSkill";
    return 1;
}

static int lua_worldserver_ItemIDNum_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (ItemIDNum)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"ItemIDNum",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        ItemIDNum* self = (ItemIDNum*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_ItemIDNum(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ItemIDNum");
    tolua_cclass(tolua_S,"ItemIDNum","ItemIDNum","",nullptr);

    tolua_beginmodule(tolua_S,"ItemIDNum");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ItemIDNum).name();
    g_luaType[typeName] = "ItemIDNum";
    g_typeCast["ItemIDNum"] = "ItemIDNum";
    return 1;
}

static int lua_worldserver_MapIDRangePos_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MapIDRangePos)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MapIDRangePos",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MapIDRangePos* self = (MapIDRangePos*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MapIDRangePos(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MapIDRangePos");
    tolua_cclass(tolua_S,"MapIDRangePos","MapIDRangePos","",nullptr);

    tolua_beginmodule(tolua_S,"MapIDRangePos");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MapIDRangePos).name();
    g_luaType[typeName] = "MapIDRangePos";
    g_typeCast["MapIDRangePos"] = "MapIDRangePos";
    return 1;
}

static int lua_worldserver_MapRangePos_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MapRangePos)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MapRangePos",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MapRangePos* self = (MapRangePos*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MapRangePos(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MapRangePos");
    tolua_cclass(tolua_S,"MapRangePos","MapRangePos","",nullptr);

    tolua_beginmodule(tolua_S,"MapRangePos");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MapRangePos).name();
    g_luaType[typeName] = "MapRangePos";
    g_typeCast["MapRangePos"] = "MapRangePos";
    return 1;
}

static int lua_worldserver_MapIDPos_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MapIDPos)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MapIDPos",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MapIDPos* self = (MapIDPos*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MapIDPos(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MapIDPos");
    tolua_cclass(tolua_S,"MapIDPos","MapIDPos","",nullptr);

    tolua_beginmodule(tolua_S,"MapIDPos");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MapIDPos).name();
    g_luaType[typeName] = "MapIDPos";
    g_typeCast["MapIDPos"] = "MapIDPos";
    return 1;
}

static int lua_worldserver_ZoneServer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (ZoneServer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"ZoneServer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        ZoneServer* self = (ZoneServer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_ZoneServer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ZoneServer");
    tolua_cclass(tolua_S,"ZoneServer","ZoneServer","IStreamableAll",nullptr);

    tolua_beginmodule(tolua_S,"ZoneServer");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ZoneServer).name();
    g_luaType[typeName] = "ZoneServer";
    g_typeCast["ZoneServer"] = "ZoneServer";
    return 1;
}

static int lua_worldserver_OwnerBuffer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (OwnerBuffer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"OwnerBuffer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        OwnerBuffer* self = (OwnerBuffer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_OwnerBuffer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"OwnerBuffer");
    tolua_cclass(tolua_S,"OwnerBuffer","OwnerBuffer","",nullptr);

    tolua_beginmodule(tolua_S,"OwnerBuffer");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(OwnerBuffer).name();
    g_luaType[typeName] = "OwnerBuffer";
    g_typeCast["OwnerBuffer"] = "OwnerBuffer";
    return 1;
}

int lua_worldserver_LimitServerIDInfo_clean(lua_State* tolua_S)
{
    int argc = 0;
    LimitServerIDInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"LimitServerIDInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (LimitServerIDInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_LimitServerIDInfo_clean'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->clean();
        return 0;
    }

    gxError("LimitServerIDInfo:clean has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_LimitServerIDInfo_clean'.",&tolua_err);
	return 0;
}
int lua_worldserver_LimitServerIDInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LimitServerIDInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new LimitServerIDInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"LimitServerIDInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("LimitServerIDInfo:LimitServerIDInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_LimitServerIDInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LimitServerIDInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LimitServerIDInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LimitServerIDInfo* self = (LimitServerIDInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LimitServerIDInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LimitServerIDInfo");
    tolua_cclass(tolua_S,"LimitServerIDInfo","LimitServerIDInfo","",lua_worldserver_LimitServerIDInfo_finalize);

    tolua_beginmodule(tolua_S,"LimitServerIDInfo");
        tolua_function(tolua_S,"new",lua_worldserver_LimitServerIDInfo_constructor);
        tolua_function(tolua_S,"clean",lua_worldserver_LimitServerIDInfo_clean);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LimitServerIDInfo).name();
    g_luaType[typeName] = "LimitServerIDInfo";
    g_typeCast["LimitServerIDInfo"] = "LimitServerIDInfo";
    return 1;
}

int lua_worldserver_LimitAccountInfo_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    LimitAccountInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"LimitAccountInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (LimitAccountInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_LimitAccountInfo_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("LimitAccountInfo:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_LimitAccountInfo_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_LimitAccountInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LimitAccountInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new LimitAccountInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"LimitAccountInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("LimitAccountInfo:LimitAccountInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_LimitAccountInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LimitAccountInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LimitAccountInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LimitAccountInfo* self = (LimitAccountInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LimitAccountInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LimitAccountInfo");
    tolua_cclass(tolua_S,"LimitAccountInfo","LimitAccountInfo","",lua_worldserver_LimitAccountInfo_finalize);

    tolua_beginmodule(tolua_S,"LimitAccountInfo");
        tolua_function(tolua_S,"new",lua_worldserver_LimitAccountInfo_constructor);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_LimitAccountInfo_cleanUp);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LimitAccountInfo).name();
    g_luaType[typeName] = "LimitAccountInfo";
    g_typeCast["LimitAccountInfo"] = "LimitAccountInfo";
    return 1;
}

int lua_worldserver_LimitChatInfo_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    LimitChatInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"LimitChatInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (LimitChatInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_LimitChatInfo_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("LimitChatInfo:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_LimitChatInfo_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_LimitChatInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LimitChatInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new LimitChatInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"LimitChatInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("LimitChatInfo:LimitChatInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_LimitChatInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LimitChatInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LimitChatInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LimitChatInfo* self = (LimitChatInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LimitChatInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LimitChatInfo");
    tolua_cclass(tolua_S,"LimitChatInfo","LimitChatInfo","",lua_worldserver_LimitChatInfo_finalize);

    tolua_beginmodule(tolua_S,"LimitChatInfo");
        tolua_function(tolua_S,"new",lua_worldserver_LimitChatInfo_constructor);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_LimitChatInfo_cleanUp);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LimitChatInfo).name();
    g_luaType[typeName] = "LimitChatInfo";
    g_typeCast["LimitChatInfo"] = "LimitChatInfo";
    return 1;
}

int lua_worldserver_LimitAccount_clean(lua_State* tolua_S)
{
    int argc = 0;
    LimitAccount* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"LimitAccount",0,&tolua_err)) goto tolua_lerror;
    cobj = (LimitAccount*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_LimitAccount_clean'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->clean();
        return 0;
    }

    gxError("LimitAccount:clean has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_LimitAccount_clean'.",&tolua_err);
	return 0;
}
int lua_worldserver_LimitAccount_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LimitAccount* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new LimitAccount();
        tolua_pushusertype(tolua_S,(void*)cobj,"LimitAccount");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("LimitAccount:LimitAccount has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_LimitAccount_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LimitAccount)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LimitAccount",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LimitAccount* self = (LimitAccount*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LimitAccount(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LimitAccount");
    tolua_cclass(tolua_S,"LimitAccount","LimitAccount","",lua_worldserver_LimitAccount_finalize);

    tolua_beginmodule(tolua_S,"LimitAccount");
        tolua_function(tolua_S,"new",lua_worldserver_LimitAccount_constructor);
        tolua_function(tolua_S,"clean",lua_worldserver_LimitAccount_clean);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LimitAccount).name();
    g_luaType[typeName] = "LimitAccount";
    g_typeCast["LimitAccount"] = "LimitAccount";
    return 1;
}

int lua_worldserver_LimitChat_clean(lua_State* tolua_S)
{
    int argc = 0;
    LimitChat* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"LimitChat",0,&tolua_err)) goto tolua_lerror;
    cobj = (LimitChat*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_LimitChat_clean'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->clean();
        return 0;
    }

    gxError("LimitChat:clean has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_LimitChat_clean'.",&tolua_err);
	return 0;
}
int lua_worldserver_LimitChat_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LimitChat* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new LimitChat();
        tolua_pushusertype(tolua_S,(void*)cobj,"LimitChat");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("LimitChat:LimitChat has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_LimitChat_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LimitChat)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LimitChat",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LimitChat* self = (LimitChat*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LimitChat(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LimitChat");
    tolua_cclass(tolua_S,"LimitChat","LimitChat","",lua_worldserver_LimitChat_finalize);

    tolua_beginmodule(tolua_S,"LimitChat");
        tolua_function(tolua_S,"new",lua_worldserver_LimitChat_constructor);
        tolua_function(tolua_S,"clean",lua_worldserver_LimitChat_clean);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LimitChat).name();
    g_luaType[typeName] = "LimitChat";
    g_typeCast["LimitChat"] = "LimitChat";
    return 1;
}

int lua_worldserver_LimitAccountDB_clean(lua_State* tolua_S)
{
    int argc = 0;
    LimitAccountDB* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"LimitAccountDB",0,&tolua_err)) goto tolua_lerror;
    cobj = (LimitAccountDB*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_LimitAccountDB_clean'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->clean();
        return 0;
    }

    gxError("LimitAccountDB:clean has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_LimitAccountDB_clean'.",&tolua_err);
	return 0;
}
int lua_worldserver_LimitAccountDB_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LimitAccountDB* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new LimitAccountDB();
        tolua_pushusertype(tolua_S,(void*)cobj,"LimitAccountDB");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("LimitAccountDB:LimitAccountDB has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_LimitAccountDB_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LimitAccountDB)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LimitAccountDB",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LimitAccountDB* self = (LimitAccountDB*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LimitAccountDB(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LimitAccountDB");
    tolua_cclass(tolua_S,"LimitAccountDB","LimitAccountDB","",lua_worldserver_LimitAccountDB_finalize);

    tolua_beginmodule(tolua_S,"LimitAccountDB");
        tolua_function(tolua_S,"new",lua_worldserver_LimitAccountDB_constructor);
        tolua_function(tolua_S,"clean",lua_worldserver_LimitAccountDB_clean);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LimitAccountDB).name();
    g_luaType[typeName] = "LimitAccountDB";
    g_typeCast["LimitAccountDB"] = "LimitAccountDB";
    return 1;
}

int lua_worldserver_LimitChatDB_clean(lua_State* tolua_S)
{
    int argc = 0;
    LimitChatDB* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"LimitChatDB",0,&tolua_err)) goto tolua_lerror;
    cobj = (LimitChatDB*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_LimitChatDB_clean'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->clean();
        return 0;
    }

    gxError("LimitChatDB:clean has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_LimitChatDB_clean'.",&tolua_err);
	return 0;
}
int lua_worldserver_LimitChatDB_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LimitChatDB* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new LimitChatDB();
        tolua_pushusertype(tolua_S,(void*)cobj,"LimitChatDB");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("LimitChatDB:LimitChatDB has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_LimitChatDB_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LimitChatDB)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LimitChatDB",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LimitChatDB* self = (LimitChatDB*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LimitChatDB(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LimitChatDB");
    tolua_cclass(tolua_S,"LimitChatDB","LimitChatDB","",lua_worldserver_LimitChatDB_finalize);

    tolua_beginmodule(tolua_S,"LimitChatDB");
        tolua_function(tolua_S,"new",lua_worldserver_LimitChatDB_constructor);
        tolua_function(tolua_S,"clean",lua_worldserver_LimitChatDB_clean);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LimitChatDB).name();
    g_luaType[typeName] = "LimitChatDB";
    g_typeCast["LimitChatDB"] = "LimitChatDB";
    return 1;
}

int lua_worldserver_CScene_canEnter(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_canEnter'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CScene:canEnter");
        if(!ok)
            return 0;
        bool ret = cobj->canEnter(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CScene:canEnter has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_canEnter'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_getOwner(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_getOwner'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getOwner();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CScene:getOwner has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_getOwner'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_isKey(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_isKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CScene:isKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_isKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_keyToString(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_keyToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->keyToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CScene:keyToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_keyToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_getMapServerID(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_getMapServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getMapServerID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CScene:getMapServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_getMapServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_getKey(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_getKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getKey();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CScene:getKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_getKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_isRiskScene(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_isRiskScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isRiskScene();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CScene:isRiskScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_isRiskScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_init(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_init'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        SceneData* arg0;

        ok &= luaval_to_object<SceneData>(tolua_S, 2, "SceneData", &arg0, "CScene:init");
        if(!ok)
            return 0;
        cobj->init(arg0);
        return 0;
    }

    gxError("CScene:init has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_init'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_setKey(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_setKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CScene:setKey");
        if(!ok)
            return 0;
        cobj->setKey(arg0);
        return 0;
    }

    gxError("CScene:setKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_setKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_toString(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CScene:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_changeOwner(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_changeOwner'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CScene:changeOwner");
        if(!ok)
            return 0;
        cobj->changeOwner(arg0);
        return 0;
    }

    gxError("CScene:changeOwner has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_changeOwner'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_getSceneType(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_getSceneType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->getSceneType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CScene:getSceneType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_getSceneType'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_getSceneID(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_getSceneID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getSceneID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CScene:getSceneID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_getSceneID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_isNormalScene(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScene_isNormalScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isNormalScene();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CScene:isNormalScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScene_isNormalScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScene_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CScene* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CScene();
        tolua_pushusertype(tolua_S,(void*)cobj,"CScene");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CScene:CScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CScene_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CScene)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CScene",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CScene* self = (CScene*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CScene(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CScene");
    tolua_cclass(tolua_S,"CScene","CScene","",lua_worldserver_CScene_finalize);

    tolua_beginmodule(tolua_S,"CScene");
        tolua_function(tolua_S,"new",lua_worldserver_CScene_constructor);
        tolua_function(tolua_S,"canEnter",lua_worldserver_CScene_canEnter);
        tolua_function(tolua_S,"getOwner",lua_worldserver_CScene_getOwner);
        tolua_function(tolua_S,"isKey",lua_worldserver_CScene_isKey);
        tolua_function(tolua_S,"keyToString",lua_worldserver_CScene_keyToString);
        tolua_function(tolua_S,"getMapServerID",lua_worldserver_CScene_getMapServerID);
        tolua_function(tolua_S,"getKey",lua_worldserver_CScene_getKey);
        tolua_function(tolua_S,"isRiskScene",lua_worldserver_CScene_isRiskScene);
        tolua_function(tolua_S,"init",lua_worldserver_CScene_init);
        tolua_function(tolua_S,"setKey",lua_worldserver_CScene_setKey);
        tolua_function(tolua_S,"toString",lua_worldserver_CScene_toString);
        tolua_function(tolua_S,"changeOwner",lua_worldserver_CScene_changeOwner);
        tolua_function(tolua_S,"getSceneType",lua_worldserver_CScene_getSceneType);
        tolua_function(tolua_S,"getSceneID",lua_worldserver_CScene_getSceneID);
        tolua_function(tolua_S,"isNormalScene",lua_worldserver_CScene_isNormalScene);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CScene).name();
    g_luaType[typeName] = "CScene";
    g_typeCast["CScene"] = "CScene";
    return 1;
}

int lua_worldserver_CMap_setMapID(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_setMapID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMap:setMapID");
        if(!ok)
            return 0;
        cobj->setMapID(arg0);
        return 0;
    }

    gxError("CMap:setMapID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_setMapID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMap_toString(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CMap:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMap_isKey(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_isKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CMap:isKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_isKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMap_keyToString(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_keyToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->keyToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CMap:keyToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_keyToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMap_getEmptyScene(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CMap_getEmptyScene'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMap:getEmptyScene");

            if (!ok) { break; }
            CScene* ret = cobj->getEmptyScene(arg0);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            CScene* ret = cobj->getEmptyScene();
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CMap:getEmptyScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_getEmptyScene'.",&tolua_err);
    return 0;
}
int lua_worldserver_CMap_getMapID(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_getMapID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getMapID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CMap:getMapID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_getMapID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMap_getKey(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_getKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getKey();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CMap:getKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_getKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMap_addScene(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_addScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CScene* arg0;

        ok &= luaval_to_object<CScene>(tolua_S, 2, "CScene", &arg0, "CMap:addScene");
        if(!ok)
            return 0;
        bool ret = cobj->addScene(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CMap:addScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_addScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMap_getLeastScene(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CMap_getLeastScene'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMap:getLeastScene");

            if (!ok) { break; }
            CScene* ret = cobj->getLeastScene(arg0);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            CScene* ret = cobj->getLeastScene();
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CMap:getLeastScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_getLeastScene'.",&tolua_err);
    return 0;
}
int lua_worldserver_CMap_delScene(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_delScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CMap:delScene");
        if(!ok)
            return 0;
        cobj->delScene(arg0);
        return 0;
    }

    gxError("CMap:delScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_delScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMap_setKey(lua_State* tolua_S)
{
    int argc = 0;
    CMap* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMap*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMap_setKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMap:setKey");
        if(!ok)
            return 0;
        cobj->setKey(arg0);
        return 0;
    }

    gxError("CMap:setKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMap_setKey'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CMap_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CMap)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CMap",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CMap* self = (CMap*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CMap(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CMap");
    tolua_cclass(tolua_S,"CMap","CMap","",nullptr);

    tolua_beginmodule(tolua_S,"CMap");
        tolua_function(tolua_S,"setMapID",lua_worldserver_CMap_setMapID);
        tolua_function(tolua_S,"toString",lua_worldserver_CMap_toString);
        tolua_function(tolua_S,"isKey",lua_worldserver_CMap_isKey);
        tolua_function(tolua_S,"keyToString",lua_worldserver_CMap_keyToString);
        tolua_function(tolua_S,"getEmptyScene",lua_worldserver_CMap_getEmptyScene);
        tolua_function(tolua_S,"getMapID",lua_worldserver_CMap_getMapID);
        tolua_function(tolua_S,"getKey",lua_worldserver_CMap_getKey);
        tolua_function(tolua_S,"addScene",lua_worldserver_CMap_addScene);
        tolua_function(tolua_S,"getLeastScene",lua_worldserver_CMap_getLeastScene);
        tolua_function(tolua_S,"delScene",lua_worldserver_CMap_delScene);
        tolua_function(tolua_S,"setKey",lua_worldserver_CMap_setKey);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CMap).name();
    g_luaType[typeName] = "CMap";
    g_typeCast["CMap"] = "CMap";
    return 1;
}

int lua_worldserver_CMapManager_getNext(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_getNext'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CMap* ret = cobj->getNext();
        object_to_luaval<CMap>(tolua_S, "CMap",(CMap*)ret);
        return 1;
    }

    gxError("CMapManager:getNext has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_getNext'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_getBegin(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_getBegin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CMap* ret = cobj->getBegin();
        object_to_luaval<CMap>(tolua_S, "CMap",(CMap*)ret);
        return 1;
    }

    gxError("CMapManager:getBegin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_getBegin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_addMap(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_addMap'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMapManager:addMap");
        if(!ok)
            return 0;
        CMap* ret = cobj->addMap(arg0);
        object_to_luaval<CMap>(tolua_S, "CMap",(CMap*)ret);
        return 1;
    }

    gxError("CMapManager:addMap has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_addMap'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_getEmptyScene(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CMapManager_getEmptyScene'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMapManager:getEmptyScene");

            if (!ok) { break; }
            unsigned short arg1;
            ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CMapManager:getEmptyScene");

            if (!ok) { break; }
            CScene* ret = cobj->getEmptyScene(arg0, arg1);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMapManager:getEmptyScene");

            if (!ok) { break; }
            CScene* ret = cobj->getEmptyScene(arg0);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CMapManager:getEmptyScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_getEmptyScene'.",&tolua_err);
    return 0;
}
int lua_worldserver_CMapManager_update(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CMapManager:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CMapManager:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_findMap(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_findMap'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMapManager:findMap");
        if(!ok)
            return 0;
        CMap* ret = cobj->findMap(arg0);
        object_to_luaval<CMap>(tolua_S, "CMap",(CMap*)ret);
        return 1;
    }

    gxError("CMapManager:findMap has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_findMap'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_isMapExist(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_isMapExist'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMapManager:isMapExist");
        if(!ok)
            return 0;
        bool ret = cobj->isMapExist(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CMapManager:isMapExist has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_isMapExist'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_init(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_init'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CMapManager:init");
        if(!ok)
            return 0;
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CMapManager:init has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_init'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_addScene(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_addScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CScene* arg0;

        ok &= luaval_to_object<CScene>(tolua_S, 2, "CScene", &arg0, "CMapManager:addScene");
        if(!ok)
            return 0;
        bool ret = cobj->addScene(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CMapManager:addScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_addScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_getLeastScene(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CMapManager_getLeastScene'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMapManager:getLeastScene");

            if (!ok) { break; }
            unsigned short arg1;
            ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CMapManager:getLeastScene");

            if (!ok) { break; }
            CScene* ret = cobj->getLeastScene(arg0, arg1);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMapManager:getLeastScene");

            if (!ok) { break; }
            CScene* ret = cobj->getLeastScene(arg0);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CMapManager:getLeastScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_getLeastScene'.",&tolua_err);
    return 0;
}
int lua_worldserver_CMapManager_delScene(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_delScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CMapManager:delScene");
        if(!ok)
            return 0;
        cobj->delScene(arg0);
        return 0;
    }

    gxError("CMapManager:delScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_delScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_delMap(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_delMap'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CMapManager:delMap");
        if(!ok)
            return 0;
        cobj->delMap(arg0);
        return 0;
    }

    gxError("CMapManager:delMap has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_delMap'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_size(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMapManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMapManager_size'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->size();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CMapManager:size has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_size'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMapManager_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CMapManager",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CMapManager* ret = CMapManager::GetPtr();
        object_to_luaval<CMapManager>(tolua_S, "CMapManager",(CMapManager*)ret);
        return 1;
    }
    gxError("CMapManager:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMapManager_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CMapManager_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CMapManager* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CMapManager();
        tolua_pushusertype(tolua_S,(void*)cobj,"CMapManager");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CMapManager:CMapManager has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CMapManager_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CMapManager)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CMapManager",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CMapManager* self = (CMapManager*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CMapManager(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CMapManager");
    tolua_cclass(tolua_S,"CMapManager","CMapManager","CHashMultiIndex<CMap, false, 0>",lua_worldserver_CMapManager_finalize);

    tolua_beginmodule(tolua_S,"CMapManager");
        tolua_function(tolua_S,"new",lua_worldserver_CMapManager_constructor);
        tolua_function(tolua_S,"getNext",lua_worldserver_CMapManager_getNext);
        tolua_function(tolua_S,"getBegin",lua_worldserver_CMapManager_getBegin);
        tolua_function(tolua_S,"addMap",lua_worldserver_CMapManager_addMap);
        tolua_function(tolua_S,"getEmptyScene",lua_worldserver_CMapManager_getEmptyScene);
        tolua_function(tolua_S,"update",lua_worldserver_CMapManager_update);
        tolua_function(tolua_S,"findMap",lua_worldserver_CMapManager_findMap);
        tolua_function(tolua_S,"isMapExist",lua_worldserver_CMapManager_isMapExist);
        tolua_function(tolua_S,"init",lua_worldserver_CMapManager_init);
        tolua_function(tolua_S,"addScene",lua_worldserver_CMapManager_addScene);
        tolua_function(tolua_S,"getLeastScene",lua_worldserver_CMapManager_getLeastScene);
        tolua_function(tolua_S,"delScene",lua_worldserver_CMapManager_delScene);
        tolua_function(tolua_S,"delMap",lua_worldserver_CMapManager_delMap);
        tolua_function(tolua_S,"size",lua_worldserver_CMapManager_size);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CMapManager_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CMapManager).name();
    g_luaType[typeName] = "CMapManager";
    g_typeCast["CMapManager"] = "CMapManager";
    return 1;
}

static int lua_worldserver_CConfigTbl_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CConfigTbl)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CConfigTbl",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CConfigTbl* self = (CConfigTbl*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CConfigTbl(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CConfigTbl");
    tolua_cclass(tolua_S,"CConfigTbl","CConfigTbl","",nullptr);

    tolua_beginmodule(tolua_S,"CConfigTbl");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CConfigTbl).name();
    g_luaType[typeName] = "CConfigTbl";
    g_typeCast["CConfigTbl"] = "CConfigTbl";
    return 1;
}

int lua_worldserver_UrlDownFile_constructor(lua_State* tolua_S)
{
    int argc = 0;
    UrlDownFile* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new UrlDownFile();
        tolua_pushusertype(tolua_S,(void*)cobj,"UrlDownFile");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("UrlDownFile:UrlDownFile has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_UrlDownFile_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (UrlDownFile)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"UrlDownFile",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        UrlDownFile* self = (UrlDownFile*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_UrlDownFile(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"UrlDownFile");
    tolua_cclass(tolua_S,"UrlDownFile","UrlDownFile","",lua_worldserver_UrlDownFile_finalize);

    tolua_beginmodule(tolua_S,"UrlDownFile");
        tolua_function(tolua_S,"new",lua_worldserver_UrlDownFile_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(UrlDownFile).name();
    g_luaType[typeName] = "UrlDownFile";
    g_typeCast["UrlDownFile"] = "UrlDownFile";
    return 1;
}

int lua_worldserver_CCconfigLoaderParam_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CCconfigLoaderParam* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CCconfigLoaderParam();
        tolua_pushusertype(tolua_S,(void*)cobj,"CCconfigLoaderParam");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CCconfigLoaderParam:CCconfigLoaderParam has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CCconfigLoaderParam_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CCconfigLoaderParam)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CCconfigLoaderParam",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CCconfigLoaderParam* self = (CCconfigLoaderParam*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CCconfigLoaderParam(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CCconfigLoaderParam");
    tolua_cclass(tolua_S,"CCconfigLoaderParam","CCconfigLoaderParam","",lua_worldserver_CCconfigLoaderParam_finalize);

    tolua_beginmodule(tolua_S,"CCconfigLoaderParam");
        tolua_function(tolua_S,"new",lua_worldserver_CCconfigLoaderParam_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CCconfigLoaderParam).name();
    g_luaType[typeName] = "CCconfigLoaderParam";
    g_typeCast["CCconfigLoaderParam"] = "CCconfigLoaderParam";
    return 1;
}

int lua_worldserver_CConfigLoaderBase_checkConfig(lua_State* tolua_S)
{
    int argc = 0;
    CConfigLoaderBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CConfigLoaderBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CConfigLoaderBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CConfigLoaderBase_checkConfig'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->checkConfig();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CConfigLoaderBase:checkConfig has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CConfigLoaderBase_checkConfig'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CConfigLoaderBase_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CConfigLoaderBase)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CConfigLoaderBase",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CConfigLoaderBase* self = (CConfigLoaderBase*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CConfigLoaderBase(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CConfigLoaderBase");
    tolua_cclass(tolua_S,"CConfigLoaderBase","CConfigLoaderBase","",nullptr);

    tolua_beginmodule(tolua_S,"CConfigLoaderBase");
        tolua_function(tolua_S,"checkConfig",lua_worldserver_CConfigLoaderBase_checkConfig);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CConfigLoaderBase).name();
    g_luaType[typeName] = "CConfigLoaderBase";
    g_typeCast["CConfigLoaderBase"] = "CConfigLoaderBase";
    return 1;
}

int lua_worldserver_CRoleNameRandTbl_getString(lua_State* tolua_S)
{
    int argc = 0;
    CRoleNameRandTbl* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRoleNameRandTbl",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRoleNameRandTbl*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRoleNameRandTbl_getString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned char arg0;
        unsigned int arg1;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CRoleNameRandTbl:getString");

        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CRoleNameRandTbl:getString");
        if(!ok)
            return 0;
        std::string ret = cobj->getString(arg0, arg1);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CRoleNameRandTbl:getString has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRoleNameRandTbl_getString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRoleNameRandTbl_isKey(lua_State* tolua_S)
{
    int argc = 0;
    CRoleNameRandTbl* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRoleNameRandTbl",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRoleNameRandTbl*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRoleNameRandTbl_isKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CRoleNameRandTbl:isKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRoleNameRandTbl_isKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRoleNameRandTbl_getLength(lua_State* tolua_S)
{
    int argc = 0;
    CRoleNameRandTbl* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRoleNameRandTbl",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRoleNameRandTbl*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRoleNameRandTbl_getLength'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CRoleNameRandTbl:getLength");
        if(!ok)
            return 0;
        unsigned int ret = cobj->getLength(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CRoleNameRandTbl:getLength has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRoleNameRandTbl_getLength'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRoleNameRandTbl_keyToString(lua_State* tolua_S)
{
    int argc = 0;
    CRoleNameRandTbl* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRoleNameRandTbl",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRoleNameRandTbl*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRoleNameRandTbl_keyToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->keyToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CRoleNameRandTbl:keyToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRoleNameRandTbl_keyToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRoleNameRandTbl_getKey(lua_State* tolua_S)
{
    int argc = 0;
    CRoleNameRandTbl* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRoleNameRandTbl",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRoleNameRandTbl*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRoleNameRandTbl_getKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getKey();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CRoleNameRandTbl:getKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRoleNameRandTbl_getKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRoleNameRandTbl_setKey(lua_State* tolua_S)
{
    int argc = 0;
    CRoleNameRandTbl* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRoleNameRandTbl",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRoleNameRandTbl*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRoleNameRandTbl_setKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CRoleNameRandTbl:setKey");
        if(!ok)
            return 0;
        cobj->setKey(arg0);
        return 0;
    }

    gxError("CRoleNameRandTbl:setKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRoleNameRandTbl_setKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRoleNameRandTbl_toString(lua_State* tolua_S)
{
    int argc = 0;
    CRoleNameRandTbl* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRoleNameRandTbl",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRoleNameRandTbl*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRoleNameRandTbl_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CRoleNameRandTbl:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRoleNameRandTbl_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRoleNameRandTbl_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CRoleNameRandTbl* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CRoleNameRandTbl();
        tolua_pushusertype(tolua_S,(void*)cobj,"CRoleNameRandTbl");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CRoleNameRandTbl:CRoleNameRandTbl has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CRoleNameRandTbl_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CRoleNameRandTbl)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CRoleNameRandTbl",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CRoleNameRandTbl* self = (CRoleNameRandTbl*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CRoleNameRandTbl(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CRoleNameRandTbl");
    tolua_cclass(tolua_S,"CRoleNameRandTbl","CRoleNameRandTbl","CConfigTbl",lua_worldserver_CRoleNameRandTbl_finalize);

    tolua_beginmodule(tolua_S,"CRoleNameRandTbl");
        tolua_function(tolua_S,"new",lua_worldserver_CRoleNameRandTbl_constructor);
        tolua_function(tolua_S,"getString",lua_worldserver_CRoleNameRandTbl_getString);
        tolua_function(tolua_S,"isKey",lua_worldserver_CRoleNameRandTbl_isKey);
        tolua_function(tolua_S,"getLength",lua_worldserver_CRoleNameRandTbl_getLength);
        tolua_function(tolua_S,"keyToString",lua_worldserver_CRoleNameRandTbl_keyToString);
        tolua_function(tolua_S,"getKey",lua_worldserver_CRoleNameRandTbl_getKey);
        tolua_function(tolua_S,"setKey",lua_worldserver_CRoleNameRandTbl_setKey);
        tolua_function(tolua_S,"toString",lua_worldserver_CRoleNameRandTbl_toString);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CRoleNameRandTbl).name();
    g_luaType[typeName] = "CRoleNameRandTbl";
    g_typeCast["CRoleNameRandTbl"] = "CRoleNameRandTbl";
    return 1;
}

int lua_worldserver_CRandRoleNameTblLoader_readRow(lua_State* tolua_S)
{
    int argc = 0;
    CRandRoleNameTblLoader* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRandRoleNameTblLoader",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRandRoleNameTblLoader*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRandRoleNameTblLoader_readRow'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        TiXmlElement* arg0;
        int arg1;
        CRoleNameRandTbl* arg2;

        ok &= luaval_to_object<TiXmlElement>(tolua_S, 2, "TiXmlElement", &arg0, "CRandRoleNameTblLoader:readRow");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CRandRoleNameTblLoader:readRow");

        ok &= luaval_to_object<CRoleNameRandTbl>(tolua_S, 4, "CRoleNameRandTbl", &arg2, "CRandRoleNameTblLoader:readRow");
        if(!ok)
            return 0;
        bool ret = cobj->readRow(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CRandRoleNameTblLoader:readRow has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandRoleNameTblLoader_readRow'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CRandRoleNameTblLoader_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CRandRoleNameTblLoader)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CRandRoleNameTblLoader",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CRandRoleNameTblLoader* self = (CRandRoleNameTblLoader*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CRandRoleNameTblLoader(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CRandRoleNameTblLoader");
    tolua_cclass(tolua_S,"CRandRoleNameTblLoader","CRandRoleNameTblLoader","CConfigLoader<CRandRoleNameTblLoader, CRoleNameRandTbl>",nullptr);

    tolua_beginmodule(tolua_S,"CRandRoleNameTblLoader");
        tolua_function(tolua_S,"readRow",lua_worldserver_CRandRoleNameTblLoader_readRow);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CRandRoleNameTblLoader).name();
    g_luaType[typeName] = "CRandRoleNameTblLoader";
    g_typeCast["CRandRoleNameTblLoader"] = "CRandRoleNameTblLoader";
    return 1;
}

int lua_worldserver__LoginRole_setParam(lua_State* tolua_S)
{
    int argc = 0;
    _LoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"_LoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (_LoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver__LoginRole_setParam'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 11) 
    {
        const char* arg0;
        unsigned long long arg1;
        unsigned int arg2;
        unsigned char arg3;
        unsigned char arg4;
        unsigned char arg5;
        unsigned int arg6;
        AxisPos arg7;
        unsigned long long arg8;
        unsigned char arg9;
        unsigned int arg10;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "_LoginRole:setParam"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "_LoginRole:setParam");

        ok &= luaval_to_uint32(tolua_S, 4,(uint32*)&arg2, "_LoginRole:setParam");

        ok &= luaval_to_uint8(tolua_S, 5,(uint8*)&arg3, "_LoginRole:setParam");

        ok &= luaval_to_uint8(tolua_S, 6,(uint8*)&arg4, "_LoginRole:setParam");

        ok &= luaval_to_uint8(tolua_S, 7,(uint8*)&arg5, "_LoginRole:setParam");

        ok &= luaval_to_uint32(tolua_S, 8,(uint32*)&arg6, "_LoginRole:setParam");

        ok &= luaval_to_axispos(tolua_S, 9, "AxisPos", &arg7, "_LoginRole:setParam");

        ok &= luaval_to_uint64(tolua_S, 10, (uint64*)&arg8, "_LoginRole:setParam");

        ok &= luaval_to_uint8(tolua_S, 11,(uint8*)&arg9, "_LoginRole:setParam");

        ok &= luaval_to_uint32(tolua_S, 12,(uint32*)&arg10, "_LoginRole:setParam");
        if(!ok)
            return 0;
        cobj->setParam(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        return 0;
    }

    gxError("_LoginRole:setParam has wrong number of arguments: {0}, was expecting {1} \n", argc, 11);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver__LoginRole_setParam'.",&tolua_err);
	return 0;
}
int lua_worldserver__LoginRole_getMapID(lua_State* tolua_S)
{
    int argc = 0;
    _LoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"_LoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (_LoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver__LoginRole_getMapID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getMapID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("_LoginRole:getMapID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver__LoginRole_getMapID'.",&tolua_err);
	return 0;
}
int lua_worldserver__LoginRole_getPackLoginRole(lua_State* tolua_S)
{
    int argc = 0;
    _LoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"_LoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (_LoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver__LoginRole_getPackLoginRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        PackLoginRole* arg0;

        ok &= luaval_to_object<PackLoginRole>(tolua_S, 2, "PackLoginRole", &arg0, "_LoginRole:getPackLoginRole");
        if(!ok)
            return 0;
        cobj->getPackLoginRole(arg0);
        return 0;
    }

    gxError("_LoginRole:getPackLoginRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver__LoginRole_getPackLoginRole'.",&tolua_err);
	return 0;
}
int lua_worldserver__LoginRole_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    _LoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"_LoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (_LoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver__LoginRole_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("_LoginRole:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver__LoginRole_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver__LoginRole_toString(lua_State* tolua_S)
{
    int argc = 0;
    _LoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"_LoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (_LoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver__LoginRole_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("_LoginRole:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver__LoginRole_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver__LoginRole_getSceneID(lua_State* tolua_S)
{
    int argc = 0;
    _LoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"_LoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (_LoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver__LoginRole_getSceneID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getSceneID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("_LoginRole:getSceneID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver__LoginRole_getSceneID'.",&tolua_err);
	return 0;
}
int lua_worldserver__LoginRole_isDynamicMap(lua_State* tolua_S)
{
    int argc = 0;
    _LoginRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"_LoginRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (_LoginRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver__LoginRole_isDynamicMap'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isDynamicMap();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("_LoginRole:isDynamicMap has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver__LoginRole_isDynamicMap'.",&tolua_err);
	return 0;
}
int lua_worldserver__LoginRole_constructor(lua_State* tolua_S)
{
    int argc = 0;
    _LoginRole* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new _LoginRole();
        tolua_pushusertype(tolua_S,(void*)cobj,"_LoginRole");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("_LoginRole:_LoginRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver__LoginRole_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (_LoginRole)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"_LoginRole",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        _LoginRole* self = (_LoginRole*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver__LoginRole(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"_LoginRole");
    tolua_cclass(tolua_S,"_LoginRole","_LoginRole","",lua_worldserver__LoginRole_finalize);

    tolua_beginmodule(tolua_S,"_LoginRole");
        tolua_function(tolua_S,"new",lua_worldserver__LoginRole_constructor);
        tolua_function(tolua_S,"setParam",lua_worldserver__LoginRole_setParam);
        tolua_function(tolua_S,"getMapID",lua_worldserver__LoginRole_getMapID);
        tolua_function(tolua_S,"getPackLoginRole",lua_worldserver__LoginRole_getPackLoginRole);
        tolua_function(tolua_S,"cleanUp",lua_worldserver__LoginRole_cleanUp);
        tolua_function(tolua_S,"toString",lua_worldserver__LoginRole_toString);
        tolua_function(tolua_S,"getSceneID",lua_worldserver__LoginRole_getSceneID);
        tolua_function(tolua_S,"isDynamicMap",lua_worldserver__LoginRole_isDynamicMap);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(_LoginRole).name();
    g_luaType[typeName] = "_LoginRole";
    g_typeCast["_LoginRole"] = "_LoginRole";
    return 1;
}

int lua_worldserver_CWorldLoginRoleList_genStrName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_genStrName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->genStrName();
        return 0;
    }

    gxError("CWorldLoginRoleList:genStrName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_genStrName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_selectRole(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_selectRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldLoginRoleList:selectRole");
        if(!ok)
            return 0;
        bool ret = cobj->selectRole(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:selectRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_selectRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_getLastLoginRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_getLastLoginRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getLastLoginRoleUID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:getLastLoginRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_getLastLoginRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_getCurrentRole(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_getCurrentRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        _LoginRole* ret = cobj->getCurrentRole();
        object_to_luaval<_LoginRole>(tolua_S, "_LoginRole",(_LoginRole*)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:getCurrentRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_getCurrentRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_getCurrentRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_getCurrentRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getCurrentRoleUID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:getCurrentRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_getCurrentRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_toString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_isMaxRoleNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_isMaxRoleNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isMaxRoleNum();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:isMaxRoleNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_isMaxRoleNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_clean(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_clean'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->clean();
        return 0;
    }

    gxError("CWorldLoginRoleList:clean has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_clean'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_delRole(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_delRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldLoginRoleList:delRole");
        if(!ok)
            return 0;
        cobj->delRole(arg0);
        return 0;
    }

    gxError("CWorldLoginRoleList:delRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_delRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_addRole(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_addRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        _LoginRole* arg0;

        ok &= luaval_to_object<_LoginRole>(tolua_S, 2, "_LoginRole", &arg0, "CWorldLoginRoleList:addRole");
        if(!ok)
            return 0;
        cobj->addRole(arg0);
        return 0;
    }

    gxError("CWorldLoginRoleList:addRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_addRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_getFirstRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_getFirstRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getFirstRoleUID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:getFirstRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_getFirstRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_getCurrentObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_getCurrentObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getCurrentObjUID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:getCurrentObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_getCurrentObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_isRole(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_isRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldLoginRoleList:isRole");
        if(!ok)
            return 0;
        bool ret = cobj->isRole(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:isRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_isRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_size(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginRoleList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginRoleList_size'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->size();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldLoginRoleList:size has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginRoleList_size'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginRoleList_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginRoleList* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldLoginRoleList();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldLoginRoleList");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldLoginRoleList:CWorldLoginRoleList has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldLoginRoleList_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldLoginRoleList)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldLoginRoleList",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldLoginRoleList* self = (CWorldLoginRoleList*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldLoginRoleList(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldLoginRoleList");
    tolua_cclass(tolua_S,"CWorldLoginRoleList","CWorldLoginRoleList","",lua_worldserver_CWorldLoginRoleList_finalize);

    tolua_beginmodule(tolua_S,"CWorldLoginRoleList");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldLoginRoleList_constructor);
        tolua_function(tolua_S,"genStrName",lua_worldserver_CWorldLoginRoleList_genStrName);
        tolua_function(tolua_S,"selectRole",lua_worldserver_CWorldLoginRoleList_selectRole);
        tolua_function(tolua_S,"getLastLoginRoleUID",lua_worldserver_CWorldLoginRoleList_getLastLoginRoleUID);
        tolua_function(tolua_S,"getCurrentRole",lua_worldserver_CWorldLoginRoleList_getCurrentRole);
        tolua_function(tolua_S,"getCurrentRoleUID",lua_worldserver_CWorldLoginRoleList_getCurrentRoleUID);
        tolua_function(tolua_S,"toString",lua_worldserver_CWorldLoginRoleList_toString);
        tolua_function(tolua_S,"isMaxRoleNum",lua_worldserver_CWorldLoginRoleList_isMaxRoleNum);
        tolua_function(tolua_S,"clean",lua_worldserver_CWorldLoginRoleList_clean);
        tolua_function(tolua_S,"delRole",lua_worldserver_CWorldLoginRoleList_delRole);
        tolua_function(tolua_S,"addRole",lua_worldserver_CWorldLoginRoleList_addRole);
        tolua_function(tolua_S,"getFirstRoleUID",lua_worldserver_CWorldLoginRoleList_getFirstRoleUID);
        tolua_function(tolua_S,"getCurrentObjUID",lua_worldserver_CWorldLoginRoleList_getCurrentObjUID);
        tolua_function(tolua_S,"isRole",lua_worldserver_CWorldLoginRoleList_isRole);
        tolua_function(tolua_S,"size",lua_worldserver_CWorldLoginRoleList_size);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldLoginRoleList).name();
    g_luaType[typeName] = "CWorldLoginRoleList";
    g_typeCast["CWorldLoginRoleList"] = "CWorldLoginRoleList";
    return 1;
}

int lua_worldserver_CWorldUserSimpleData_key2ToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_key2ToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->key2ToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:key2ToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_key2ToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_isKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_isKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:isKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_isKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_key3ToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_key3ToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->key3ToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:key3ToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_key3ToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_keyToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_keyToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->keyToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:keyToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_keyToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_setKey3(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_setKey3'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CCharArray1<50> arg0;

        ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldUserSimpleData:setKey3");
        if(!ok)
            return 0;
        cobj->setKey3(arg0);
        return 0;
    }

    gxError("CWorldUserSimpleData:setKey3 has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_setKey3'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_update(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CWorldUserSimpleData_update'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            unsigned char arg0;
            ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CWorldUserSimpleData:update");

            if (!ok) { break; }
            cobj->update(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            _LoginRole* arg0;
            ok &= luaval_to_object<_LoginRole>(tolua_S, 2, "_LoginRole", &arg0, "CWorldUserSimpleData:update");

            if (!ok) { break; }
            cobj->update(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    gxError("CWorldUserSimpleData:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_update'.",&tolua_err);
    return 0;
}
int lua_worldserver_CWorldUserSimpleData_getKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_getKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getKey2();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:getKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_getKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_getKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_getKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getKey();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:getKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_getKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_isKey3(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_isKey3'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey3();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:isKey3 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_isKey3'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_setKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_setKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUserSimpleData:setKey");
        if(!ok)
            return 0;
        cobj->setKey(arg0);
        return 0;
    }

    gxError("CWorldUserSimpleData:setKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_setKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_toString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_getKey3(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_getKey3'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CCharArray1<50> ret = cobj->getKey3();
        array_string1_to_luaval(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:getKey3 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_getKey3'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_isKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_isKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey2();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserSimpleData:isKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_isKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_setKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserSimpleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserSimpleData_setKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUserSimpleData:setKey2");
        if(!ok)
            return 0;
        cobj->setKey2(arg0);
        return 0;
    }

    gxError("CWorldUserSimpleData:setKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserSimpleData_setKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserSimpleData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserSimpleData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldUserSimpleData();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldUserSimpleData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldUserSimpleData:CWorldUserSimpleData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldUserSimpleData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldUserSimpleData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldUserSimpleData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldUserSimpleData* self = (CWorldUserSimpleData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldUserSimpleData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldUserSimpleData");
    tolua_cclass(tolua_S,"CWorldUserSimpleData","CWorldUserSimpleData","",lua_worldserver_CWorldUserSimpleData_finalize);

    tolua_beginmodule(tolua_S,"CWorldUserSimpleData");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldUserSimpleData_constructor);
        tolua_function(tolua_S,"key2ToString",lua_worldserver_CWorldUserSimpleData_key2ToString);
        tolua_function(tolua_S,"isKey",lua_worldserver_CWorldUserSimpleData_isKey);
        tolua_function(tolua_S,"key3ToString",lua_worldserver_CWorldUserSimpleData_key3ToString);
        tolua_function(tolua_S,"keyToString",lua_worldserver_CWorldUserSimpleData_keyToString);
        tolua_function(tolua_S,"setKey3",lua_worldserver_CWorldUserSimpleData_setKey3);
        tolua_function(tolua_S,"update",lua_worldserver_CWorldUserSimpleData_update);
        tolua_function(tolua_S,"getKey2",lua_worldserver_CWorldUserSimpleData_getKey2);
        tolua_function(tolua_S,"getKey",lua_worldserver_CWorldUserSimpleData_getKey);
        tolua_function(tolua_S,"isKey3",lua_worldserver_CWorldUserSimpleData_isKey3);
        tolua_function(tolua_S,"setKey",lua_worldserver_CWorldUserSimpleData_setKey);
        tolua_function(tolua_S,"toString",lua_worldserver_CWorldUserSimpleData_toString);
        tolua_function(tolua_S,"getKey3",lua_worldserver_CWorldUserSimpleData_getKey3);
        tolua_function(tolua_S,"isKey2",lua_worldserver_CWorldUserSimpleData_isKey2);
        tolua_function(tolua_S,"setKey2",lua_worldserver_CWorldUserSimpleData_setKey2);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldUserSimpleData).name();
    g_luaType[typeName] = "CWorldUserSimpleData";
    g_typeCast["CWorldUserSimpleData"] = "CWorldUserSimpleData";
    return 1;
}

int lua_worldserver_CWorldAllUserMgr_updateUser(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldAllUserMgr_updateUser'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned int arg0;
        unsigned char arg1;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldAllUserMgr:updateUser");

        ok &= luaval_to_uint8(tolua_S, 3,(uint8*)&arg1, "CWorldAllUserMgr:updateUser");
        if(!ok)
            return 0;
        cobj->updateUser(arg0, arg1);
        return 0;
    }

    gxError("CWorldAllUserMgr:updateUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_updateUser'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldAllUserMgr_findUser(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CWorldAllUserMgr_findUser'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            unsigned long long arg0;
            ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldAllUserMgr:findUser");

            if (!ok) { break; }
            CWorldUserSimpleData* ret = cobj->findUser(arg0);
            object_to_luaval<CWorldUserSimpleData>(tolua_S, "CWorldUserSimpleData",(CWorldUserSimpleData*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldAllUserMgr:findUser");

            if (!ok) { break; }
            CWorldUserSimpleData* ret = cobj->findUser(arg0);
            object_to_luaval<CWorldUserSimpleData>(tolua_S, "CWorldUserSimpleData",(CWorldUserSimpleData*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            CCharArray1<50> arg0;
            ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldAllUserMgr:findUser");

            if (!ok) { break; }
            CWorldUserSimpleData* ret = cobj->findUser(arg0);
            object_to_luaval<CWorldUserSimpleData>(tolua_S, "CWorldUserSimpleData",(CWorldUserSimpleData*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CWorldAllUserMgr:findUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_findUser'.",&tolua_err);
    return 0;
}
int lua_worldserver_CWorldAllUserMgr_addUser(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CWorldAllUserMgr_addUser'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            CWorldUserSimpleData* arg0;
            ok &= luaval_to_object<CWorldUserSimpleData>(tolua_S, 2, "CWorldUserSimpleData", &arg0, "CWorldAllUserMgr:addUser");

            if (!ok) { break; }
            bool ret = cobj->addUser(arg0);
            tolua_pushboolean(tolua_S,(bool)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            _LoginRole* arg0;
            ok &= luaval_to_object<_LoginRole>(tolua_S, 2, "_LoginRole", &arg0, "CWorldAllUserMgr:addUser");

            if (!ok) { break; }
            CWorldUserSimpleData* ret = cobj->addUser(arg0);
            object_to_luaval<CWorldUserSimpleData>(tolua_S, "CWorldUserSimpleData",(CWorldUserSimpleData*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            _LoginRole* arg0;
            ok &= luaval_to_object<_LoginRole>(tolua_S, 2, "_LoginRole", &arg0, "CWorldAllUserMgr:addUser");

            if (!ok) { break; }
            bool arg1;
            ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldAllUserMgr:addUser");

            if (!ok) { break; }
            CWorldUserSimpleData* ret = cobj->addUser(arg0, arg1);
            object_to_luaval<CWorldUserSimpleData>(tolua_S, "CWorldUserSimpleData",(CWorldUserSimpleData*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CWorldAllUserMgr:addUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_addUser'.",&tolua_err);
    return 0;
}
int lua_worldserver_CWorldAllUserMgr_loadAll(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldAllUserMgr_loadAll'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->loadAll();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldAllUserMgr:loadAll has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_loadAll'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldAllUserMgr_getObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldAllUserMgr_getObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldAllUserMgr:getObjUID");
        if(!ok)
            return 0;
        unsigned int ret = cobj->getObjUID(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldAllUserMgr:getObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_getObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldAllUserMgr_remove(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CWorldAllUserMgr_remove'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            unsigned long long arg0;
            ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldAllUserMgr:remove");

            if (!ok) { break; }
            CWorldUserSimpleData* ret = cobj->remove(arg0);
            object_to_luaval<CWorldUserSimpleData>(tolua_S, "CWorldUserSimpleData",(CWorldUserSimpleData*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldAllUserMgr:remove");

            if (!ok) { break; }
            CWorldUserSimpleData* ret = cobj->remove(arg0);
            object_to_luaval<CWorldUserSimpleData>(tolua_S, "CWorldUserSimpleData",(CWorldUserSimpleData*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            CCharArray1<50> arg0;
            ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldAllUserMgr:remove");

            if (!ok) { break; }
            CWorldUserSimpleData* ret = cobj->remove(arg0);
            object_to_luaval<CWorldUserSimpleData>(tolua_S, "CWorldUserSimpleData",(CWorldUserSimpleData*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CWorldAllUserMgr:remove has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_remove'.",&tolua_err);
    return 0;
}
int lua_worldserver_CWorldAllUserMgr_getRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldAllUserMgr_getRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldAllUserMgr:getRoleUID");
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getRoleUID(arg0);
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldAllUserMgr:getRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_getRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldAllUserMgr_delUser(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CWorldAllUserMgr_delUser'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            unsigned long long arg0;
            ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldAllUserMgr:delUser");

            if (!ok) { break; }
            cobj->delUser(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned int arg0;
            ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldAllUserMgr:delUser");

            if (!ok) { break; }
            cobj->delUser(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    gxError("CWorldAllUserMgr:delUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_delUser'.",&tolua_err);
    return 0;
}
int lua_worldserver_CWorldAllUserMgr_init(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldAllUserMgr_init'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->init();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldAllUserMgr:init");
        if(!ok)
            return 0;
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldAllUserMgr:init has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_init'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldAllUserMgr_size(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldAllUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldAllUserMgr_size'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->size();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldAllUserMgr:size has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_size'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldAllUserMgr_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldAllUserMgr* ret = CWorldAllUserMgr::GetPtr();
        object_to_luaval<CWorldAllUserMgr>(tolua_S, "CWorldAllUserMgr",(CWorldAllUserMgr*)ret);
        return 1;
    }
    gxError("CWorldAllUserMgr:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldAllUserMgr_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldAllUserMgr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldAllUserMgr* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldAllUserMgr();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldAllUserMgr");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldAllUserMgr:CWorldAllUserMgr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldAllUserMgr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldAllUserMgr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldAllUserMgr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldAllUserMgr* self = (CWorldAllUserMgr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldAllUserMgr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldAllUserMgr");
    tolua_cclass(tolua_S,"CWorldAllUserMgr","CWorldAllUserMgr","CManualSingleton<CWorldAllUserMgr>",lua_worldserver_CWorldAllUserMgr_finalize);

    tolua_beginmodule(tolua_S,"CWorldAllUserMgr");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldAllUserMgr_constructor);
        tolua_function(tolua_S,"updateUser",lua_worldserver_CWorldAllUserMgr_updateUser);
        tolua_function(tolua_S,"findUser",lua_worldserver_CWorldAllUserMgr_findUser);
        tolua_function(tolua_S,"addUser",lua_worldserver_CWorldAllUserMgr_addUser);
        tolua_function(tolua_S,"loadAll",lua_worldserver_CWorldAllUserMgr_loadAll);
        tolua_function(tolua_S,"getObjUID",lua_worldserver_CWorldAllUserMgr_getObjUID);
        tolua_function(tolua_S,"remove",lua_worldserver_CWorldAllUserMgr_remove);
        tolua_function(tolua_S,"getRoleUID",lua_worldserver_CWorldAllUserMgr_getRoleUID);
        tolua_function(tolua_S,"delUser",lua_worldserver_CWorldAllUserMgr_delUser);
        tolua_function(tolua_S,"init",lua_worldserver_CWorldAllUserMgr_init);
        tolua_function(tolua_S,"size",lua_worldserver_CWorldAllUserMgr_size);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CWorldAllUserMgr_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldAllUserMgr).name();
    g_luaType[typeName] = "CWorldAllUserMgr";
    g_typeCast["CWorldAllUserMgr"] = "CWorldAllUserMgr";
    return 1;
}

int lua_worldserver_CCheckText_getFilterContentVec(lua_State* tolua_S)
{
    int argc = 0;
    CCheckText* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CCheckText",0,&tolua_err)) goto tolua_lerror;
    cobj = (CCheckText*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CCheckText_getFilterContentVec'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::vector<std::string>& ret = cobj->getFilterContentVec();
        vector_to_luaval(tolua_S, "std::vector<std::basic_string<char>, std::allocator<std::basic_string<char> > >", ret);
        return 1;
    }

    gxError("CCheckText:getFilterContentVec has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CCheckText_getFilterContentVec'.",&tolua_err);
	return 0;
}
int lua_worldserver_CCheckText_isTextPass(lua_State* tolua_S)
{
    int argc = 0;
    CCheckText* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CCheckText",0,&tolua_err)) goto tolua_lerror;
    cobj = (CCheckText*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CCheckText_isTextPass'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCheckText:isTextPass");
        if(!ok)
            return 0;
        int ret = (int)cobj->isTextPass(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CCheckText:isTextPass has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CCheckText_isTextPass'.",&tolua_err);
	return 0;
}
int lua_worldserver_CCheckText_init(lua_State* tolua_S)
{
    int argc = 0;
    CCheckText* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CCheckText",0,&tolua_err)) goto tolua_lerror;
    cobj = (CCheckText*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CCheckText_init'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCheckText:init");
        if(!ok)
            return 0;
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CCheckText:init has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CCheckText_init'.",&tolua_err);
	return 0;
}
int lua_worldserver_CCheckText_isFilterContent(lua_State* tolua_S)
{
    int argc = 0;
    CCheckText* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CCheckText",0,&tolua_err)) goto tolua_lerror;
    cobj = (CCheckText*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CCheckText_isFilterContent'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CCheckText:isFilterContent");
        if(!ok)
            return 0;
        bool ret = cobj->isFilterContent(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CCheckText:isFilterContent has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CCheckText_isFilterContent'.",&tolua_err);
	return 0;
}
int lua_worldserver_CCheckText_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CCheckText",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CCheckText* ret = CCheckText::GetPtr();
        object_to_luaval<CCheckText>(tolua_S, "CCheckText",(CCheckText*)ret);
        return 1;
    }
    gxError("CCheckText:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CCheckText_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CCheckText_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CCheckText* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CCheckText();
        tolua_pushusertype(tolua_S,(void*)cobj,"CCheckText");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CCheckText:CCheckText has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CCheckText_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CCheckText)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CCheckText",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CCheckText* self = (CCheckText*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CCheckText(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CCheckText");
    tolua_cclass(tolua_S,"CCheckText","CCheckText","CManualSingleton<CCheckText>",lua_worldserver_CCheckText_finalize);

    tolua_beginmodule(tolua_S,"CCheckText");
        tolua_function(tolua_S,"new",lua_worldserver_CCheckText_constructor);
        tolua_function(tolua_S,"getFilterContentVec",lua_worldserver_CCheckText_getFilterContentVec);
        tolua_function(tolua_S,"isTextPass",lua_worldserver_CCheckText_isTextPass);
        tolua_function(tolua_S,"init",lua_worldserver_CCheckText_init);
        tolua_function(tolua_S,"isFilterContent",lua_worldserver_CCheckText_isFilterContent);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CCheckText_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CCheckText).name();
    g_luaType[typeName] = "CCheckText";
    g_typeCast["CCheckText"] = "CCheckText";
    return 1;
}

int lua_worldserver_CRandRoleName_randRoleName(lua_State* tolua_S)
{
    int argc = 0;
    CRandRoleName* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CRandRoleName",0,&tolua_err)) goto tolua_lerror;
    cobj = (CRandRoleName*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CRandRoleName_randRoleName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CRandRoleName:randRoleName");
        if(!ok)
            return 0;
        std::string ret = cobj->randRoleName(arg0);
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CRandRoleName:randRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandRoleName_randRoleName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CRandRoleName_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CRandRoleName",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CRandRoleName* ret = CRandRoleName::GetPtr();
        object_to_luaval<CRandRoleName>(tolua_S, "CRandRoleName",(CRandRoleName*)ret);
        return 1;
    }
    gxError("CRandRoleName:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CRandRoleName_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CRandRoleName_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CRandRoleName* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CRandRoleName();
        tolua_pushusertype(tolua_S,(void*)cobj,"CRandRoleName");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CRandRoleName:CRandRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CRandRoleName_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CRandRoleName)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CRandRoleName",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CRandRoleName* self = (CRandRoleName*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CRandRoleName(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CRandRoleName");
    tolua_cclass(tolua_S,"CRandRoleName","CRandRoleName","CManualSingleton<CRandRoleName>",lua_worldserver_CRandRoleName_finalize);

    tolua_beginmodule(tolua_S,"CRandRoleName");
        tolua_function(tolua_S,"new",lua_worldserver_CRandRoleName_constructor);
        tolua_function(tolua_S,"randRoleName",lua_worldserver_CRandRoleName_randRoleName);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CRandRoleName_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CRandRoleName).name();
    g_luaType[typeName] = "CRandRoleName";
    g_typeCast["CRandRoleName"] = "CRandRoleName";
    return 1;
}

int lua_worldserver_CSceneManager_getNext(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_getNext'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CScene* ret = cobj->getNext();
        object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
        return 1;
    }

    gxError("CSceneManager:getNext has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_getNext'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_isSceneExist(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_isSceneExist'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSceneManager:isSceneExist");
        if(!ok)
            return 0;
        bool ret = cobj->isSceneExist(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSceneManager:isSceneExist has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_isSceneExist'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_getBegin(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_getBegin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CScene* ret = cobj->getBegin();
        object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
        return 1;
    }

    gxError("CSceneManager:getBegin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_getBegin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_findScene(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_findScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSceneManager:findScene");
        if(!ok)
            return 0;
        CScene* ret = cobj->findScene(arg0);
        object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
        return 1;
    }

    gxError("CSceneManager:findScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_findScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_getEmptyScene(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CSceneManager_getEmptyScene'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CSceneManager:getEmptyScene");

            if (!ok) { break; }
            unsigned short arg1;
            ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CSceneManager:getEmptyScene");

            if (!ok) { break; }
            CScene* ret = cobj->getEmptyScene(arg0, arg1);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CSceneManager:getEmptyScene");

            if (!ok) { break; }
            CScene* ret = cobj->getEmptyScene(arg0);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CSceneManager:getEmptyScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_getEmptyScene'.",&tolua_err);
    return 0;
}
int lua_worldserver_CSceneManager_getSceneOwner(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_getSceneOwner'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSceneManager:getSceneOwner");
        if(!ok)
            return 0;
        unsigned int ret = cobj->getSceneOwner(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CSceneManager:getSceneOwner has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_getSceneOwner'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_update(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CSceneManager:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CSceneManager:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_delMapServer(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_delMapServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CSceneManager:delMapServer");
        if(!ok)
            return 0;
        cobj->delMapServer(arg0);
        return 0;
    }

    gxError("CSceneManager:delMapServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_delMapServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_changeSceneOwner(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_changeSceneOwner'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned long long arg0;
        unsigned int arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSceneManager:changeSceneOwner");

        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CSceneManager:changeSceneOwner");
        if(!ok)
            return 0;
        cobj->changeSceneOwner(arg0, arg1);
        return 0;
    }

    gxError("CSceneManager:changeSceneOwner has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_changeSceneOwner'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_init(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_init'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CSceneManager:init");
        if(!ok)
            return 0;
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSceneManager:init has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_init'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_addScene(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_addScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        SceneData* arg0;

        ok &= luaval_to_object<SceneData>(tolua_S, 2, "SceneData", &arg0, "CSceneManager:addScene");
        if(!ok)
            return 0;
        CScene* ret = cobj->addScene(arg0);
        object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
        return 1;
    }

    gxError("CSceneManager:addScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_addScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_getLeastScene(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CSceneManager_getLeastScene'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CSceneManager:getLeastScene");

            if (!ok) { break; }
            unsigned short arg1;
            ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CSceneManager:getLeastScene");

            if (!ok) { break; }
            CScene* ret = cobj->getLeastScene(arg0, arg1);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            unsigned short arg0;
            ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CSceneManager:getLeastScene");

            if (!ok) { break; }
            CScene* ret = cobj->getLeastScene(arg0);
            object_to_luaval<CScene>(tolua_S, "CScene",(CScene*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CSceneManager:getLeastScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_getLeastScene'.",&tolua_err);
    return 0;
}
int lua_worldserver_CSceneManager_delScene(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_delScene'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSceneManager:delScene");
        if(!ok)
            return 0;
        cobj->delScene(arg0);
        return 0;
    }

    gxError("CSceneManager:delScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_delScene'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_size(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSceneManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSceneManager_size'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->size();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CSceneManager:size has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_size'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSceneManager_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CSceneManager",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CSceneManager* ret = CSceneManager::GetPtr();
        object_to_luaval<CSceneManager>(tolua_S, "CSceneManager",(CSceneManager*)ret);
        return 1;
    }
    gxError("CSceneManager:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSceneManager_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CSceneManager_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CSceneManager* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CSceneManager();
        tolua_pushusertype(tolua_S,(void*)cobj,"CSceneManager");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CSceneManager:CSceneManager has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CSceneManager_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CSceneManager)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CSceneManager",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CSceneManager* self = (CSceneManager*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CSceneManager(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CSceneManager");
    tolua_cclass(tolua_S,"CSceneManager","CSceneManager","CHashMultiIndex<CScene, false, 18446744073709551615>",lua_worldserver_CSceneManager_finalize);

    tolua_beginmodule(tolua_S,"CSceneManager");
        tolua_function(tolua_S,"new",lua_worldserver_CSceneManager_constructor);
        tolua_function(tolua_S,"getNext",lua_worldserver_CSceneManager_getNext);
        tolua_function(tolua_S,"isSceneExist",lua_worldserver_CSceneManager_isSceneExist);
        tolua_function(tolua_S,"getBegin",lua_worldserver_CSceneManager_getBegin);
        tolua_function(tolua_S,"findScene",lua_worldserver_CSceneManager_findScene);
        tolua_function(tolua_S,"getEmptyScene",lua_worldserver_CSceneManager_getEmptyScene);
        tolua_function(tolua_S,"getSceneOwner",lua_worldserver_CSceneManager_getSceneOwner);
        tolua_function(tolua_S,"update",lua_worldserver_CSceneManager_update);
        tolua_function(tolua_S,"delMapServer",lua_worldserver_CSceneManager_delMapServer);
        tolua_function(tolua_S,"changeSceneOwner",lua_worldserver_CSceneManager_changeSceneOwner);
        tolua_function(tolua_S,"init",lua_worldserver_CSceneManager_init);
        tolua_function(tolua_S,"addScene",lua_worldserver_CSceneManager_addScene);
        tolua_function(tolua_S,"getLeastScene",lua_worldserver_CSceneManager_getLeastScene);
        tolua_function(tolua_S,"delScene",lua_worldserver_CSceneManager_delScene);
        tolua_function(tolua_S,"size",lua_worldserver_CSceneManager_size);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CSceneManager_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CSceneManager).name();
    g_luaType[typeName] = "CSceneManager";
    g_typeCast["CSceneManager"] = "CSceneManager";
    return 1;
}

int lua_worldserver_CWorldServerConfig_getRecordeSocketAttr(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getRecordeSocketAttr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const SockAttr* ret = cobj->getRecordeSocketAttr();
        object_to_luaval<SockAttr>(tolua_S, "SockAttr",(SockAttr*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getRecordeSocketAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getRecordeSocketAttr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getBillSocketAttr(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getBillSocketAttr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const SockAttr* ret = cobj->getBillSocketAttr();
        object_to_luaval<SockAttr>(tolua_S, "SockAttr",(SockAttr*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getBillSocketAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getBillSocketAttr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getToClientPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getToClientPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const unsigned short ret = cobj->getToClientPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getToClientPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getToClientPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getManagerServerPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getManagerServerPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getManagerServerPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getManagerServerPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getManagerServerPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getPwdSocketAttr(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getPwdSocketAttr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const SockAttr* ret = cobj->getPwdSocketAttr();
        object_to_luaval<SockAttr>(tolua_S, "SockAttr",(SockAttr*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getPwdSocketAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getPwdSocketAttr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getHttpCheck(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getHttpCheck'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->getHttpCheck();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getHttpCheck has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getHttpCheck'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getPwdIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getPwdIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getPwdIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getPwdIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getPwdIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getRecordeServerPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getRecordeServerPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getRecordeServerPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getRecordeServerPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getRecordeServerPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getBillListenIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getBillListenIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->getBillListenIP();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldServerConfig:getBillListenIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getBillListenIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getToClientIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getToClientIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string& ret = cobj->getToClientIP();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldServerConfig:getToClientIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getToClientIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_isConfigRemotePath(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_isConfigRemotePath'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isConfigRemotePath();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServerConfig:isConfigRemotePath has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_isConfigRemotePath'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getClientListenIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getClientListenIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getClientListenIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getClientListenIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getClientListenIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getMapListenPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getMapListenPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getMapListenPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getMapListenPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getMapListenPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getCheckTextFileName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getCheckTextFileName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->getCheckTextFileName();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldServerConfig:getCheckTextFileName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getCheckTextFileName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getHttpListenIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getHttpListenIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->getHttpListenIP();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldServerConfig:getHttpListenIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getHttpListenIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getManagerServerIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getManagerServerIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getManagerServerIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getManagerServerIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getManagerServerIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getGmCheck(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getGmCheck'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->getGmCheck();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getGmCheck has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getGmCheck'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getWorldServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getWorldServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getWorldServerID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getWorldServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getWorldServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getHttpListenPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getHttpListenPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getHttpListenPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getHttpListenPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getHttpListenPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getMapServerSocketAttr(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getMapServerSocketAttr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const SockAttr* ret = cobj->getMapServerSocketAttr();
        object_to_luaval<SockAttr>(tolua_S, "SockAttr",(SockAttr*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getMapServerSocketAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getMapServerSocketAttr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getClientListenPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getClientListenPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getClientListenPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getClientListenPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getClientListenPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getLoginServerPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getLoginServerPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getLoginServerPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getLoginServerPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getLoginServerPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_setGmCheck(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_setGmCheck'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CWorldServerConfig:setGmCheck");
        if(!ok)
            return 0;
        cobj->setGmCheck(arg0);
        return 0;
    }

    gxError("CWorldServerConfig:setGmCheck has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_setGmCheck'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getDbPwd(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getDbPwd'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getDbPwd();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getDbPwd has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getDbPwd'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getMapListenIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getMapListenIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getMapListenIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getMapListenIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getMapListenIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_setHttpCheck(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_setHttpCheck'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CWorldServerConfig:setHttpCheck");
        if(!ok)
            return 0;
        cobj->setHttpCheck(arg0);
        return 0;
    }

    gxError("CWorldServerConfig:setHttpCheck has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_setHttpCheck'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getBillListenPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getBillListenPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getBillListenPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getBillListenPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getBillListenPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getGmListenPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getGmListenPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getGmListenPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getGmListenPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getGmListenPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getDbHostIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getDbHostIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getDbHostIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getDbHostIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getDbHostIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getGmSocketAttr(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getGmSocketAttr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const SockAttr* ret = cobj->getGmSocketAttr();
        object_to_luaval<SockAttr>(tolua_S, "SockAttr",(SockAttr*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getGmSocketAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getGmSocketAttr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getDbPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getDbPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getDbPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getDbPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getDbPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getGmListenIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getGmListenIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getGmListenIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getGmListenIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getGmListenIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_setHttpListenPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_setHttpListenPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldServerConfig:setHttpListenPort");
        if(!ok)
            return 0;
        cobj->setHttpListenPort(arg0);
        return 0;
    }

    gxError("CWorldServerConfig:setHttpListenPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_setHttpListenPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getDbName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getDbName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getDbName();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getDbName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getDbName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getConfigTblPath(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getConfigTblPath'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->getConfigTblPath();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldServerConfig:getConfigTblPath has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getConfigTblPath'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getSvrMgrSocketAttr(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getSvrMgrSocketAttr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const SockAttr* ret = cobj->getSvrMgrSocketAttr();
        object_to_luaval<SockAttr>(tolua_S, "SockAttr",(SockAttr*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getSvrMgrSocketAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getSvrMgrSocketAttr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getDbUser(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getDbUser'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getDbUser();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getDbUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getDbUser'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getClientSocketAttr(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getClientSocketAttr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const SockAttr* ret = cobj->getClientSocketAttr();
        object_to_luaval<SockAttr>(tolua_S, "SockAttr",(SockAttr*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getClientSocketAttr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getClientSocketAttr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getLoginPlayerNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getLoginPlayerNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getLoginPlayerNum();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getLoginPlayerNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getLoginPlayerNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getRecordeServerIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getRecordeServerIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getRecordeServerIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getRecordeServerIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getRecordeServerIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_setHttpListenIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_setHttpListenIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CWorldServerConfig:setHttpListenIP");
        if(!ok)
            return 0;
        cobj->setHttpListenIP(arg0);
        return 0;
    }

    gxError("CWorldServerConfig:setHttpListenIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_setHttpListenIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getPwdPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getPwdPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPwdPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getPwdPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getPwdPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getClientNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getClientNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getClientNum();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getClientNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getClientNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getLoginServerIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getLoginServerIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getLoginServerIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getLoginServerIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getLoginServerIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_getMapServerNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerConfig*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerConfig_getMapServerNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getMapServerNum();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerConfig:getMapServerNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerConfig_getMapServerNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerConfig_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerConfig* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CWorldServerConfig:CWorldServerConfig");
        if(!ok)
            return 0;
        cobj = new CWorldServerConfig(arg0);
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldServerConfig");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldServerConfig:CWorldServerConfig has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

}

static int lua_worldserver_CWorldServerConfig_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldServerConfig)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldServerConfig",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldServerConfig* self = (CWorldServerConfig*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldServerConfig(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldServerConfig");
    tolua_cclass(tolua_S,"CWorldServerConfig","CWorldServerConfig","CGxServiceConfig",lua_worldserver_CWorldServerConfig_finalize);

    tolua_beginmodule(tolua_S,"CWorldServerConfig");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldServerConfig_constructor);
        tolua_function(tolua_S,"getRecordeSocketAttr",lua_worldserver_CWorldServerConfig_getRecordeSocketAttr);
        tolua_function(tolua_S,"getBillSocketAttr",lua_worldserver_CWorldServerConfig_getBillSocketAttr);
        tolua_function(tolua_S,"getToClientPort",lua_worldserver_CWorldServerConfig_getToClientPort);
        tolua_function(tolua_S,"getManagerServerPort",lua_worldserver_CWorldServerConfig_getManagerServerPort);
        tolua_function(tolua_S,"getPwdSocketAttr",lua_worldserver_CWorldServerConfig_getPwdSocketAttr);
        tolua_function(tolua_S,"getHttpCheck",lua_worldserver_CWorldServerConfig_getHttpCheck);
        tolua_function(tolua_S,"getPwdIP",lua_worldserver_CWorldServerConfig_getPwdIP);
        tolua_function(tolua_S,"getRecordeServerPort",lua_worldserver_CWorldServerConfig_getRecordeServerPort);
        tolua_function(tolua_S,"getBillListenIP",lua_worldserver_CWorldServerConfig_getBillListenIP);
        tolua_function(tolua_S,"getToClientIP",lua_worldserver_CWorldServerConfig_getToClientIP);
        tolua_function(tolua_S,"isConfigRemotePath",lua_worldserver_CWorldServerConfig_isConfigRemotePath);
        tolua_function(tolua_S,"getClientListenIP",lua_worldserver_CWorldServerConfig_getClientListenIP);
        tolua_function(tolua_S,"getMapListenPort",lua_worldserver_CWorldServerConfig_getMapListenPort);
        tolua_function(tolua_S,"getCheckTextFileName",lua_worldserver_CWorldServerConfig_getCheckTextFileName);
        tolua_function(tolua_S,"getHttpListenIP",lua_worldserver_CWorldServerConfig_getHttpListenIP);
        tolua_function(tolua_S,"getManagerServerIP",lua_worldserver_CWorldServerConfig_getManagerServerIP);
        tolua_function(tolua_S,"getGmCheck",lua_worldserver_CWorldServerConfig_getGmCheck);
        tolua_function(tolua_S,"getWorldServerID",lua_worldserver_CWorldServerConfig_getWorldServerID);
        tolua_function(tolua_S,"getHttpListenPort",lua_worldserver_CWorldServerConfig_getHttpListenPort);
        tolua_function(tolua_S,"getMapServerSocketAttr",lua_worldserver_CWorldServerConfig_getMapServerSocketAttr);
        tolua_function(tolua_S,"getClientListenPort",lua_worldserver_CWorldServerConfig_getClientListenPort);
        tolua_function(tolua_S,"getLoginServerPort",lua_worldserver_CWorldServerConfig_getLoginServerPort);
        tolua_function(tolua_S,"setGmCheck",lua_worldserver_CWorldServerConfig_setGmCheck);
        tolua_function(tolua_S,"getDbPwd",lua_worldserver_CWorldServerConfig_getDbPwd);
        tolua_function(tolua_S,"getMapListenIP",lua_worldserver_CWorldServerConfig_getMapListenIP);
        tolua_function(tolua_S,"setHttpCheck",lua_worldserver_CWorldServerConfig_setHttpCheck);
        tolua_function(tolua_S,"getBillListenPort",lua_worldserver_CWorldServerConfig_getBillListenPort);
        tolua_function(tolua_S,"getGmListenPort",lua_worldserver_CWorldServerConfig_getGmListenPort);
        tolua_function(tolua_S,"getDbHostIP",lua_worldserver_CWorldServerConfig_getDbHostIP);
        tolua_function(tolua_S,"getGmSocketAttr",lua_worldserver_CWorldServerConfig_getGmSocketAttr);
        tolua_function(tolua_S,"getDbPort",lua_worldserver_CWorldServerConfig_getDbPort);
        tolua_function(tolua_S,"getGmListenIP",lua_worldserver_CWorldServerConfig_getGmListenIP);
        tolua_function(tolua_S,"setHttpListenPort",lua_worldserver_CWorldServerConfig_setHttpListenPort);
        tolua_function(tolua_S,"getDbName",lua_worldserver_CWorldServerConfig_getDbName);
        tolua_function(tolua_S,"getConfigTblPath",lua_worldserver_CWorldServerConfig_getConfigTblPath);
        tolua_function(tolua_S,"getSvrMgrSocketAttr",lua_worldserver_CWorldServerConfig_getSvrMgrSocketAttr);
        tolua_function(tolua_S,"getDbUser",lua_worldserver_CWorldServerConfig_getDbUser);
        tolua_function(tolua_S,"getClientSocketAttr",lua_worldserver_CWorldServerConfig_getClientSocketAttr);
        tolua_function(tolua_S,"getLoginPlayerNum",lua_worldserver_CWorldServerConfig_getLoginPlayerNum);
        tolua_function(tolua_S,"getRecordeServerIP",lua_worldserver_CWorldServerConfig_getRecordeServerIP);
        tolua_function(tolua_S,"setHttpListenIP",lua_worldserver_CWorldServerConfig_setHttpListenIP);
        tolua_function(tolua_S,"getPwdPort",lua_worldserver_CWorldServerConfig_getPwdPort);
        tolua_function(tolua_S,"getClientNum",lua_worldserver_CWorldServerConfig_getClientNum);
        tolua_function(tolua_S,"getLoginServerIP",lua_worldserver_CWorldServerConfig_getLoginServerIP);
        tolua_function(tolua_S,"getMapServerNum",lua_worldserver_CWorldServerConfig_getMapServerNum);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldServerConfig).name();
    g_luaType[typeName] = "CWorldServerConfig";
    g_typeCast["CWorldServerConfig"] = "CWorldServerConfig";
    return 1;
}

int lua_worldserver_CWorldServerInfo_getFirstStartTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerInfo_getFirstStartTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getFirstStartTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerInfo:getFirstStartTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerInfo_getFirstStartTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerInfo_getOpenTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerInfo_getOpenTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getOpenTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServerInfo:getOpenTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerInfo_getOpenTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerInfo_setOpenTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerInfo_setOpenTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldServerInfo:setOpenTime");
        if(!ok)
            return 0;
        cobj->setOpenTime(arg0);
        return 0;
    }

    gxError("CWorldServerInfo:setOpenTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerInfo_setOpenTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerInfo_setFirstStartTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerInfo_setFirstStartTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldServerInfo:setFirstStartTime");
        if(!ok)
            return 0;
        cobj->setFirstStartTime(arg0);
        return 0;
    }

    gxError("CWorldServerInfo:setFirstStartTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerInfo_setFirstStartTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldServerInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldServerInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldServerInfo:CWorldServerInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldServerInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldServerInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldServerInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldServerInfo* self = (CWorldServerInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldServerInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldServerInfo");
    tolua_cclass(tolua_S,"CWorldServerInfo","CWorldServerInfo","",lua_worldserver_CWorldServerInfo_finalize);

    tolua_beginmodule(tolua_S,"CWorldServerInfo");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldServerInfo_constructor);
        tolua_function(tolua_S,"getFirstStartTime",lua_worldserver_CWorldServerInfo_getFirstStartTime);
        tolua_function(tolua_S,"getOpenTime",lua_worldserver_CWorldServerInfo_getOpenTime);
        tolua_function(tolua_S,"setOpenTime",lua_worldserver_CWorldServerInfo_setOpenTime);
        tolua_function(tolua_S,"setFirstStartTime",lua_worldserver_CWorldServerInfo_setFirstStartTime);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldServerInfo).name();
    g_luaType[typeName] = "CWorldServerInfo";
    g_typeCast["CWorldServerInfo"] = "CWorldServerInfo";
    return 1;
}

int lua_worldserver_ServerData_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    ServerData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ServerData",0,&tolua_err)) goto tolua_lerror;
    cobj = (ServerData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ServerData_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("ServerData:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ServerData_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_ServerData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ServerData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new ServerData();
        tolua_pushusertype(tolua_S,(void*)cobj,"ServerData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("ServerData:ServerData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_ServerData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (ServerData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"ServerData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        ServerData* self = (ServerData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_ServerData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ServerData");
    tolua_cclass(tolua_S,"ServerData","ServerData","",lua_worldserver_ServerData_finalize);

    tolua_beginmodule(tolua_S,"ServerData");
        tolua_function(tolua_S,"new",lua_worldserver_ServerData_constructor);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_ServerData_cleanUp);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ServerData).name();
    g_luaType[typeName] = "ServerData";
    g_typeCast["ServerData"] = "ServerData";
    return 1;
}

int lua_worldserver_LoginServerData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    LoginServerData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new LoginServerData();
        tolua_pushusertype(tolua_S,(void*)cobj,"LoginServerData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("LoginServerData:LoginServerData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_LoginServerData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (LoginServerData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"LoginServerData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        LoginServerData* self = (LoginServerData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_LoginServerData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"LoginServerData");
    tolua_cclass(tolua_S,"LoginServerData","LoginServerData","",lua_worldserver_LoginServerData_finalize);

    tolua_beginmodule(tolua_S,"LoginServerData");
        tolua_function(tolua_S,"new",lua_worldserver_LoginServerData_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(LoginServerData).name();
    g_luaType[typeName] = "LoginServerData";
    g_typeCast["LoginServerData"] = "LoginServerData";
    return 1;
}

int lua_worldserver_WorldServerName_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WorldServerName* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WorldServerName();
        tolua_pushusertype(tolua_S,(void*)cobj,"WorldServerName");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WorldServerName:WorldServerName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WorldServerName_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WorldServerName)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WorldServerName",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WorldServerName* self = (WorldServerName*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WorldServerName(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WorldServerName");
    tolua_cclass(tolua_S,"WorldServerName","WorldServerName","IArrayEnable<WorldServerName>",lua_worldserver_WorldServerName_finalize);

    tolua_beginmodule(tolua_S,"WorldServerName");
        tolua_function(tolua_S,"new",lua_worldserver_WorldServerName_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WorldServerName).name();
    g_luaType[typeName] = "WorldServerName";
    g_typeCast["WorldServerName"] = "WorldServerName";
    return 1;
}

int lua_worldserver_WorldServerData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WorldServerData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WorldServerData();
        tolua_pushusertype(tolua_S,(void*)cobj,"WorldServerData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WorldServerData:WorldServerData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WorldServerData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WorldServerData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WorldServerData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WorldServerData* self = (WorldServerData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WorldServerData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WorldServerData");
    tolua_cclass(tolua_S,"WorldServerData","WorldServerData","",lua_worldserver_WorldServerData_finalize);

    tolua_beginmodule(tolua_S,"WorldServerData");
        tolua_function(tolua_S,"new",lua_worldserver_WorldServerData_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WorldServerData).name();
    g_luaType[typeName] = "WorldServerData";
    g_typeCast["WorldServerData"] = "WorldServerData";
    return 1;
}

static int lua_worldserver_RoleHeart_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (RoleHeart)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"RoleHeart",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        RoleHeart* self = (RoleHeart*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_RoleHeart(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"RoleHeart");
    tolua_cclass(tolua_S,"RoleHeart","RoleHeart","",nullptr);

    tolua_beginmodule(tolua_S,"RoleHeart");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(RoleHeart).name();
    g_luaType[typeName] = "RoleHeart";
    g_typeCast["RoleHeart"] = "RoleHeart";
    return 1;
}

int lua_worldserver_CGameDatabaseHandler_breath(lua_State* tolua_S)
{
    int argc = 0;
    CGameDatabaseHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameDatabaseHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameDatabaseHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameDatabaseHandler_breath'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CGameDatabaseHandler:breath");
        if(!ok)
            return 0;
        cobj->breath(arg0);
        return 0;
    }

    gxError("CGameDatabaseHandler:breath has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameDatabaseHandler_breath'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameDatabaseHandler_getSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CGameDatabaseHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameDatabaseHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameDatabaseHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameDatabaseHandler_getSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getSocketIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CGameDatabaseHandler:getSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameDatabaseHandler_getSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameDatabaseHandler_setSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CGameDatabaseHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameDatabaseHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameDatabaseHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameDatabaseHandler_setSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CGameDatabaseHandler:setSocketIndex");
        if(!ok)
            return 0;
        cobj->setSocketIndex(arg0);
        return 0;
    }

    gxError("CGameDatabaseHandler:setSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameDatabaseHandler_setSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CGameDatabaseHandler_setSocketMgr(lua_State* tolua_S)
{
    int argc = 0;
    CGameDatabaseHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CGameDatabaseHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CGameDatabaseHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CGameDatabaseHandler_setSocketMgr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        GXMISC::CNetModule* arg0;

        ok &= luaval_to_object<GXMISC::CNetModule>(tolua_S, 2, "CNetModule", &arg0, "CGameDatabaseHandler:setSocketMgr");
        if(!ok)
            return 0;
        cobj->setSocketMgr(arg0);
        return 0;
    }

    gxError("CGameDatabaseHandler:setSocketMgr has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CGameDatabaseHandler_setSocketMgr'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CGameDatabaseHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CGameDatabaseHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CGameDatabaseHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CGameDatabaseHandler* self = (CGameDatabaseHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CGameDatabaseHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CGameDatabaseHandler");
    tolua_cclass(tolua_S,"CGameDatabaseHandler","CGameDatabaseHandler","CDatabaseHandler",nullptr);

    tolua_beginmodule(tolua_S,"CGameDatabaseHandler");
        tolua_function(tolua_S,"breath",lua_worldserver_CGameDatabaseHandler_breath);
        tolua_function(tolua_S,"getSocketIndex",lua_worldserver_CGameDatabaseHandler_getSocketIndex);
        tolua_function(tolua_S,"setSocketIndex",lua_worldserver_CGameDatabaseHandler_setSocketIndex);
        tolua_function(tolua_S,"setSocketMgr",lua_worldserver_CGameDatabaseHandler_setSocketMgr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CGameDatabaseHandler).name();
    g_luaType[typeName] = "CGameDatabaseHandler";
    g_typeCast["CGameDatabaseHandler"] = "CGameDatabaseHandler";
    return 1;
}

int lua_worldserver_CWorldDbServerHandler_handle(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbServerHandler_handle'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        char* arg0;
        unsigned int arg1;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CWorldDbServerHandler:handle"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CWorldDbServerHandler:handle");
        if(!ok)
            return 0;
        int ret = (int)cobj->handle(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldDbServerHandler:handle has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbServerHandler_handle'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbServerHandler_sendGameInitTask(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbServerHandler_sendGameInitTask'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->sendGameInitTask();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldDbServerHandler:sendGameInitTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbServerHandler_sendGameInitTask'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbServerHandler_breath(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbServerHandler_breath'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldDbServerHandler:breath");
        if(!ok)
            return 0;
        cobj->breath(arg0);
        return 0;
    }

    gxError("CWorldDbServerHandler:breath has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbServerHandler_breath'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbServerHandler_start(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbServerHandler_start'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->start();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldDbServerHandler:start has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbServerHandler_start'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbServerHandler_sendServerInitTask(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbServerHandler_sendServerInitTask'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->sendServerInitTask();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldDbServerHandler:sendServerInitTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbServerHandler_sendServerInitTask'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbServerHandler_close(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbServerHandler_close'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->close();
        return 0;
    }

    gxError("CWorldDbServerHandler:close has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbServerHandler_close'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbServerHandler_sendLoadUserData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbServerHandler_sendLoadUserData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldDbServerHandler:sendLoadUserData");
        if(!ok)
            return 0;
        bool ret = cobj->sendLoadUserData(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldDbServerHandler:sendLoadUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbServerHandler_sendLoadUserData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbServerHandler_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerHandler* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbServerHandler();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbServerHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }
    if (argc == 1) 
    {
        GXMISC::CDatabaseConnWrap* arg0;

        ok &= luaval_to_object<GXMISC::CDatabaseConnWrap>(tolua_S, 2, "CDatabaseConnWrap", &arg0, "CWorldDbServerHandler:CWorldDbServerHandler");
        if(!ok)
            return 0;
        cobj = new CWorldDbServerHandler(arg0);
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbServerHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }
    if (argc == 2) 
    {
        GXMISC::CDatabaseConnWrap* arg0;
        unsigned long long arg1;

        ok &= luaval_to_object<GXMISC::CDatabaseConnWrap>(tolua_S, 2, "CDatabaseConnWrap", &arg0, "CWorldDbServerHandler:CWorldDbServerHandler");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldDbServerHandler:CWorldDbServerHandler");
        if(!ok)
            return 0;
        cobj = new CWorldDbServerHandler(arg0, arg1);
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbServerHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbServerHandler:CWorldDbServerHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbServerHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbServerHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbServerHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbServerHandler* self = (CWorldDbServerHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbServerHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbServerHandler");
    tolua_cclass(tolua_S,"CWorldDbServerHandler","CWorldDbServerHandler","CGameDatabaseHandler",lua_worldserver_CWorldDbServerHandler_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbServerHandler");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbServerHandler_constructor);
        tolua_function(tolua_S,"handle",lua_worldserver_CWorldDbServerHandler_handle);
        tolua_function(tolua_S,"sendGameInitTask",lua_worldserver_CWorldDbServerHandler_sendGameInitTask);
        tolua_function(tolua_S,"breath",lua_worldserver_CWorldDbServerHandler_breath);
        tolua_function(tolua_S,"start",lua_worldserver_CWorldDbServerHandler_start);
        tolua_function(tolua_S,"sendServerInitTask",lua_worldserver_CWorldDbServerHandler_sendServerInitTask);
        tolua_function(tolua_S,"close",lua_worldserver_CWorldDbServerHandler_close);
        tolua_function(tolua_S,"sendLoadUserData",lua_worldserver_CWorldDbServerHandler_sendLoadUserData);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbServerHandler).name();
    g_luaType[typeName] = "CWorldDbServerHandler";
    g_typeCast["CWorldDbServerHandler"] = "CWorldDbServerHandler";
    return 1;
}

int lua_worldserver_CWorldServerData_getDataPtr(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerData_getDataPtr'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        WorldServerData* ret = cobj->getDataPtr();
        object_to_luaval<WorldServerData>(tolua_S, "WorldServerData",(WorldServerData*)ret);
        return 1;
    }

    gxError("CWorldServerData:getDataPtr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerData_getDataPtr'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerData_update(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerData_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldServerData:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CWorldServerData:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerData_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerData_getDbHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServerData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServerData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServerData_getDbHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldDbServerHandler* ret = cobj->getDbHandler();
        object_to_luaval<CWorldDbServerHandler>(tolua_S, "CWorldDbServerHandler",(CWorldDbServerHandler*)ret);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CWorldServerData:getDbHandler");
        if(!ok)
            return 0;
        CWorldDbServerHandler* ret = cobj->getDbHandler(arg0);
        object_to_luaval<CWorldDbServerHandler>(tolua_S, "CWorldDbServerHandler",(CWorldDbServerHandler*)ret);
        return 1;
    }

    gxError("CWorldServerData:getDbHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerData_getDbHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServerData_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldServerData",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldServerData* ret = CWorldServerData::GetPtr();
        object_to_luaval<CWorldServerData>(tolua_S, "CWorldServerData",(CWorldServerData*)ret);
        return 1;
    }
    gxError("CWorldServerData:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServerData_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldServerData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServerData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldServerData();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldServerData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldServerData:CWorldServerData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldServerData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldServerData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldServerData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldServerData* self = (CWorldServerData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldServerData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldServerData");
    tolua_cclass(tolua_S,"CWorldServerData","CWorldServerData","CManualSingleton<CWorldServerData>",lua_worldserver_CWorldServerData_finalize);

    tolua_beginmodule(tolua_S,"CWorldServerData");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldServerData_constructor);
        tolua_function(tolua_S,"getDataPtr",lua_worldserver_CWorldServerData_getDataPtr);
        tolua_function(tolua_S,"update",lua_worldserver_CWorldServerData_update);
        tolua_function(tolua_S,"getDbHandler",lua_worldserver_CWorldServerData_getDbHandler);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CWorldServerData_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldServerData).name();
    g_luaType[typeName] = "CWorldServerData";
    g_typeCast["CWorldServerData"] = "CWorldServerData";
    return 1;
}

int lua_worldserver_CScriptEngineCommon_bindToScript(lua_State* tolua_S)
{
    int argc = 0;
    CScriptEngineCommon* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CScriptEngineCommon",0,&tolua_err)) goto tolua_lerror;
    cobj = (CScriptEngineCommon*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CScriptEngineCommon_bindToScript'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->bindToScript();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CScriptEngineCommon:bindToScript has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CScriptEngineCommon_bindToScript'.",&tolua_err);
	return 0;
}
int lua_worldserver_CScriptEngineCommon_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CScriptEngineCommon* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CScriptEngineCommon();
        tolua_pushusertype(tolua_S,(void*)cobj,"CScriptEngineCommon");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CScriptEngineCommon:CScriptEngineCommon");
        if(!ok)
            return 0;
        cobj = new CScriptEngineCommon(arg0);
        tolua_pushusertype(tolua_S,(void*)cobj,"CScriptEngineCommon");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CScriptEngineCommon:CScriptEngineCommon has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CScriptEngineCommon_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CScriptEngineCommon)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CScriptEngineCommon",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CScriptEngineCommon* self = (CScriptEngineCommon*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CScriptEngineCommon(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CScriptEngineCommon");
    tolua_cclass(tolua_S,"CScriptEngineCommon","CScriptEngineCommon","CLuaVM",lua_worldserver_CScriptEngineCommon_finalize);

    tolua_beginmodule(tolua_S,"CScriptEngineCommon");
        tolua_function(tolua_S,"new",lua_worldserver_CScriptEngineCommon_constructor);
        tolua_function(tolua_S,"bindToScript",lua_worldserver_CScriptEngineCommon_bindToScript);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CScriptEngineCommon).name();
    g_luaType[typeName] = "CScriptEngineCommon";
    g_typeCast["CScriptEngineCommon"] = "CScriptEngineCommon";
    return 1;
}

int lua_worldserver_CWorldScriptEngine_bindToScript(lua_State* tolua_S)
{
    int argc = 0;
    CWorldScriptEngine* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldScriptEngine",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldScriptEngine*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldScriptEngine_bindToScript'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->bindToScript();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldScriptEngine:bindToScript has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldScriptEngine_bindToScript'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CWorldScriptEngine_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldScriptEngine)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldScriptEngine",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldScriptEngine* self = (CWorldScriptEngine*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldScriptEngine(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldScriptEngine");
    tolua_cclass(tolua_S,"CWorldScriptEngine","CWorldScriptEngine","CScriptEngineCommon",nullptr);

    tolua_beginmodule(tolua_S,"CWorldScriptEngine");
        tolua_function(tolua_S,"bindToScript",lua_worldserver_CWorldScriptEngine_bindToScript);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldScriptEngine).name();
    g_luaType[typeName] = "CWorldScriptEngine";
    g_typeCast["CWorldScriptEngine"] = "CWorldScriptEngine";
    return 1;
}

int lua_worldserver_XMServerRegiste_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    XMServerRegiste* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"XMServerRegiste",0,&tolua_err)) goto tolua_lerror;
    cobj = (XMServerRegiste*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_XMServerRegiste_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("XMServerRegiste:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_XMServerRegiste_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_XMServerRegiste_constructor(lua_State* tolua_S)
{
    int argc = 0;
    XMServerRegiste* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new XMServerRegiste();
        tolua_pushusertype(tolua_S,(void*)cobj,"XMServerRegiste");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("XMServerRegiste:XMServerRegiste has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_XMServerRegiste_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (XMServerRegiste)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"XMServerRegiste",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        XMServerRegiste* self = (XMServerRegiste*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_XMServerRegiste(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"XMServerRegiste");
    tolua_cclass(tolua_S,"XMServerRegiste","XMServerRegiste","CRequestPacket",lua_worldserver_XMServerRegiste_finalize);

    tolua_beginmodule(tolua_S,"XMServerRegiste");
        tolua_function(tolua_S,"new",lua_worldserver_XMServerRegiste_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_XMServerRegiste_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(XMServerRegiste).name();
    g_luaType[typeName] = "XMServerRegiste";
    g_typeCast["XMServerRegiste"] = "XMServerRegiste";
    return 1;
}

int lua_worldserver_MXServerRegisteRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MXServerRegisteRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MXServerRegisteRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (MXServerRegisteRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MXServerRegisteRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MXServerRegisteRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MXServerRegisteRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MXServerRegisteRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MXServerRegisteRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MXServerRegisteRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"MXServerRegisteRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MXServerRegisteRet:MXServerRegisteRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MXServerRegisteRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MXServerRegisteRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MXServerRegisteRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MXServerRegisteRet* self = (MXServerRegisteRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MXServerRegisteRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MXServerRegisteRet");
    tolua_cclass(tolua_S,"MXServerRegisteRet","MXServerRegisteRet","CResponsePacket",lua_worldserver_MXServerRegisteRet_finalize);

    tolua_beginmodule(tolua_S,"MXServerRegisteRet");
        tolua_function(tolua_S,"new",lua_worldserver_MXServerRegisteRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MXServerRegisteRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MXServerRegisteRet).name();
    g_luaType[typeName] = "MXServerRegisteRet";
    g_typeCast["MXServerRegisteRet"] = "MXServerRegisteRet";
    return 1;
}

int lua_worldserver_CWorldManagerServerHandler_connectToLoginServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldManagerServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldManagerServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldManagerServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldManagerServerHandler_connectToLoginServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        unsigned short arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CWorldManagerServerHandler:connectToLoginServer");

        ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CWorldManagerServerHandler:connectToLoginServer");
        if(!ok)
            return 0;
        bool ret = cobj->connectToLoginServer(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldManagerServerHandler:connectToLoginServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldManagerServerHandler_connectToLoginServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldManagerServerHandler_sendRegiste(lua_State* tolua_S)
{
    int argc = 0;
    CWorldManagerServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldManagerServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldManagerServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldManagerServerHandler_sendRegiste'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->sendRegiste();
        return 0;
    }

    gxError("CWorldManagerServerHandler:sendRegiste has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldManagerServerHandler_sendRegiste'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldManagerServerHandler_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldManagerServerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldManagerServerHandler::Setup();
        return 0;
    }
    gxError("CWorldManagerServerHandler:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldManagerServerHandler_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldManagerServerHandler_UnSetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldManagerServerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldManagerServerHandler::UnSetup();
        return 0;
    }
    gxError("CWorldManagerServerHandler:UnSetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldManagerServerHandler_UnSetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldManagerServerHandler_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldManagerServerHandler* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldManagerServerHandler();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldManagerServerHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldManagerServerHandler:CWorldManagerServerHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldManagerServerHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldManagerServerHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldManagerServerHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldManagerServerHandler* self = (CWorldManagerServerHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldManagerServerHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldManagerServerHandler");
    tolua_cclass(tolua_S,"CWorldManagerServerHandler","CWorldManagerServerHandler","CGameExtendSocketHandler<CWorldManagerServerHandler>",lua_worldserver_CWorldManagerServerHandler_finalize);

    tolua_beginmodule(tolua_S,"CWorldManagerServerHandler");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldManagerServerHandler_constructor);
        tolua_function(tolua_S,"connectToLoginServer",lua_worldserver_CWorldManagerServerHandler_connectToLoginServer);
        tolua_function(tolua_S,"sendRegiste",lua_worldserver_CWorldManagerServerHandler_sendRegiste);
        tolua_function(tolua_S,"Setup", lua_worldserver_CWorldManagerServerHandler_Setup);
        tolua_function(tolua_S,"UnSetup", lua_worldserver_CWorldManagerServerHandler_UnSetup);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldManagerServerHandler).name();
    g_luaType[typeName] = "CWorldManagerServerHandler";
    g_typeCast["CWorldManagerServerHandler"] = "CWorldManagerServerHandler";
    return 1;
}

int lua_worldserver_CStopTimer_setService(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_setService'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        GXMISC::GxService* arg0;

        ok &= luaval_to_object<GXMISC::GxService>(tolua_S, 2, "GxService", &arg0, "CStopTimer:setService");
        if(!ok)
            return 0;
        cobj->setService(arg0);
        return 0;
    }

    gxError("CStopTimer:setService has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_setService'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_setStopLastTime(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_setStopLastTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CStopTimer:setStopLastTime");
        if(!ok)
            return 0;
        cobj->setStopLastTime(arg0);
        return 0;
    }

    gxError("CStopTimer:setStopLastTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_setStopLastTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_isStop(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_isStop'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isStop();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CStopTimer:isStop has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_isStop'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_setStopStartTime(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_setStopStartTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CStopTimer:setStopStartTime");
        if(!ok)
            return 0;
        cobj->setStopStartTime(arg0);
        return 0;
    }

    gxError("CStopTimer:setStopStartTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_setStopStartTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_getStopLastTime(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_getStopLastTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getStopLastTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CStopTimer:getStopLastTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_getStopLastTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_getStopSaveTime(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_getStopSaveTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getStopSaveTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CStopTimer:getStopSaveTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_getStopSaveTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_getScriptEngine(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_getScriptEngine'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CScriptEngineCommon* ret = cobj->getScriptEngine();
        object_to_luaval<CScriptEngineCommon>(tolua_S, "CScriptEngineCommon",(CScriptEngineCommon*)ret);
        return 1;
    }

    gxError("CStopTimer:getScriptEngine has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_getScriptEngine'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_update(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CStopTimer:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CStopTimer:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_doStopSave(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_doStopSave'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->doStopSave();
        return 0;
    }

    gxError("CStopTimer:doStopSave has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_doStopSave'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_getService(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_getService'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        GXMISC::GxService* ret = cobj->getService();
        object_to_luaval<GXMISC::GxService>(tolua_S, "GxService",(GXMISC::GxService*)ret);
        return 1;
    }

    gxError("CStopTimer:getService has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_getService'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_setScriptEngine(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_setScriptEngine'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CScriptEngineCommon* arg0;

        ok &= luaval_to_object<CScriptEngineCommon>(tolua_S, 2, "CScriptEngineCommon", &arg0, "CStopTimer:setScriptEngine");
        if(!ok)
            return 0;
        cobj->setScriptEngine(arg0);
        return 0;
    }

    gxError("CStopTimer:setScriptEngine has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_setScriptEngine'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_setStopSaveTime(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_setStopSaveTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CStopTimer:setStopSaveTime");
        if(!ok)
            return 0;
        cobj->setStopSaveTime(arg0);
        return 0;
    }

    gxError("CStopTimer:setStopSaveTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_setStopSaveTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_initData(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_initData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->initData();
        return 0;
    }

    gxError("CStopTimer:initData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_initData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_doStop(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_doStop'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->doStop();
        return 0;
    }

    gxError("CStopTimer:doStop has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_doStop'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_isSaveTime(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_isSaveTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isSaveTime();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CStopTimer:isSaveTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_isSaveTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_isStopTime(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_isStopTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isStopTime();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CStopTimer:isStopTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_isStopTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_getStopStartTime(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_getStopStartTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getStopStartTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CStopTimer:getStopStartTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_getStopStartTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_onStop(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CStopTimer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CStopTimer_onStop'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CStopTimer:onStop");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CStopTimer:onStop");
        if(!ok)
            return 0;
        cobj->onStop(arg0, arg1);
        return 0;
    }

    gxError("CStopTimer:onStop has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CStopTimer_onStop'.",&tolua_err);
	return 0;
}
int lua_worldserver_CStopTimer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CStopTimer* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CStopTimer();
        tolua_pushusertype(tolua_S,(void*)cobj,"CStopTimer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CStopTimer:CStopTimer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CStopTimer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CStopTimer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CStopTimer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CStopTimer* self = (CStopTimer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CStopTimer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CStopTimer");
    tolua_cclass(tolua_S,"CStopTimer","CStopTimer","",lua_worldserver_CStopTimer_finalize);

    tolua_beginmodule(tolua_S,"CStopTimer");
        tolua_function(tolua_S,"new",lua_worldserver_CStopTimer_constructor);
        tolua_function(tolua_S,"setService",lua_worldserver_CStopTimer_setService);
        tolua_function(tolua_S,"setStopLastTime",lua_worldserver_CStopTimer_setStopLastTime);
        tolua_function(tolua_S,"isStop",lua_worldserver_CStopTimer_isStop);
        tolua_function(tolua_S,"setStopStartTime",lua_worldserver_CStopTimer_setStopStartTime);
        tolua_function(tolua_S,"getStopLastTime",lua_worldserver_CStopTimer_getStopLastTime);
        tolua_function(tolua_S,"getStopSaveTime",lua_worldserver_CStopTimer_getStopSaveTime);
        tolua_function(tolua_S,"getScriptEngine",lua_worldserver_CStopTimer_getScriptEngine);
        tolua_function(tolua_S,"update",lua_worldserver_CStopTimer_update);
        tolua_function(tolua_S,"doStopSave",lua_worldserver_CStopTimer_doStopSave);
        tolua_function(tolua_S,"getService",lua_worldserver_CStopTimer_getService);
        tolua_function(tolua_S,"setScriptEngine",lua_worldserver_CStopTimer_setScriptEngine);
        tolua_function(tolua_S,"setStopSaveTime",lua_worldserver_CStopTimer_setStopSaveTime);
        tolua_function(tolua_S,"initData",lua_worldserver_CStopTimer_initData);
        tolua_function(tolua_S,"doStop",lua_worldserver_CStopTimer_doStop);
        tolua_function(tolua_S,"isSaveTime",lua_worldserver_CStopTimer_isSaveTime);
        tolua_function(tolua_S,"isStopTime",lua_worldserver_CStopTimer_isStopTime);
        tolua_function(tolua_S,"getStopStartTime",lua_worldserver_CStopTimer_getStopStartTime);
        tolua_function(tolua_S,"onStop",lua_worldserver_CStopTimer_onStop);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CStopTimer).name();
    g_luaType[typeName] = "CStopTimer";
    g_typeCast["CStopTimer"] = "CStopTimer";
    return 1;
}

int lua_worldserver_CWorldServer_load(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_load'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CWorldServer:load");
        if(!ok)
            return 0;
        bool ret = cobj->load(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServer:load has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_load'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getGameDbHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getGameDbHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldDbServerHandler* ret = cobj->getGameDbHandler();
        object_to_luaval<CWorldDbServerHandler>(tolua_S, "CWorldDbServerHandler",(CWorldDbServerHandler*)ret);
        return 1;
    }

    gxError("CWorldServer:getGameDbHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getGameDbHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getOpenTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getOpenTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getOpenTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServer:getOpenTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getOpenTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_onLoad(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_onLoad'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        std::string arg0;
        std::string arg1;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CWorldServer:onLoad");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CWorldServer:onLoad");
        if(!ok)
            return 0;
        bool ret = cobj->onLoad(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServer:onLoad has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_onLoad'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getStopTimer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getStopTimer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CStopTimer* ret = cobj->getStopTimer();
        object_to_luaval<CStopTimer>(tolua_S, "CStopTimer",(CStopTimer*)ret);
        return 1;
    }

    gxError("CWorldServer:getStopTimer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getStopTimer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_onPassHour(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_onPassHour'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onPassHour();
        return 0;
    }

    gxError("CWorldServer:onPassHour has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_onPassHour'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_initServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_initServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const ServerPwdInfo* arg0;

        ok &= luaval_to_object<const ServerPwdInfo>(tolua_S, 2, "ServerPwdInfo", &arg0, "CWorldServer:initServer");
        if(!ok)
            return 0;
        bool ret = cobj->initServer(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServer:initServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_initServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getStartTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getStartTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getStartTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServer:getStartTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getStartTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getServerInfo(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CWorldServer_getServerInfo'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 0) {
            CWorldServerInfo* ret = cobj->getServerInfo();
            object_to_luaval<CWorldServerInfo>(tolua_S, "CWorldServerInfo",(CWorldServerInfo*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 0) {
            const CWorldServerInfo* ret = cobj->getServerInfo();
            object_to_luaval<CWorldServerInfo>(tolua_S, "CWorldServerInfo",(CWorldServerInfo*)ret);
            return 1;
        }
    }while(0);
    ok  = true;
    gxError("CWorldServer:getServerInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getServerInfo'.",&tolua_err);
    return 0;
}
int lua_worldserver_CWorldServer_getWorldServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getWorldServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getWorldServerID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServer:getWorldServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getWorldServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_onAcceptSocket(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_onAcceptSocket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        GXMISC::CSocket* arg0;
        GXMISC::CSocketHandler* arg1;
        GXMISC::ISocketPacketHandler* arg2;
        int arg3;

        ok &= luaval_to_object<GXMISC::CSocket>(tolua_S, 2, "CSocket", &arg0, "CWorldServer:onAcceptSocket");

        ok &= luaval_to_object<GXMISC::CSocketHandler>(tolua_S, 3, "CSocketHandler", &arg1, "CWorldServer:onAcceptSocket");

        ok &= luaval_to_object<GXMISC::ISocketPacketHandler>(tolua_S, 4, "ISocketPacketHandler", &arg2, "CWorldServer:onAcceptSocket");

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CWorldServer:onAcceptSocket");
        if(!ok)
            return 0;
        bool ret = cobj->onAcceptSocket(arg0, arg1, arg2, arg3);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServer:onAcceptSocket has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_onAcceptSocket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getConfig(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getConfig'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldServerConfig* ret = cobj->getConfig();
        object_to_luaval<CWorldServerConfig>(tolua_S, "CWorldServerConfig",(CWorldServerConfig*)ret);
        return 1;
    }

    gxError("CWorldServer:getConfig has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getConfig'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_onBreath(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_onBreath'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldServer:onBreath");
        if(!ok)
            return 0;
        cobj->onBreath(arg0);
        return 0;
    }

    gxError("CWorldServer:onBreath has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_onBreath'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getLoginDbHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getLoginDbHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldDbServerHandler* ret = cobj->getLoginDbHandler();
        object_to_luaval<CWorldDbServerHandler>(tolua_S, "CWorldDbServerHandler",(CWorldDbServerHandler*)ret);
        return 1;
    }

    gxError("CWorldServer:getLoginDbHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getLoginDbHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_onPassDay(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_onPassDay'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onPassDay();
        return 0;
    }

    gxError("CWorldServer:onPassDay has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_onPassDay'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_onAfterStart(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_onAfterStart'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->onAfterStart();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServer:onAfterStart has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_onAfterStart'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_onConnectSocket(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_onConnectSocket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        GXMISC::CSocket* arg0;
        GXMISC::CSocketHandler* arg1;
        GXMISC::ISocketPacketHandler* arg2;
        int arg3;

        ok &= luaval_to_object<GXMISC::CSocket>(tolua_S, 2, "CSocket", &arg0, "CWorldServer:onConnectSocket");

        ok &= luaval_to_object<GXMISC::CSocketHandler>(tolua_S, 3, "CSocketHandler", &arg1, "CWorldServer:onConnectSocket");

        ok &= luaval_to_object<GXMISC::ISocketPacketHandler>(tolua_S, 4, "ISocketPacketHandler", &arg2, "CWorldServer:onConnectSocket");

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CWorldServer:onConnectSocket");
        if(!ok)
            return 0;
        bool ret = cobj->onConnectSocket(arg0, arg1, arg2, arg3);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServer:onConnectSocket has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_onConnectSocket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_onFirstLoop(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_onFirstLoop'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onFirstLoop();
        return 0;
    }

    gxError("CWorldServer:onFirstLoop has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_onFirstLoop'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getServerListDbHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getServerListDbHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldDbServerHandler* ret = cobj->getServerListDbHandler();
        object_to_luaval<CWorldDbServerHandler>(tolua_S, "CWorldDbServerHandler",(CWorldDbServerHandler*)ret);
        return 1;
    }

    gxError("CWorldServer:getServerListDbHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getServerListDbHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_initFromDb(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_initFromDb'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->initFromDb();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldServer:initFromDb has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_initFromDb'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_clear(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_clear'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->clear();
        return 0;
    }

    gxError("CWorldServer:clear has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_clear'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getFirstStartTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getFirstStartTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getFirstStartTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServer:getFirstStartTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getFirstStartTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_getServerStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldServer_getServerStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->getServerStatus();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldServer:getServerStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldServer_getServerStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldServer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldServer* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldServer();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldServer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CWorldServer:CWorldServer");
        if(!ok)
            return 0;
        cobj = new CWorldServer(arg0);
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldServer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldServer:CWorldServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldServer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldServer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldServer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldServer* self = (CWorldServer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldServer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldServer");
    tolua_cclass(tolua_S,"CWorldServer","CWorldServer","GxService",lua_worldserver_CWorldServer_finalize);

    tolua_beginmodule(tolua_S,"CWorldServer");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldServer_constructor);
        tolua_function(tolua_S,"load",lua_worldserver_CWorldServer_load);
        tolua_function(tolua_S,"getGameDbHandler",lua_worldserver_CWorldServer_getGameDbHandler);
        tolua_function(tolua_S,"getOpenTime",lua_worldserver_CWorldServer_getOpenTime);
        tolua_function(tolua_S,"onLoad",lua_worldserver_CWorldServer_onLoad);
        tolua_function(tolua_S,"getStopTimer",lua_worldserver_CWorldServer_getStopTimer);
        tolua_function(tolua_S,"onPassHour",lua_worldserver_CWorldServer_onPassHour);
        tolua_function(tolua_S,"initServer",lua_worldserver_CWorldServer_initServer);
        tolua_function(tolua_S,"getStartTime",lua_worldserver_CWorldServer_getStartTime);
        tolua_function(tolua_S,"getServerInfo",lua_worldserver_CWorldServer_getServerInfo);
        tolua_function(tolua_S,"getWorldServerID",lua_worldserver_CWorldServer_getWorldServerID);
        tolua_function(tolua_S,"onAcceptSocket",lua_worldserver_CWorldServer_onAcceptSocket);
        tolua_function(tolua_S,"getConfig",lua_worldserver_CWorldServer_getConfig);
        tolua_function(tolua_S,"onBreath",lua_worldserver_CWorldServer_onBreath);
        tolua_function(tolua_S,"getLoginDbHandler",lua_worldserver_CWorldServer_getLoginDbHandler);
        tolua_function(tolua_S,"onPassDay",lua_worldserver_CWorldServer_onPassDay);
        tolua_function(tolua_S,"onAfterStart",lua_worldserver_CWorldServer_onAfterStart);
        tolua_function(tolua_S,"onConnectSocket",lua_worldserver_CWorldServer_onConnectSocket);
        tolua_function(tolua_S,"onFirstLoop",lua_worldserver_CWorldServer_onFirstLoop);
        tolua_function(tolua_S,"getServerListDbHandler",lua_worldserver_CWorldServer_getServerListDbHandler);
        tolua_function(tolua_S,"initFromDb",lua_worldserver_CWorldServer_initFromDb);
        tolua_function(tolua_S,"clear",lua_worldserver_CWorldServer_clear);
        tolua_function(tolua_S,"getFirstStartTime",lua_worldserver_CWorldServer_getFirstStartTime);
        tolua_function(tolua_S,"getServerStatus",lua_worldserver_CWorldServer_getServerStatus);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldServer).name();
    g_luaType[typeName] = "CWorldServer";
    g_typeCast["CWorldServer"] = "CWorldServer";
    return 1;
}

int lua_worldserver_CWorldChargingServerHandler_sendRechargeRet(lua_State* tolua_S)
{
    int argc = 0;
    CWorldChargingServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldChargingServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldChargingServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldChargingServerHandler_sendRechargeRet'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        BWRecharge* arg0;
        EGameRetCode arg1;

        ok &= luaval_to_object<BWRecharge>(tolua_S, 2, "BWRecharge", &arg0, "CWorldChargingServerHandler:sendRechargeRet");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CWorldChargingServerHandler:sendRechargeRet");
        if(!ok)
            return 0;
        cobj->sendRechargeRet(arg0, arg1);
        return 0;
    }

    gxError("CWorldChargingServerHandler:sendRechargeRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldChargingServerHandler_sendRechargeRet'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldChargingServerHandler_sendRegiste(lua_State* tolua_S)
{
    int argc = 0;
    CWorldChargingServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldChargingServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldChargingServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldChargingServerHandler_sendRegiste'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->sendRegiste();
        return 0;
    }

    gxError("CWorldChargingServerHandler:sendRegiste has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldChargingServerHandler_sendRegiste'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldChargingServerHandler_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldChargingServerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldChargingServerHandler::Setup();
        return 0;
    }
    gxError("CWorldChargingServerHandler:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldChargingServerHandler_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldChargingServerHandler_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldChargingServerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldChargingServerHandler::Unsetup();
        return 0;
    }
    gxError("CWorldChargingServerHandler:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldChargingServerHandler_Unsetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldChargingServerHandler_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldChargingServerHandler* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldChargingServerHandler();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldChargingServerHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldChargingServerHandler:CWorldChargingServerHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldChargingServerHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldChargingServerHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldChargingServerHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldChargingServerHandler* self = (CWorldChargingServerHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldChargingServerHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldChargingServerHandler");
    tolua_cclass(tolua_S,"CWorldChargingServerHandler","CWorldChargingServerHandler","CGameExtendSocketHandler<CWorldChargingServerHandler>",lua_worldserver_CWorldChargingServerHandler_finalize);

    tolua_beginmodule(tolua_S,"CWorldChargingServerHandler");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldChargingServerHandler_constructor);
        tolua_function(tolua_S,"sendRechargeRet",lua_worldserver_CWorldChargingServerHandler_sendRechargeRet);
        tolua_function(tolua_S,"sendRegiste",lua_worldserver_CWorldChargingServerHandler_sendRegiste);
        tolua_function(tolua_S,"Setup", lua_worldserver_CWorldChargingServerHandler_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_CWorldChargingServerHandler_Unsetup);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldChargingServerHandler).name();
    g_luaType[typeName] = "CWorldChargingServerHandler";
    g_typeCast["CWorldChargingServerHandler"] = "CWorldChargingServerHandler";
    return 1;
}

static int lua_worldserver_TUserFlag_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (TUserFlag)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"TUserFlag",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        TUserFlag* self = (TUserFlag*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_TUserFlag(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"TUserFlag");
    tolua_cclass(tolua_S,"TUserFlag","TUserFlag","TDBStructBase",nullptr);

    tolua_beginmodule(tolua_S,"TUserFlag");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(TUserFlag).name();
    g_luaType[typeName] = "TUserFlag";
    g_typeCast["TUserFlag"] = "TUserFlag";
    return 1;
}

static int lua_worldserver_UserDbData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (UserDbData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"UserDbData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        UserDbData* self = (UserDbData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_UserDbData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"UserDbData");
    tolua_cclass(tolua_S,"UserDbData","UserDbData","",nullptr);

    tolua_beginmodule(tolua_S,"UserDbData");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(UserDbData).name();
    g_luaType[typeName] = "UserDbData";
    g_typeCast["UserDbData"] = "UserDbData";
    return 1;
}

int lua_worldserver_CWorldUserData_isValid(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserData_isValid'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isValid();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserData:isValid has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserData_isValid'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserData_toString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserData",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserData_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldUserData:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserData_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldUserData();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldUserData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldUserData:CWorldUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldUserData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldUserData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldUserData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldUserData* self = (CWorldUserData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldUserData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldUserData");
    tolua_cclass(tolua_S,"CWorldUserData","CWorldUserData","",lua_worldserver_CWorldUserData_finalize);

    tolua_beginmodule(tolua_S,"CWorldUserData");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldUserData_constructor);
        tolua_function(tolua_S,"isValid",lua_worldserver_CWorldUserData_isValid);
        tolua_function(tolua_S,"toString",lua_worldserver_CWorldUserData_toString);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldUserData).name();
    g_luaType[typeName] = "CWorldUserData";
    g_typeCast["CWorldUserData"] = "CWorldUserData";
    return 1;
}

static int lua_worldserver_W2MUserDataUpdate_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (W2MUserDataUpdate)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"W2MUserDataUpdate",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        W2MUserDataUpdate* self = (W2MUserDataUpdate*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_W2MUserDataUpdate(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"W2MUserDataUpdate");
    tolua_cclass(tolua_S,"W2MUserDataUpdate","W2MUserDataUpdate","",nullptr);

    tolua_beginmodule(tolua_S,"W2MUserDataUpdate");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(W2MUserDataUpdate).name();
    g_luaType[typeName] = "W2MUserDataUpdate";
    g_typeCast["W2MUserDataUpdate"] = "W2MUserDataUpdate";
    return 1;
}

static int lua_worldserver_M2WRoleDataUpdate_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (M2WRoleDataUpdate)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"M2WRoleDataUpdate",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        M2WRoleDataUpdate* self = (M2WRoleDataUpdate*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_M2WRoleDataUpdate(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"M2WRoleDataUpdate");
    tolua_cclass(tolua_S,"M2WRoleDataUpdate","M2WRoleDataUpdate","",nullptr);

    tolua_beginmodule(tolua_S,"M2WRoleDataUpdate");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(M2WRoleDataUpdate).name();
    g_luaType[typeName] = "M2WRoleDataUpdate";
    g_typeCast["M2WRoleDataUpdate"] = "M2WRoleDataUpdate";
    return 1;
}

static int lua_worldserver__ChangeMapSaveData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (_ChangeMapSaveData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"_ChangeMapSaveData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        _ChangeMapSaveData* self = (_ChangeMapSaveData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver__ChangeMapSaveData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"_ChangeMapSaveData");
    tolua_cclass(tolua_S,"_ChangeMapSaveData","_ChangeMapSaveData","",nullptr);

    tolua_beginmodule(tolua_S,"_ChangeMapSaveData");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(_ChangeMapSaveData).name();
    g_luaType[typeName] = "_ChangeMapSaveData";
    g_typeCast["_ChangeMapSaveData"] = "_ChangeMapSaveData";
    return 1;
}

int lua_worldserver_ChangeLineTempData_cleanUp(lua_State* tolua_S)
{
    int argc = 0;
    ChangeLineTempData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"ChangeLineTempData",0,&tolua_err)) goto tolua_lerror;
    cobj = (ChangeLineTempData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_ChangeLineTempData_cleanUp'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanUp();
        return 0;
    }

    gxError("ChangeLineTempData:cleanUp has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_ChangeLineTempData_cleanUp'.",&tolua_err);
	return 0;
}
int lua_worldserver_ChangeLineTempData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    ChangeLineTempData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new ChangeLineTempData();
        tolua_pushusertype(tolua_S,(void*)cobj,"ChangeLineTempData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("ChangeLineTempData:ChangeLineTempData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_ChangeLineTempData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (ChangeLineTempData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"ChangeLineTempData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        ChangeLineTempData* self = (ChangeLineTempData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_ChangeLineTempData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"ChangeLineTempData");
    tolua_cclass(tolua_S,"ChangeLineTempData","ChangeLineTempData","",lua_worldserver_ChangeLineTempData_finalize);

    tolua_beginmodule(tolua_S,"ChangeLineTempData");
        tolua_function(tolua_S,"new",lua_worldserver_ChangeLineTempData_constructor);
        tolua_function(tolua_S,"cleanUp",lua_worldserver_ChangeLineTempData_cleanUp);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(ChangeLineTempData).name();
    g_luaType[typeName] = "ChangeLineTempData";
    g_typeCast["ChangeLineTempData"] = "ChangeLineTempData";
    return 1;
}

static int lua_worldserver_RoleManageInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (RoleManageInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"RoleManageInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        RoleManageInfo* self = (RoleManageInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_RoleManageInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"RoleManageInfo");
    tolua_cclass(tolua_S,"RoleManageInfo","RoleManageInfo","",nullptr);

    tolua_beginmodule(tolua_S,"RoleManageInfo");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(RoleManageInfo).name();
    g_luaType[typeName] = "RoleManageInfo";
    g_typeCast["RoleManageInfo"] = "RoleManageInfo";
    return 1;
}

int lua_worldserver_CWorldDbGameInitTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbGameInitTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbGameInitTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbGameInitTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbGameInitTask:CWorldDbGameInitTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbGameInitTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbGameInitTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbGameInitTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbGameInitTask* self = (CWorldDbGameInitTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbGameInitTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbGameInitTask");
    tolua_cclass(tolua_S,"CWorldDbGameInitTask","CWorldDbGameInitTask","CDbWrapTask",lua_worldserver_CWorldDbGameInitTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbGameInitTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbGameInitTask_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbGameInitTask).name();
    g_luaType[typeName] = "CWorldDbGameInitTask";
    g_typeCast["CWorldDbGameInitTask"] = "CWorldDbGameInitTask";
    return 1;
}

int lua_worldserver_CWorldDbGameInitRetTask_doRun(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbGameInitRetTask* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbGameInitRetTask",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbGameInitRetTask*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbGameInitRetTask_doRun'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->doRun();
        return 0;
    }

    gxError("CWorldDbGameInitRetTask:doRun has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbGameInitRetTask_doRun'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbGameInitRetTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbGameInitRetTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbGameInitRetTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbGameInitRetTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbGameInitRetTask:CWorldDbGameInitRetTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbGameInitRetTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbGameInitRetTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbGameInitRetTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbGameInitRetTask* self = (CWorldDbGameInitRetTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbGameInitRetTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbGameInitRetTask");
    tolua_cclass(tolua_S,"CWorldDbGameInitRetTask","CWorldDbGameInitRetTask","CDbConnTask",lua_worldserver_CWorldDbGameInitRetTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbGameInitRetTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbGameInitRetTask_constructor);
        tolua_function(tolua_S,"doRun",lua_worldserver_CWorldDbGameInitRetTask_doRun);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbGameInitRetTask).name();
    g_luaType[typeName] = "CWorldDbGameInitRetTask";
    g_typeCast["CWorldDbGameInitRetTask"] = "CWorldDbGameInitRetTask";
    return 1;
}

int lua_worldserver_CWorldDbServerInitTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerInitTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbServerInitTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbServerInitTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbServerInitTask:CWorldDbServerInitTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbServerInitTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbServerInitTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbServerInitTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbServerInitTask* self = (CWorldDbServerInitTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbServerInitTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbServerInitTask");
    tolua_cclass(tolua_S,"CWorldDbServerInitTask","CWorldDbServerInitTask","CDbWrapTask",lua_worldserver_CWorldDbServerInitTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbServerInitTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbServerInitTask_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbServerInitTask).name();
    g_luaType[typeName] = "CWorldDbServerInitTask";
    g_typeCast["CWorldDbServerInitTask"] = "CWorldDbServerInitTask";
    return 1;
}

int lua_worldserver_CWorldDbServerInitRetTask_doRun(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerInitRetTask* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbServerInitRetTask",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbServerInitRetTask*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbServerInitRetTask_doRun'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->doRun();
        return 0;
    }

    gxError("CWorldDbServerInitRetTask:doRun has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbServerInitRetTask_doRun'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbServerInitRetTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbServerInitRetTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbServerInitRetTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbServerInitRetTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbServerInitRetTask:CWorldDbServerInitRetTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbServerInitRetTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbServerInitRetTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbServerInitRetTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbServerInitRetTask* self = (CWorldDbServerInitRetTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbServerInitRetTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbServerInitRetTask");
    tolua_cclass(tolua_S,"CWorldDbServerInitRetTask","CWorldDbServerInitRetTask","CDbConnTask",lua_worldserver_CWorldDbServerInitRetTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbServerInitRetTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbServerInitRetTask_constructor);
        tolua_function(tolua_S,"doRun",lua_worldserver_CWorldDbServerInitRetTask_doRun);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbServerInitRetTask).name();
    g_luaType[typeName] = "CWorldDbServerInitRetTask";
    g_typeCast["CWorldDbServerInitRetTask"] = "CWorldDbServerInitRetTask";
    return 1;
}

int lua_worldserver_CWorldDbResponseTask_doRun(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbResponseTask* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbResponseTask",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbResponseTask*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbResponseTask_doRun'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->doRun();
        return 0;
    }

    gxError("CWorldDbResponseTask:doRun has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbResponseTask_doRun'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CWorldDbResponseTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbResponseTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbResponseTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbResponseTask* self = (CWorldDbResponseTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbResponseTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbResponseTask");
    tolua_cclass(tolua_S,"CWorldDbResponseTask","CWorldDbResponseTask","CDbConnTask",nullptr);

    tolua_beginmodule(tolua_S,"CWorldDbResponseTask");
        tolua_function(tolua_S,"doRun",lua_worldserver_CWorldDbResponseTask_doRun);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbResponseTask).name();
    g_luaType[typeName] = "CWorldDbResponseTask";
    g_typeCast["CWorldDbResponseTask"] = "CWorldDbResponseTask";
    return 1;
}

static int lua_worldserver_CWorldDbRequestTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbRequestTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbRequestTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbRequestTask* self = (CWorldDbRequestTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbRequestTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbRequestTask");
    tolua_cclass(tolua_S,"CWorldDbRequestTask","CWorldDbRequestTask","CDbWrapTask",nullptr);

    tolua_beginmodule(tolua_S,"CWorldDbRequestTask");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbRequestTask).name();
    g_luaType[typeName] = "CWorldDbRequestTask";
    g_typeCast["CWorldDbRequestTask"] = "CWorldDbRequestTask";
    return 1;
}

int lua_worldserver_CWorldDbAccountVerifyRetTask_doRun(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbAccountVerifyRetTask* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbAccountVerifyRetTask",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbAccountVerifyRetTask*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbAccountVerifyRetTask_doRun'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->doRun();
        return 0;
    }

    gxError("CWorldDbAccountVerifyRetTask:doRun has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbAccountVerifyRetTask_doRun'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbAccountVerifyRetTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbAccountVerifyRetTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbAccountVerifyRetTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbAccountVerifyRetTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbAccountVerifyRetTask:CWorldDbAccountVerifyRetTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbAccountVerifyRetTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbAccountVerifyRetTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbAccountVerifyRetTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbAccountVerifyRetTask* self = (CWorldDbAccountVerifyRetTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbAccountVerifyRetTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbAccountVerifyRetTask");
    tolua_cclass(tolua_S,"CWorldDbAccountVerifyRetTask","CWorldDbAccountVerifyRetTask","CDbConnTask",lua_worldserver_CWorldDbAccountVerifyRetTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbAccountVerifyRetTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbAccountVerifyRetTask_constructor);
        tolua_function(tolua_S,"doRun",lua_worldserver_CWorldDbAccountVerifyRetTask_doRun);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbAccountVerifyRetTask).name();
    g_luaType[typeName] = "CWorldDbAccountVerifyRetTask";
    g_typeCast["CWorldDbAccountVerifyRetTask"] = "CWorldDbAccountVerifyRetTask";
    return 1;
}

int lua_worldserver_CWorldDbAccountVerifyTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbAccountVerifyTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbAccountVerifyTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbAccountVerifyTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbAccountVerifyTask:CWorldDbAccountVerifyTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbAccountVerifyTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbAccountVerifyTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbAccountVerifyTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbAccountVerifyTask* self = (CWorldDbAccountVerifyTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbAccountVerifyTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbAccountVerifyTask");
    tolua_cclass(tolua_S,"CWorldDbAccountVerifyTask","CWorldDbAccountVerifyTask","CDbWrapTask",lua_worldserver_CWorldDbAccountVerifyTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbAccountVerifyTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbAccountVerifyTask_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbAccountVerifyTask).name();
    g_luaType[typeName] = "CWorldDbAccountVerifyTask";
    g_typeCast["CWorldDbAccountVerifyTask"] = "CWorldDbAccountVerifyTask";
    return 1;
}

int lua_worldserver_CWorldDbConnectVerifyRetTask_doRun(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbConnectVerifyRetTask* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbConnectVerifyRetTask",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbConnectVerifyRetTask*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbConnectVerifyRetTask_doRun'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->doRun();
        return 0;
    }

    gxError("CWorldDbConnectVerifyRetTask:doRun has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbConnectVerifyRetTask_doRun'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbConnectVerifyRetTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbConnectVerifyRetTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbConnectVerifyRetTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbConnectVerifyRetTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbConnectVerifyRetTask:CWorldDbConnectVerifyRetTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbConnectVerifyRetTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbConnectVerifyRetTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbConnectVerifyRetTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbConnectVerifyRetTask* self = (CWorldDbConnectVerifyRetTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbConnectVerifyRetTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbConnectVerifyRetTask");
    tolua_cclass(tolua_S,"CWorldDbConnectVerifyRetTask","CWorldDbConnectVerifyRetTask","CDbConnTask",lua_worldserver_CWorldDbConnectVerifyRetTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbConnectVerifyRetTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbConnectVerifyRetTask_constructor);
        tolua_function(tolua_S,"doRun",lua_worldserver_CWorldDbConnectVerifyRetTask_doRun);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbConnectVerifyRetTask).name();
    g_luaType[typeName] = "CWorldDbConnectVerifyRetTask";
    g_typeCast["CWorldDbConnectVerifyRetTask"] = "CWorldDbConnectVerifyRetTask";
    return 1;
}

int lua_worldserver_CWorldDbConnectVerifyTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbConnectVerifyTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbConnectVerifyTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbConnectVerifyTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbConnectVerifyTask:CWorldDbConnectVerifyTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbConnectVerifyTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbConnectVerifyTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbConnectVerifyTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbConnectVerifyTask* self = (CWorldDbConnectVerifyTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbConnectVerifyTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbConnectVerifyTask");
    tolua_cclass(tolua_S,"CWorldDbConnectVerifyTask","CWorldDbConnectVerifyTask","CDbWrapTask",lua_worldserver_CWorldDbConnectVerifyTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbConnectVerifyTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbConnectVerifyTask_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbConnectVerifyTask).name();
    g_luaType[typeName] = "CWorldDbConnectVerifyTask";
    g_typeCast["CWorldDbConnectVerifyTask"] = "CWorldDbConnectVerifyTask";
    return 1;
}

int lua_worldserver_CWorldCreateRoleRetTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldCreateRoleRetTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldCreateRoleRetTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldCreateRoleRetTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldCreateRoleRetTask:CWorldCreateRoleRetTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldCreateRoleRetTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldCreateRoleRetTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldCreateRoleRetTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldCreateRoleRetTask* self = (CWorldCreateRoleRetTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldCreateRoleRetTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldCreateRoleRetTask");
    tolua_cclass(tolua_S,"CWorldCreateRoleRetTask","CWorldCreateRoleRetTask","CWorldDbResponseTask",lua_worldserver_CWorldCreateRoleRetTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldCreateRoleRetTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldCreateRoleRetTask_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldCreateRoleRetTask).name();
    g_luaType[typeName] = "CWorldCreateRoleRetTask";
    g_typeCast["CWorldCreateRoleRetTask"] = "CWorldCreateRoleRetTask";
    return 1;
}

int lua_worldserver_CWorldDbRoleCreateTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbRoleCreateTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbRoleCreateTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbRoleCreateTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbRoleCreateTask:CWorldDbRoleCreateTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbRoleCreateTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbRoleCreateTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbRoleCreateTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbRoleCreateTask* self = (CWorldDbRoleCreateTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbRoleCreateTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbRoleCreateTask");
    tolua_cclass(tolua_S,"CWorldDbRoleCreateTask","CWorldDbRoleCreateTask","CWorldDbRequestTask",lua_worldserver_CWorldDbRoleCreateTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbRoleCreateTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbRoleCreateTask_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbRoleCreateTask).name();
    g_luaType[typeName] = "CWorldDbRoleCreateTask";
    g_typeCast["CWorldDbRoleCreateTask"] = "CWorldDbRoleCreateTask";
    return 1;
}

int lua_worldserver_CWorldLoadUserDataTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoadUserDataTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldLoadUserDataTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldLoadUserDataTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldLoadUserDataTask:CWorldLoadUserDataTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldLoadUserDataTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldLoadUserDataTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldLoadUserDataTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldLoadUserDataTask* self = (CWorldLoadUserDataTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldLoadUserDataTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldLoadUserDataTask");
    tolua_cclass(tolua_S,"CWorldLoadUserDataTask","CWorldLoadUserDataTask","CDbWrapTask",lua_worldserver_CWorldLoadUserDataTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldLoadUserDataTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldLoadUserDataTask_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldLoadUserDataTask).name();
    g_luaType[typeName] = "CWorldLoadUserDataTask";
    g_typeCast["CWorldLoadUserDataTask"] = "CWorldLoadUserDataTask";
    return 1;
}

int lua_worldserver_CWorldLoadUserDataRetTask_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoadUserDataRetTask* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldLoadUserDataRetTask();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldLoadUserDataRetTask");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldLoadUserDataRetTask:CWorldLoadUserDataRetTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldLoadUserDataRetTask_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldLoadUserDataRetTask)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldLoadUserDataRetTask",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldLoadUserDataRetTask* self = (CWorldLoadUserDataRetTask*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldLoadUserDataRetTask(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldLoadUserDataRetTask");
    tolua_cclass(tolua_S,"CWorldLoadUserDataRetTask","CWorldLoadUserDataRetTask","CDbConnTask",lua_worldserver_CWorldLoadUserDataRetTask_finalize);

    tolua_beginmodule(tolua_S,"CWorldLoadUserDataRetTask");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldLoadUserDataRetTask_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldLoadUserDataRetTask).name();
    g_luaType[typeName] = "CWorldLoadUserDataRetTask";
    g_typeCast["CWorldLoadUserDataRetTask"] = "CWorldLoadUserDataRetTask";
    return 1;
}

int lua_worldserver_CWorldDbHandler_quit(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_quit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->quit();
        return 0;
    }

    gxError("CWorldDbHandler:quit has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_quit'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_sendVerifyConnectTask(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_sendVerifyConnectTask'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        unsigned long long arg0;
        CCharArray1<250> arg1;
        CCharArray1<250> arg2;
        unsigned char arg3;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldDbHandler:sendVerifyConnectTask");

        ok &= luaval_to_array_string1(tolua_S, 3,&arg1, "CWorldDbHandler:sendVerifyConnectTask");

        ok &= luaval_to_array_string1(tolua_S, 4,&arg2, "CWorldDbHandler:sendVerifyConnectTask");

        ok &= luaval_to_uint8(tolua_S, 5,(uint8*)&arg3, "CWorldDbHandler:sendVerifyConnectTask");
        if(!ok)
            return 0;
        bool ret = cobj->sendVerifyConnectTask(arg0, arg1, arg2, arg3);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldDbHandler:sendVerifyConnectTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_sendVerifyConnectTask'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_handle(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_handle'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        char* arg0;
        unsigned int arg1;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CWorldDbHandler:handle"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CWorldDbHandler:handle");
        if(!ok)
            return 0;
        int ret = (int)cobj->handle(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldDbHandler:handle has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_handle'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_getAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_getAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getAccountID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldDbHandler:getAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_getAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_sendVerifyAccountTask(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_sendVerifyAccountTask'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        CCharArray2<250> arg0;
        CCharArray2<250> arg1;

        ok &= luaval_to_array_string2(tolua_S, 2,&arg0, "CWorldDbHandler:sendVerifyAccountTask");

        ok &= luaval_to_array_string2(tolua_S, 3,&arg1, "CWorldDbHandler:sendVerifyAccountTask");
        if(!ok)
            return 0;
        bool ret = cobj->sendVerifyAccountTask(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldDbHandler:sendVerifyAccountTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_sendVerifyAccountTask'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_sendCreateRoleTask(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_sendCreateRoleTask'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        const char* arg0;
        unsigned char arg1;
        CCharArray1<250> arg2;
        CCharArray1<250> arg3;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CWorldDbHandler:sendCreateRoleTask"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_uint8(tolua_S, 3,(uint8*)&arg1, "CWorldDbHandler:sendCreateRoleTask");

        ok &= luaval_to_array_string1(tolua_S, 4,&arg2, "CWorldDbHandler:sendCreateRoleTask");

        ok &= luaval_to_array_string1(tolua_S, 5,&arg3, "CWorldDbHandler:sendCreateRoleTask");
        if(!ok)
            return 0;
        bool ret = cobj->sendCreateRoleTask(arg0, arg1, arg2, arg3);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldDbHandler:sendCreateRoleTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_sendCreateRoleTask'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_breath(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_breath'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldDbHandler:breath");
        if(!ok)
            return 0;
        cobj->breath(arg0);
        return 0;
    }

    gxError("CWorldDbHandler:breath has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_breath'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_start(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_start'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->start();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldDbHandler:start has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_start'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_toString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldDbHandler:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_freeWorldDbTask(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_freeWorldDbTask'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CWorldDbRequestTask* arg0;

        ok &= luaval_to_object<CWorldDbRequestTask>(tolua_S, 2, "CWorldDbRequestTask", &arg0, "CWorldDbHandler:freeWorldDbTask");
        if(!ok)
            return 0;
        cobj->freeWorldDbTask(arg0);
        return 0;
    }

    gxError("CWorldDbHandler:freeWorldDbTask has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_freeWorldDbTask'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_close(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_close'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->close();
        return 0;
    }

    gxError("CWorldDbHandler:close has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_close'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_setAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldDbHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldDbHandler_setAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldDbHandler:setAccountID");
        if(!ok)
            return 0;
        cobj->setAccountID(arg0);
        return 0;
    }

    gxError("CWorldDbHandler:setAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldDbHandler_setAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldDbHandler_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldDbHandler* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldDbHandler();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }
    if (argc == 1) 
    {
        GXMISC::CDatabaseConnWrap* arg0;

        ok &= luaval_to_object<GXMISC::CDatabaseConnWrap>(tolua_S, 2, "CDatabaseConnWrap", &arg0, "CWorldDbHandler:CWorldDbHandler");
        if(!ok)
            return 0;
        cobj = new CWorldDbHandler(arg0);
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }
    if (argc == 2) 
    {
        GXMISC::CDatabaseConnWrap* arg0;
        unsigned long long arg1;

        ok &= luaval_to_object<GXMISC::CDatabaseConnWrap>(tolua_S, 2, "CDatabaseConnWrap", &arg0, "CWorldDbHandler:CWorldDbHandler");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldDbHandler:CWorldDbHandler");
        if(!ok)
            return 0;
        cobj = new CWorldDbHandler(arg0, arg1);
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldDbHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldDbHandler:CWorldDbHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldDbHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldDbHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldDbHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldDbHandler* self = (CWorldDbHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldDbHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldDbHandler");
    tolua_cclass(tolua_S,"CWorldDbHandler","CWorldDbHandler","CGameDatabaseHandler",lua_worldserver_CWorldDbHandler_finalize);

    tolua_beginmodule(tolua_S,"CWorldDbHandler");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldDbHandler_constructor);
        tolua_function(tolua_S,"quit",lua_worldserver_CWorldDbHandler_quit);
        tolua_function(tolua_S,"sendVerifyConnectTask",lua_worldserver_CWorldDbHandler_sendVerifyConnectTask);
        tolua_function(tolua_S,"handle",lua_worldserver_CWorldDbHandler_handle);
        tolua_function(tolua_S,"getAccountID",lua_worldserver_CWorldDbHandler_getAccountID);
        tolua_function(tolua_S,"sendVerifyAccountTask",lua_worldserver_CWorldDbHandler_sendVerifyAccountTask);
        tolua_function(tolua_S,"sendCreateRoleTask",lua_worldserver_CWorldDbHandler_sendCreateRoleTask);
        tolua_function(tolua_S,"breath",lua_worldserver_CWorldDbHandler_breath);
        tolua_function(tolua_S,"start",lua_worldserver_CWorldDbHandler_start);
        tolua_function(tolua_S,"toString",lua_worldserver_CWorldDbHandler_toString);
        tolua_function(tolua_S,"freeWorldDbTask",lua_worldserver_CWorldDbHandler_freeWorldDbTask);
        tolua_function(tolua_S,"close",lua_worldserver_CWorldDbHandler_close);
        tolua_function(tolua_S,"setAccountID",lua_worldserver_CWorldDbHandler_setAccountID);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldDbHandler).name();
    g_luaType[typeName] = "CWorldDbHandler";
    g_typeCast["CWorldDbHandler"] = "CWorldDbHandler";
    return 1;
}

int lua_worldserver_CLoginPlayer_getAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getAccountID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CLoginPlayer:getAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_kickByOtherPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_kickByOtherPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->kickByOtherPlayer();
        return 0;
    }

    gxError("CLoginPlayer:kickByOtherPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_kickByOtherPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_keyToString(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_keyToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->keyToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CLoginPlayer:keyToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_keyToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setLoginQuick(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setLoginQuick'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CLoginPlayer:setLoginQuick");
        if(!ok)
            return 0;
        cobj->setLoginQuick(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setLoginQuick has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setLoginQuick'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getWorldPlayerHandler(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getWorldPlayerHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldPlayerHandler* ret = cobj->getWorldPlayerHandler();
        object_to_luaval<CWorldPlayerHandler>(tolua_S, "CWorldPlayerHandler",(CWorldPlayerHandler*)ret);
        return 1;
    }

    gxError("CLoginPlayer:getWorldPlayerHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getWorldPlayerHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_isKey2(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_isKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey2();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayer:isKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_isKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_isTimeOut(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_isTimeOut'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CLoginPlayer:isTimeOut");
        if(!ok)
            return 0;
        bool ret = cobj->isTimeOut(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayer:isTimeOut has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_isTimeOut'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getSourceWay(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getSourceWay'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CCharArray1<250> ret = cobj->getSourceWay();
        array_string1_to_luaval(tolua_S,ret);
        return 1;
    }

    gxError("CLoginPlayer:getSourceWay has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getSourceWay'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_isDelete(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_isDelete'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isDelete();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayer:isDelete has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_isDelete'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayer:setAccountID");
        if(!ok)
            return 0;
        cobj->setAccountID(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_quit(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_quit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->quit();
        return 0;
    }

    gxError("CLoginPlayer:quit has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_quit'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setNeedReLogin(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setNeedReLogin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CLoginPlayer:setNeedReLogin");
        if(!ok)
            return 0;
        cobj->setNeedReLogin(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setNeedReLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setNeedReLogin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_doLoginOutTime(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_doLoginOutTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CLoginPlayer:doLoginOutTime");
        if(!ok)
            return 0;
        cobj->doLoginOutTime(arg0);
        return 0;
    }

    gxError("CLoginPlayer:doLoginOutTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_doLoginOutTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setDbIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setDbIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayer:setDbIndex");
        if(!ok)
            return 0;
        cobj->setDbIndex(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setDbIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setDbIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setChisourceWay(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setChisourceWay'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CCharArray1<250> arg0;

        ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CLoginPlayer:setChisourceWay");
        if(!ok)
            return 0;
        cobj->setChisourceWay(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setChisourceWay has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setChisourceWay'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_doReLogin(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_doReLogin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CLoginPlayer:doReLogin");
        if(!ok)
            return 0;
        cobj->doReLogin(arg0);
        return 0;
    }

    gxError("CLoginPlayer:doReLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_doReLogin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setKey(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayer:setKey");
        if(!ok)
            return 0;
        cobj->setKey(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_toString(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CLoginPlayer:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayer:setSocketIndex");
        if(!ok)
            return 0;
        cobj->setSocketIndex(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_isNeedDelete(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_isNeedDelete'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isNeedDelete();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayer:isNeedDelete has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_isNeedDelete'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setLoginKey(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setLoginKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayer:setLoginKey");
        if(!ok)
            return 0;
        cobj->setLoginKey(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setLoginKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setLoginKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_update(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CLoginPlayer:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CLoginPlayer:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getKey2(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getKey2();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CLoginPlayer:getKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getSocketIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CLoginPlayer:getSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setDelete(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setDelete'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->setDelete();
        return 0;
    }

    gxError("CLoginPlayer:setDelete has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setDelete'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getLoginQuick(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getLoginQuick'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->getLoginQuick();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayer:getLoginQuick has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getLoginQuick'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getWorldDbHandler(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getWorldDbHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldDbHandler* ret = cobj->getWorldDbHandler();
        object_to_luaval<CWorldDbHandler>(tolua_S, "CWorldDbHandler",(CWorldDbHandler*)ret);
        return 1;
    }

    gxError("CLoginPlayer:getWorldDbHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getWorldDbHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getDbIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getDbIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getDbIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CLoginPlayer:getDbIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getDbIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getWorldPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getWorldPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->getWorldPlayer();
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CLoginPlayer:getWorldPlayer");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->getWorldPlayer(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CLoginPlayer:getWorldPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getWorldPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_key2ToString(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_key2ToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->key2ToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CLoginPlayer:key2ToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_key2ToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_isKey(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_isKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayer:isKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_isKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setKey2(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayer:setKey2");
        if(!ok)
            return 0;
        cobj->setKey2(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getChisourceWay(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getChisourceWay'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CCharArray1<250> ret = cobj->getChisourceWay();
        array_string1_to_luaval(tolua_S,ret);
        return 1;
    }

    gxError("CLoginPlayer:getChisourceWay has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getChisourceWay'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getKey(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getKey();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CLoginPlayer:getKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_setSourceWay(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CLoginPlayer_setSourceWay'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 2) {
            CCharArray1<250> arg0;
            ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CLoginPlayer:setSourceWay");

            if (!ok) { break; }
            CCharArray1<250> arg1;
            ok &= luaval_to_array_string1(tolua_S, 3,&arg1, "CLoginPlayer:setSourceWay");

            if (!ok) { break; }
            cobj->setSourceWay(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 1) {
            CCharArray1<250> arg0;
            ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CLoginPlayer:setSourceWay");

            if (!ok) { break; }
            cobj->setSourceWay(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    gxError("CLoginPlayer:setSourceWay has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setSourceWay'.",&tolua_err);
    return 0;
}
int lua_worldserver_CLoginPlayer_setGmPower(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_setGmPower'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CLoginPlayer:setGmPower");
        if(!ok)
            return 0;
        cobj->setGmPower(arg0);
        return 0;
    }

    gxError("CLoginPlayer:setGmPower has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_setGmPower'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_otherPlayerOffline(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_otherPlayerOffline'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->otherPlayerOffline();
        return 0;
    }

    gxError("CLoginPlayer:otherPlayerOffline has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_otherPlayerOffline'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_getGmPower(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayer_getGmPower'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned char ret = cobj->getGmPower();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLoginPlayer:getGmPower has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayer_getGmPower'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayer* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLoginPlayer();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLoginPlayer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLoginPlayer:CLoginPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLoginPlayer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLoginPlayer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLoginPlayer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLoginPlayer* self = (CLoginPlayer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLoginPlayer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLoginPlayer");
    tolua_cclass(tolua_S,"CLoginPlayer","CLoginPlayer","",lua_worldserver_CLoginPlayer_finalize);

    tolua_beginmodule(tolua_S,"CLoginPlayer");
        tolua_function(tolua_S,"new",lua_worldserver_CLoginPlayer_constructor);
        tolua_function(tolua_S,"getAccountID",lua_worldserver_CLoginPlayer_getAccountID);
        tolua_function(tolua_S,"kickByOtherPlayer",lua_worldserver_CLoginPlayer_kickByOtherPlayer);
        tolua_function(tolua_S,"keyToString",lua_worldserver_CLoginPlayer_keyToString);
        tolua_function(tolua_S,"setLoginQuick",lua_worldserver_CLoginPlayer_setLoginQuick);
        tolua_function(tolua_S,"getWorldPlayerHandler",lua_worldserver_CLoginPlayer_getWorldPlayerHandler);
        tolua_function(tolua_S,"isKey2",lua_worldserver_CLoginPlayer_isKey2);
        tolua_function(tolua_S,"isTimeOut",lua_worldserver_CLoginPlayer_isTimeOut);
        tolua_function(tolua_S,"getSourceWay",lua_worldserver_CLoginPlayer_getSourceWay);
        tolua_function(tolua_S,"isDelete",lua_worldserver_CLoginPlayer_isDelete);
        tolua_function(tolua_S,"setAccountID",lua_worldserver_CLoginPlayer_setAccountID);
        tolua_function(tolua_S,"quit",lua_worldserver_CLoginPlayer_quit);
        tolua_function(tolua_S,"setNeedReLogin",lua_worldserver_CLoginPlayer_setNeedReLogin);
        tolua_function(tolua_S,"doLoginOutTime",lua_worldserver_CLoginPlayer_doLoginOutTime);
        tolua_function(tolua_S,"setDbIndex",lua_worldserver_CLoginPlayer_setDbIndex);
        tolua_function(tolua_S,"setChisourceWay",lua_worldserver_CLoginPlayer_setChisourceWay);
        tolua_function(tolua_S,"doReLogin",lua_worldserver_CLoginPlayer_doReLogin);
        tolua_function(tolua_S,"setKey",lua_worldserver_CLoginPlayer_setKey);
        tolua_function(tolua_S,"toString",lua_worldserver_CLoginPlayer_toString);
        tolua_function(tolua_S,"setSocketIndex",lua_worldserver_CLoginPlayer_setSocketIndex);
        tolua_function(tolua_S,"isNeedDelete",lua_worldserver_CLoginPlayer_isNeedDelete);
        tolua_function(tolua_S,"setLoginKey",lua_worldserver_CLoginPlayer_setLoginKey);
        tolua_function(tolua_S,"update",lua_worldserver_CLoginPlayer_update);
        tolua_function(tolua_S,"getKey2",lua_worldserver_CLoginPlayer_getKey2);
        tolua_function(tolua_S,"getSocketIndex",lua_worldserver_CLoginPlayer_getSocketIndex);
        tolua_function(tolua_S,"setDelete",lua_worldserver_CLoginPlayer_setDelete);
        tolua_function(tolua_S,"getLoginQuick",lua_worldserver_CLoginPlayer_getLoginQuick);
        tolua_function(tolua_S,"getWorldDbHandler",lua_worldserver_CLoginPlayer_getWorldDbHandler);
        tolua_function(tolua_S,"getDbIndex",lua_worldserver_CLoginPlayer_getDbIndex);
        tolua_function(tolua_S,"getWorldPlayer",lua_worldserver_CLoginPlayer_getWorldPlayer);
        tolua_function(tolua_S,"key2ToString",lua_worldserver_CLoginPlayer_key2ToString);
        tolua_function(tolua_S,"isKey",lua_worldserver_CLoginPlayer_isKey);
        tolua_function(tolua_S,"setKey2",lua_worldserver_CLoginPlayer_setKey2);
        tolua_function(tolua_S,"getChisourceWay",lua_worldserver_CLoginPlayer_getChisourceWay);
        tolua_function(tolua_S,"getKey",lua_worldserver_CLoginPlayer_getKey);
        tolua_function(tolua_S,"setSourceWay",lua_worldserver_CLoginPlayer_setSourceWay);
        tolua_function(tolua_S,"setGmPower",lua_worldserver_CLoginPlayer_setGmPower);
        tolua_function(tolua_S,"otherPlayerOffline",lua_worldserver_CLoginPlayer_otherPlayerOffline);
        tolua_function(tolua_S,"getGmPower",lua_worldserver_CLoginPlayer_getGmPower);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLoginPlayer).name();
    g_luaType[typeName] = "CLoginPlayer";
    g_typeCast["CLoginPlayer"] = "CLoginPlayer";
    return 1;
}

int lua_worldserver_CLoginPlayerMgr_getNext(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_getNext'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CLoginPlayer* ret = cobj->getNext();
        object_to_luaval<CLoginPlayer>(tolua_S, "CLoginPlayer",(CLoginPlayer*)ret);
        return 1;
    }

    gxError("CLoginPlayerMgr:getNext has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_getNext'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_getBegin(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_getBegin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CLoginPlayer* ret = cobj->getBegin();
        object_to_luaval<CLoginPlayer>(tolua_S, "CLoginPlayer",(CLoginPlayer*)ret);
        return 1;
    }

    gxError("CLoginPlayerMgr:getBegin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_getBegin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_isExistByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_isExistByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayerMgr:isExistByAccountID");
        if(!ok)
            return 0;
        bool ret = cobj->isExistByAccountID(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayerMgr:isExistByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_isExistByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_delPlayerByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_delPlayerByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayerMgr:delPlayerByAccountID");
        if(!ok)
            return 0;
        cobj->delPlayerByAccountID(arg0);
        return 0;
    }

    gxError("CLoginPlayerMgr:delPlayerByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_delPlayerByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_isExistBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_isExistBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayerMgr:isExistBySocketIndex");
        if(!ok)
            return 0;
        bool ret = cobj->isExistBySocketIndex(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayerMgr:isExistBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_isExistBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_update(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CLoginPlayerMgr:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CLoginPlayerMgr:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_freePlayer(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_freePlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CLoginPlayer* arg0;

        ok &= luaval_to_object<CLoginPlayer>(tolua_S, 2, "CLoginPlayer", &arg0, "CLoginPlayerMgr:freePlayer");
        if(!ok)
            return 0;
        cobj->freePlayer(arg0);
        return 0;
    }

    gxError("CLoginPlayerMgr:freePlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_freePlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_init(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_init'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CLoginPlayerMgr:init");
        if(!ok)
            return 0;
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginPlayerMgr:init has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_init'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_delPlayerBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_delPlayerBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayerMgr:delPlayerBySocketIndex");
        if(!ok)
            return 0;
        cobj->delPlayerBySocketIndex(arg0);
        return 0;
    }

    gxError("CLoginPlayerMgr:delPlayerBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_delPlayerBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_findByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_findByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayerMgr:findByAccountID");
        if(!ok)
            return 0;
        CLoginPlayer* ret = cobj->findByAccountID(arg0);
        object_to_luaval<CLoginPlayer>(tolua_S, "CLoginPlayer",(CLoginPlayer*)ret);
        return 1;
    }

    gxError("CLoginPlayerMgr:findByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_findByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_findBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginPlayerMgr_findBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginPlayerMgr:findBySocketIndex");
        if(!ok)
            return 0;
        CLoginPlayer* ret = cobj->findBySocketIndex(arg0);
        object_to_luaval<CLoginPlayer>(tolua_S, "CLoginPlayer",(CLoginPlayer*)ret);
        return 1;
    }

    gxError("CLoginPlayerMgr:findBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_findBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginPlayerMgr_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CLoginPlayerMgr* ret = CLoginPlayerMgr::GetPtr();
        object_to_luaval<CLoginPlayerMgr>(tolua_S, "CLoginPlayerMgr",(CLoginPlayerMgr*)ret);
        return 1;
    }
    gxError("CLoginPlayerMgr:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginPlayerMgr_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CLoginPlayerMgr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLoginPlayerMgr* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLoginPlayerMgr();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLoginPlayerMgr");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLoginPlayerMgr:CLoginPlayerMgr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLoginPlayerMgr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLoginPlayerMgr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLoginPlayerMgr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLoginPlayerMgr* self = (CLoginPlayerMgr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLoginPlayerMgr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLoginPlayerMgr");
    tolua_cclass(tolua_S,"CLoginPlayerMgr","CLoginPlayerMgr","CHashMultiIndex2<CLoginPlayer, false, 18446744073709551615, 18446744073709551615>",lua_worldserver_CLoginPlayerMgr_finalize);

    tolua_beginmodule(tolua_S,"CLoginPlayerMgr");
        tolua_function(tolua_S,"new",lua_worldserver_CLoginPlayerMgr_constructor);
        tolua_function(tolua_S,"getNext",lua_worldserver_CLoginPlayerMgr_getNext);
        tolua_function(tolua_S,"getBegin",lua_worldserver_CLoginPlayerMgr_getBegin);
        tolua_function(tolua_S,"isExistByAccountID",lua_worldserver_CLoginPlayerMgr_isExistByAccountID);
        tolua_function(tolua_S,"delPlayerByAccountID",lua_worldserver_CLoginPlayerMgr_delPlayerByAccountID);
        tolua_function(tolua_S,"isExistBySocketIndex",lua_worldserver_CLoginPlayerMgr_isExistBySocketIndex);
        tolua_function(tolua_S,"update",lua_worldserver_CLoginPlayerMgr_update);
        tolua_function(tolua_S,"freePlayer",lua_worldserver_CLoginPlayerMgr_freePlayer);
        tolua_function(tolua_S,"init",lua_worldserver_CLoginPlayerMgr_init);
        tolua_function(tolua_S,"delPlayerBySocketIndex",lua_worldserver_CLoginPlayerMgr_delPlayerBySocketIndex);
        tolua_function(tolua_S,"findByAccountID",lua_worldserver_CLoginPlayerMgr_findByAccountID);
        tolua_function(tolua_S,"findBySocketIndex",lua_worldserver_CLoginPlayerMgr_findBySocketIndex);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CLoginPlayerMgr_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLoginPlayerMgr).name();
    g_luaType[typeName] = "CLoginPlayerMgr";
    g_typeCast["CLoginPlayerMgr"] = "CLoginPlayerMgr";
    return 1;
}

int lua_worldserver_CWLRegiste_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWLRegiste* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWLRegiste",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWLRegiste*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWLRegiste_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWLRegiste:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWLRegiste_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWLRegiste_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWLRegiste* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWLRegiste();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWLRegiste");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWLRegiste:CWLRegiste has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWLRegiste_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWLRegiste)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWLRegiste",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWLRegiste* self = (CWLRegiste*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWLRegiste(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWLRegiste");
    tolua_cclass(tolua_S,"CWLRegiste","CWLRegiste","CRequestPacket",lua_worldserver_CWLRegiste_finalize);

    tolua_beginmodule(tolua_S,"CWLRegiste");
        tolua_function(tolua_S,"new",lua_worldserver_CWLRegiste_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWLRegiste_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWLRegiste).name();
    g_luaType[typeName] = "CWLRegiste";
    g_typeCast["CWLRegiste"] = "CWLRegiste";
    return 1;
}

int lua_worldserver_CLWRegisteRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CLWRegisteRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLWRegisteRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLWRegisteRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLWRegisteRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLWRegisteRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLWRegisteRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLWRegisteRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLWRegisteRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLWRegisteRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLWRegisteRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLWRegisteRet:CLWRegisteRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLWRegisteRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLWRegisteRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLWRegisteRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLWRegisteRet* self = (CLWRegisteRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLWRegisteRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLWRegisteRet");
    tolua_cclass(tolua_S,"CLWRegisteRet","CLWRegisteRet","CResponsePacket",lua_worldserver_CLWRegisteRet_finalize);

    tolua_beginmodule(tolua_S,"CLWRegisteRet");
        tolua_function(tolua_S,"new",lua_worldserver_CLWRegisteRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CLWRegisteRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLWRegisteRet).name();
    g_luaType[typeName] = "CLWRegisteRet";
    g_typeCast["CLWRegisteRet"] = "CLWRegisteRet";
    return 1;
}

int lua_worldserver_CWLRoleLogin_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWLRoleLogin* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWLRoleLogin",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWLRoleLogin*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWLRoleLogin_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWLRoleLogin:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWLRoleLogin_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWLRoleLogin_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWLRoleLogin* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWLRoleLogin();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWLRoleLogin");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWLRoleLogin:CWLRoleLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWLRoleLogin_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWLRoleLogin)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWLRoleLogin",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWLRoleLogin* self = (CWLRoleLogin*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWLRoleLogin(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWLRoleLogin");
    tolua_cclass(tolua_S,"CWLRoleLogin","CWLRoleLogin","CRequestPacket",lua_worldserver_CWLRoleLogin_finalize);

    tolua_beginmodule(tolua_S,"CWLRoleLogin");
        tolua_function(tolua_S,"new",lua_worldserver_CWLRoleLogin_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWLRoleLogin_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWLRoleLogin).name();
    g_luaType[typeName] = "CWLRoleLogin";
    g_typeCast["CWLRoleLogin"] = "CWLRoleLogin";
    return 1;
}

int lua_worldserver_CLWRoleLoginRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CLWRoleLoginRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLWRoleLoginRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLWRoleLoginRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLWRoleLoginRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLWRoleLoginRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLWRoleLoginRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLWRoleLoginRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLWRoleLoginRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLWRoleLoginRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLWRoleLoginRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLWRoleLoginRet:CLWRoleLoginRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLWRoleLoginRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLWRoleLoginRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLWRoleLoginRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLWRoleLoginRet* self = (CLWRoleLoginRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLWRoleLoginRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLWRoleLoginRet");
    tolua_cclass(tolua_S,"CLWRoleLoginRet","CLWRoleLoginRet","CResponsePacket",lua_worldserver_CLWRoleLoginRet_finalize);

    tolua_beginmodule(tolua_S,"CLWRoleLoginRet");
        tolua_function(tolua_S,"new",lua_worldserver_CLWRoleLoginRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CLWRoleLoginRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLWRoleLoginRet).name();
    g_luaType[typeName] = "CLWRoleLoginRet";
    g_typeCast["CLWRoleLoginRet"] = "CLWRoleLoginRet";
    return 1;
}

int lua_worldserver_CWLRoleCreate_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWLRoleCreate* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWLRoleCreate",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWLRoleCreate*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWLRoleCreate_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWLRoleCreate:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWLRoleCreate_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWLRoleCreate_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWLRoleCreate* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWLRoleCreate();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWLRoleCreate");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWLRoleCreate:CWLRoleCreate has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWLRoleCreate_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWLRoleCreate)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWLRoleCreate",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWLRoleCreate* self = (CWLRoleCreate*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWLRoleCreate(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWLRoleCreate");
    tolua_cclass(tolua_S,"CWLRoleCreate","CWLRoleCreate","CRequestPacket",lua_worldserver_CWLRoleCreate_finalize);

    tolua_beginmodule(tolua_S,"CWLRoleCreate");
        tolua_function(tolua_S,"new",lua_worldserver_CWLRoleCreate_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWLRoleCreate_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWLRoleCreate).name();
    g_luaType[typeName] = "CWLRoleCreate";
    g_typeCast["CWLRoleCreate"] = "CWLRoleCreate";
    return 1;
}

int lua_worldserver_CLWRoleCreateRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CLWRoleCreateRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLWRoleCreateRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLWRoleCreateRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLWRoleCreateRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLWRoleCreateRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLWRoleCreateRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLWRoleCreateRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLWRoleCreateRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLWRoleCreateRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLWRoleCreateRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLWRoleCreateRet:CLWRoleCreateRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLWRoleCreateRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLWRoleCreateRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLWRoleCreateRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLWRoleCreateRet* self = (CLWRoleCreateRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLWRoleCreateRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLWRoleCreateRet");
    tolua_cclass(tolua_S,"CLWRoleCreateRet","CLWRoleCreateRet","CResponsePacket",lua_worldserver_CLWRoleCreateRet_finalize);

    tolua_beginmodule(tolua_S,"CLWRoleCreateRet");
        tolua_function(tolua_S,"new",lua_worldserver_CLWRoleCreateRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CLWRoleCreateRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLWRoleCreateRet).name();
    g_luaType[typeName] = "CLWRoleCreateRet";
    g_typeCast["CLWRoleCreateRet"] = "CLWRoleCreateRet";
    return 1;
}

int lua_worldserver_CWLDataUpdate_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWLDataUpdate* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWLDataUpdate",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWLDataUpdate*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWLDataUpdate_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWLDataUpdate:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWLDataUpdate_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWLDataUpdate_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWLDataUpdate* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWLDataUpdate();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWLDataUpdate");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWLDataUpdate:CWLDataUpdate has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWLDataUpdate_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWLDataUpdate)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWLDataUpdate",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWLDataUpdate* self = (CWLDataUpdate*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWLDataUpdate(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWLDataUpdate");
    tolua_cclass(tolua_S,"CWLDataUpdate","CWLDataUpdate","CRequestPacket",lua_worldserver_CWLDataUpdate_finalize);

    tolua_beginmodule(tolua_S,"CWLDataUpdate");
        tolua_function(tolua_S,"new",lua_worldserver_CWLDataUpdate_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWLDataUpdate_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWLDataUpdate).name();
    g_luaType[typeName] = "CWLDataUpdate";
    g_typeCast["CWLDataUpdate"] = "CWLDataUpdate";
    return 1;
}

int lua_worldserver_CLWLimitInfoUpdate_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CLWLimitInfoUpdate* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLWLimitInfoUpdate",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLWLimitInfoUpdate*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLWLimitInfoUpdate_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLWLimitInfoUpdate:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLWLimitInfoUpdate_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLWLimitInfoUpdate_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLWLimitInfoUpdate* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLWLimitInfoUpdate();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLWLimitInfoUpdate");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLWLimitInfoUpdate:CLWLimitInfoUpdate has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLWLimitInfoUpdate_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLWLimitInfoUpdate)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLWLimitInfoUpdate",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLWLimitInfoUpdate* self = (CLWLimitInfoUpdate*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLWLimitInfoUpdate(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLWLimitInfoUpdate");
    tolua_cclass(tolua_S,"CLWLimitInfoUpdate","CLWLimitInfoUpdate","CServerPacket",lua_worldserver_CLWLimitInfoUpdate_finalize);

    tolua_beginmodule(tolua_S,"CLWLimitInfoUpdate");
        tolua_function(tolua_S,"new",lua_worldserver_CLWLimitInfoUpdate_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CLWLimitInfoUpdate_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLWLimitInfoUpdate).name();
    g_luaType[typeName] = "CLWLimitInfoUpdate";
    g_typeCast["CLWLimitInfoUpdate"] = "CLWLimitInfoUpdate";
    return 1;
}

int lua_worldserver_CLWLimitAccountInfo_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CLWLimitAccountInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLWLimitAccountInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLWLimitAccountInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLWLimitAccountInfo_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLWLimitAccountInfo:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLWLimitAccountInfo_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLWLimitAccountInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLWLimitAccountInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLWLimitAccountInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLWLimitAccountInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLWLimitAccountInfo:CLWLimitAccountInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLWLimitAccountInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLWLimitAccountInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLWLimitAccountInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLWLimitAccountInfo* self = (CLWLimitAccountInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLWLimitAccountInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLWLimitAccountInfo");
    tolua_cclass(tolua_S,"CLWLimitAccountInfo","CLWLimitAccountInfo","CServerPacket",lua_worldserver_CLWLimitAccountInfo_finalize);

    tolua_beginmodule(tolua_S,"CLWLimitAccountInfo");
        tolua_function(tolua_S,"new",lua_worldserver_CLWLimitAccountInfo_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CLWLimitAccountInfo_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLWLimitAccountInfo).name();
    g_luaType[typeName] = "CLWLimitAccountInfo";
    g_typeCast["CLWLimitAccountInfo"] = "CLWLimitAccountInfo";
    return 1;
}

int lua_worldserver_CLWLimitChatInfo_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CLWLimitChatInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLWLimitChatInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLWLimitChatInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLWLimitChatInfo_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLWLimitChatInfo:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLWLimitChatInfo_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLWLimitChatInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLWLimitChatInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLWLimitChatInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLWLimitChatInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLWLimitChatInfo:CLWLimitChatInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLWLimitChatInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLWLimitChatInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLWLimitChatInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLWLimitChatInfo* self = (CLWLimitChatInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLWLimitChatInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLWLimitChatInfo");
    tolua_cclass(tolua_S,"CLWLimitChatInfo","CLWLimitChatInfo","CServerPacket",lua_worldserver_CLWLimitChatInfo_finalize);

    tolua_beginmodule(tolua_S,"CLWLimitChatInfo");
        tolua_function(tolua_S,"new",lua_worldserver_CLWLimitChatInfo_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CLWLimitChatInfo_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLWLimitChatInfo).name();
    g_luaType[typeName] = "CLWLimitChatInfo";
    g_typeCast["CLWLimitChatInfo"] = "CLWLimitChatInfo";
    return 1;
}

static int lua_worldserver_WLChargeRmb_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WLChargeRmb)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WLChargeRmb",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WLChargeRmb* self = (WLChargeRmb*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WLChargeRmb(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WLChargeRmb");
    tolua_cclass(tolua_S,"WLChargeRmb","WLChargeRmb","CServerPacket",nullptr);

    tolua_beginmodule(tolua_S,"WLChargeRmb");
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WLChargeRmb).name();
    g_luaType[typeName] = "WLChargeRmb";
    g_typeCast["WLChargeRmb"] = "WLChargeRmb";
    return 1;
}

int lua_worldserver_CWLLimitInfoReq_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWLLimitInfoReq* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWLLimitInfoReq",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWLLimitInfoReq*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWLLimitInfoReq_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWLLimitInfoReq:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWLLimitInfoReq_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWLLimitInfoReq_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWLLimitInfoReq* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWLLimitInfoReq();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWLLimitInfoReq");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWLLimitInfoReq:CWLLimitInfoReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWLLimitInfoReq_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWLLimitInfoReq)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWLLimitInfoReq",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWLLimitInfoReq* self = (CWLLimitInfoReq*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWLLimitInfoReq(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWLLimitInfoReq");
    tolua_cclass(tolua_S,"CWLLimitInfoReq","CWLLimitInfoReq","CServerPacket",lua_worldserver_CWLLimitInfoReq_finalize);

    tolua_beginmodule(tolua_S,"CWLLimitInfoReq");
        tolua_function(tolua_S,"new",lua_worldserver_CWLLimitInfoReq_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWLLimitInfoReq_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWLLimitInfoReq).name();
    g_luaType[typeName] = "CWLLimitInfoReq";
    g_typeCast["CWLLimitInfoReq"] = "CWLLimitInfoReq";
    return 1;
}

int lua_worldserver_CWorldLoginServerHandler_sendRoleLimit(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerHandler_sendRoleLimit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        unsigned long long arg0;
        unsigned long long arg1;
        unsigned short arg2;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldLoginServerHandler:sendRoleLimit");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldLoginServerHandler:sendRoleLimit");

        ok &= luaval_to_uint16(tolua_S, 4, (uint16*)&arg2, "CWorldLoginServerHandler:sendRoleLimit");
        if(!ok)
            return 0;
        cobj->sendRoleLimit(arg0, arg1, arg2);
        return 0;
    }

    gxError("CWorldLoginServerHandler:sendRoleLimit has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerHandler_sendRoleLimit'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerHandler_sendUpdateData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerHandler_sendUpdateData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldLoginServerHandler:sendUpdateData");
        if(!ok)
            return 0;
        cobj->sendUpdateData(arg0);
        return 0;
    }

    gxError("CWorldLoginServerHandler:sendUpdateData has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerHandler_sendUpdateData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerHandler_sendRegiste(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerHandler_sendRegiste'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CWorldServerConfig* arg0;

        ok &= luaval_to_object<CWorldServerConfig>(tolua_S, 2, "CWorldServerConfig", &arg0, "CWorldLoginServerHandler:sendRegiste");
        if(!ok)
            return 0;
        cobj->sendRegiste(arg0);
        return 0;
    }

    gxError("CWorldLoginServerHandler:sendRegiste has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerHandler_sendRegiste'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerHandler_sendRoleCreate(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerHandler_sendRoleCreate'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldLoginServerHandler:sendRoleCreate");
        if(!ok)
            return 0;
        cobj->sendRoleCreate(arg0);
        return 0;
    }

    gxError("CWorldLoginServerHandler:sendRoleCreate has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerHandler_sendRoleCreate'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerHandler_sendRoleLogin(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerHandler_sendRoleLogin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 6) 
    {
        unsigned long long arg0;
        unsigned long long arg1;
        unsigned long long arg2;
        std::string arg3;
        unsigned short arg4;
        std::string arg5;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldLoginServerHandler:sendRoleLogin");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldLoginServerHandler:sendRoleLogin");

        ok &= luaval_to_uint64(tolua_S, 4, (uint64*)&arg2, "CWorldLoginServerHandler:sendRoleLogin");

        ok &= luaval_to_std_string(tolua_S, 5,&arg3, "CWorldLoginServerHandler:sendRoleLogin");

        ok &= luaval_to_uint16(tolua_S, 6, (uint16*)&arg4, "CWorldLoginServerHandler:sendRoleLogin");

        ok &= luaval_to_std_string(tolua_S, 7,&arg5, "CWorldLoginServerHandler:sendRoleLogin");
        if(!ok)
            return 0;
        cobj->sendRoleLogin(arg0, arg1, arg2, arg3, arg4, arg5);
        return 0;
    }

    gxError("CWorldLoginServerHandler:sendRoleLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 6);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerHandler_sendRoleLogin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerHandler_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldLoginServerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldLoginServerHandler::Setup();
        return 0;
    }
    gxError("CWorldLoginServerHandler:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerHandler_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldLoginServerHandler_UnSetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldLoginServerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldLoginServerHandler::UnSetup();
        return 0;
    }
    gxError("CWorldLoginServerHandler:UnSetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerHandler_UnSetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldLoginServerHandler_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerHandler* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldLoginServerHandler();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldLoginServerHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldLoginServerHandler:CWorldLoginServerHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldLoginServerHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldLoginServerHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldLoginServerHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldLoginServerHandler* self = (CWorldLoginServerHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldLoginServerHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldLoginServerHandler");
    tolua_cclass(tolua_S,"CWorldLoginServerHandler","CWorldLoginServerHandler","CGameSocketHandler<CWorldLoginServerHandler>",lua_worldserver_CWorldLoginServerHandler_finalize);

    tolua_beginmodule(tolua_S,"CWorldLoginServerHandler");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldLoginServerHandler_constructor);
        tolua_function(tolua_S,"sendRoleLimit",lua_worldserver_CWorldLoginServerHandler_sendRoleLimit);
        tolua_function(tolua_S,"sendUpdateData",lua_worldserver_CWorldLoginServerHandler_sendUpdateData);
        tolua_function(tolua_S,"sendRegiste",lua_worldserver_CWorldLoginServerHandler_sendRegiste);
        tolua_function(tolua_S,"sendRoleCreate",lua_worldserver_CWorldLoginServerHandler_sendRoleCreate);
        tolua_function(tolua_S,"sendRoleLogin",lua_worldserver_CWorldLoginServerHandler_sendRoleLogin);
        tolua_function(tolua_S,"Setup", lua_worldserver_CWorldLoginServerHandler_Setup);
        tolua_function(tolua_S,"UnSetup", lua_worldserver_CWorldLoginServerHandler_UnSetup);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldLoginServerHandler).name();
    g_luaType[typeName] = "CWorldLoginServerHandler";
    g_typeCast["CWorldLoginServerHandler"] = "CWorldLoginServerHandler";
    return 1;
}

int lua_worldserver_CWorldLoginServer_getServerHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServer_getServerHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldLoginServerHandler* ret = cobj->getServerHandler();
        object_to_luaval<CWorldLoginServerHandler>(tolua_S, "CWorldLoginServerHandler",(CWorldLoginServerHandler*)ret);
        return 1;
    }

    gxError("CWorldLoginServer:getServerHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServer_getServerHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServer* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldLoginServer();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldLoginServer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldLoginServer:CWorldLoginServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldLoginServer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldLoginServer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldLoginServer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldLoginServer* self = (CWorldLoginServer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldLoginServer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldLoginServer");
    tolua_cclass(tolua_S,"CWorldLoginServer","CWorldLoginServer","IArrayEnable<CWorldLoginServer>",lua_worldserver_CWorldLoginServer_finalize);

    tolua_beginmodule(tolua_S,"CWorldLoginServer");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldLoginServer_constructor);
        tolua_function(tolua_S,"getServerHandler",lua_worldserver_CWorldLoginServer_getServerHandler);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldLoginServer).name();
    g_luaType[typeName] = "CWorldLoginServer";
    g_typeCast["CWorldLoginServer"] = "CWorldLoginServer";
    return 1;
}

int lua_worldserver_CWorldLoginServerManager_findByServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerManager_findByServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldLoginServerManager:findByServerID");
        if(!ok)
            return 0;
        CWorldLoginServer* ret = cobj->findByServerID(arg0);
        object_to_luaval<CWorldLoginServer>(tolua_S, "CWorldLoginServer",(CWorldLoginServer*)ret);
        return 1;
    }

    gxError("CWorldLoginServerManager:findByServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerManager_findByServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerManager_getRandServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerManager_getRandServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldLoginServer* ret = cobj->getRandServer();
        object_to_luaval<CWorldLoginServer>(tolua_S, "CWorldLoginServer",(CWorldLoginServer*)ret);
        return 1;
    }

    gxError("CWorldLoginServerManager:getRandServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerManager_getRandServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerManager_deleteByServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerManager_deleteByServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldLoginServerManager:deleteByServerID");
        if(!ok)
            return 0;
        cobj->deleteByServerID(arg0);
        return 0;
    }

    gxError("CWorldLoginServerManager:deleteByServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerManager_deleteByServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerManager_isExistByServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerManager_isExistByServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldLoginServerManager:isExistByServerID");
        if(!ok)
            return 0;
        bool ret = cobj->isExistByServerID(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldLoginServerManager:isExistByServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerManager_isExistByServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerManager_addServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerManager_addServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        LoginServerData* arg0;
        unsigned long long arg1;

        ok &= luaval_to_object<LoginServerData>(tolua_S, 2, "LoginServerData", &arg0, "CWorldLoginServerManager:addServer");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldLoginServerManager:addServer");
        if(!ok)
            return 0;
        cobj->addServer(arg0, arg1);
        return 0;
    }

    gxError("CWorldLoginServerManager:addServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerManager_addServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerManager_deleteBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerManager_deleteBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldLoginServerManager:deleteBySocketIndex");
        if(!ok)
            return 0;
        cobj->deleteBySocketIndex(arg0);
        return 0;
    }

    gxError("CWorldLoginServerManager:deleteBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerManager_deleteBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldLoginServerManager_size(lua_State* tolua_S)
{
    int argc = 0;
    CWorldLoginServerManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldLoginServerManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldLoginServerManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldLoginServerManager_size'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->size();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldLoginServerManager:size has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldLoginServerManager_size'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CWorldLoginServerManager_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldLoginServerManager)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldLoginServerManager",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldLoginServerManager* self = (CWorldLoginServerManager*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldLoginServerManager(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldLoginServerManager");
    tolua_cclass(tolua_S,"CWorldLoginServerManager","CWorldLoginServerManager","CSingleton<CWorldLoginServerManager>",nullptr);

    tolua_beginmodule(tolua_S,"CWorldLoginServerManager");
        tolua_function(tolua_S,"findByServerID",lua_worldserver_CWorldLoginServerManager_findByServerID);
        tolua_function(tolua_S,"getRandServer",lua_worldserver_CWorldLoginServerManager_getRandServer);
        tolua_function(tolua_S,"deleteByServerID",lua_worldserver_CWorldLoginServerManager_deleteByServerID);
        tolua_function(tolua_S,"isExistByServerID",lua_worldserver_CWorldLoginServerManager_isExistByServerID);
        tolua_function(tolua_S,"addServer",lua_worldserver_CWorldLoginServerManager_addServer);
        tolua_function(tolua_S,"deleteBySocketIndex",lua_worldserver_CWorldLoginServerManager_deleteBySocketIndex);
        tolua_function(tolua_S,"size",lua_worldserver_CWorldLoginServerManager_size);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldLoginServerManager).name();
    g_luaType[typeName] = "CWorldLoginServerManager";
    g_typeCast["CWorldLoginServerManager"] = "CWorldLoginServerManager";
    return 1;
}

int lua_worldserver_MWRegiste_toString(lua_State* tolua_S)
{
    int argc = 0;
    MWRegiste* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRegiste",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRegiste*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRegiste_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("MWRegiste:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRegiste_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRegiste_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWRegiste* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRegiste",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRegiste*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRegiste_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWRegiste:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRegiste_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRegiste_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWRegiste* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWRegiste();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWRegiste");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWRegiste:MWRegiste has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWRegiste_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWRegiste)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWRegiste",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWRegiste* self = (MWRegiste*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWRegiste(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWRegiste");
    tolua_cclass(tolua_S,"MWRegiste","MWRegiste","CRequestPacket",lua_worldserver_MWRegiste_finalize);

    tolua_beginmodule(tolua_S,"MWRegiste");
        tolua_function(tolua_S,"new",lua_worldserver_MWRegiste_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_MWRegiste_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWRegiste_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWRegiste).name();
    g_luaType[typeName] = "MWRegiste";
    g_typeCast["MWRegiste"] = "MWRegiste";
    return 1;
}

int lua_worldserver_WMRegisteRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMRegisteRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMRegisteRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMRegisteRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMRegisteRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMRegisteRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMRegisteRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMRegisteRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMRegisteRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMRegisteRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMRegisteRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMRegisteRet:WMRegisteRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMRegisteRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMRegisteRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMRegisteRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMRegisteRet* self = (WMRegisteRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMRegisteRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMRegisteRet");
    tolua_cclass(tolua_S,"WMRegisteRet","WMRegisteRet","CResponsePacket",lua_worldserver_WMRegisteRet_finalize);

    tolua_beginmodule(tolua_S,"WMRegisteRet");
        tolua_function(tolua_S,"new",lua_worldserver_WMRegisteRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMRegisteRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMRegisteRet).name();
    g_luaType[typeName] = "WMRegisteRet";
    g_typeCast["WMRegisteRet"] = "WMRegisteRet";
    return 1;
}

int lua_worldserver_MWBroadPacket_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWBroadPacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWBroadPacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWBroadPacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWBroadPacket_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWBroadPacket:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWBroadPacket_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWBroadPacket_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWBroadPacket* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWBroadPacket();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWBroadPacket");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWBroadPacket:MWBroadPacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWBroadPacket_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWBroadPacket)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWBroadPacket",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWBroadPacket* self = (MWBroadPacket*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWBroadPacket(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWBroadPacket");
    tolua_cclass(tolua_S,"MWBroadPacket","MWBroadPacket","CRequestPacket",lua_worldserver_MWBroadPacket_finalize);

    tolua_beginmodule(tolua_S,"MWBroadPacket");
        tolua_function(tolua_S,"new",lua_worldserver_MWBroadPacket_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWBroadPacket_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWBroadPacket).name();
    g_luaType[typeName] = "MWBroadPacket";
    g_typeCast["MWBroadPacket"] = "MWBroadPacket";
    return 1;
}

int lua_worldserver_MWTransPacket_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWTransPacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWTransPacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWTransPacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWTransPacket_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWTransPacket:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWTransPacket_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWTransPacket_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWTransPacket* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWTransPacket();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWTransPacket");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWTransPacket:MWTransPacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWTransPacket_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWTransPacket)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWTransPacket",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWTransPacket* self = (MWTransPacket*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWTransPacket(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWTransPacket");
    tolua_cclass(tolua_S,"MWTransPacket","MWTransPacket","CRequestPacket",lua_worldserver_MWTransPacket_finalize);

    tolua_beginmodule(tolua_S,"MWTransPacket");
        tolua_function(tolua_S,"new",lua_worldserver_MWTransPacket_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWTransPacket_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWTransPacket).name();
    g_luaType[typeName] = "MWTransPacket";
    g_typeCast["MWTransPacket"] = "MWTransPacket";
    return 1;
}

int lua_worldserver_MWTrans2WorldPacket_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWTrans2WorldPacket* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWTrans2WorldPacket",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWTrans2WorldPacket*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWTrans2WorldPacket_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWTrans2WorldPacket:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWTrans2WorldPacket_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWTrans2WorldPacket_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWTrans2WorldPacket* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWTrans2WorldPacket();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWTrans2WorldPacket");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWTrans2WorldPacket:MWTrans2WorldPacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWTrans2WorldPacket_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWTrans2WorldPacket)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWTrans2WorldPacket",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWTrans2WorldPacket* self = (MWTrans2WorldPacket*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWTrans2WorldPacket(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWTrans2WorldPacket");
    tolua_cclass(tolua_S,"MWTrans2WorldPacket","MWTrans2WorldPacket","CRequestPacket",lua_worldserver_MWTrans2WorldPacket_finalize);

    tolua_beginmodule(tolua_S,"MWTrans2WorldPacket");
        tolua_function(tolua_S,"new",lua_worldserver_MWTrans2WorldPacket_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWTrans2WorldPacket_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWTrans2WorldPacket).name();
    g_luaType[typeName] = "MWTrans2WorldPacket";
    g_typeCast["MWTrans2WorldPacket"] = "MWTrans2WorldPacket";
    return 1;
}

int lua_worldserver_WMTransPacketError_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMTransPacketError* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMTransPacketError",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMTransPacketError*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMTransPacketError_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMTransPacketError:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMTransPacketError_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMTransPacketError_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMTransPacketError* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMTransPacketError();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMTransPacketError");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMTransPacketError:WMTransPacketError has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMTransPacketError_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMTransPacketError)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMTransPacketError",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMTransPacketError* self = (WMTransPacketError*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMTransPacketError(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMTransPacketError");
    tolua_cclass(tolua_S,"WMTransPacketError","WMTransPacketError","CResponsePacket",lua_worldserver_WMTransPacketError_finalize);

    tolua_beginmodule(tolua_S,"WMTransPacketError");
        tolua_function(tolua_S,"new",lua_worldserver_WMTransPacketError_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMTransPacketError_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMTransPacketError).name();
    g_luaType[typeName] = "WMTransPacketError";
    g_typeCast["WMTransPacketError"] = "WMTransPacketError";
    return 1;
}

int lua_worldserver_WMUpdateServer_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMUpdateServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMUpdateServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMUpdateServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMUpdateServer_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMUpdateServer:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMUpdateServer_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMUpdateServer_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WMUpdateServer",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        WMUpdateServer::Setup();
        return 0;
    }
    gxError("WMUpdateServer:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMUpdateServer_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_WMUpdateServer_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WMUpdateServer",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        WMUpdateServer::Unsetup();
        return 0;
    }
    gxError("WMUpdateServer:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMUpdateServer_Unsetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_WMUpdateServer_Unpacket(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WMUpdateServer",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        WMUpdateServer* arg0;
        const char* arg1;
        int arg2;
        ok &= luaval_to_object<WMUpdateServer>(tolua_S, 2, "WMUpdateServer", &arg0, "WMUpdateServer:Unpacket");
        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "WMUpdateServer:Unpacket"); arg1 = (char*)arg1_tmp.buffer;
        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "WMUpdateServer:Unpacket");
        if(!ok)
            return 0;
        bool ret = WMUpdateServer::Unpacket(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("WMUpdateServer:Unpacket has wrong number of arguments: {0}, was expecting {1}\n ", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMUpdateServer_Unpacket'.", &tolua_err);
    return 0;
}
int lua_worldserver_WMUpdateServer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMUpdateServer* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMUpdateServer();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMUpdateServer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMUpdateServer:WMUpdateServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMUpdateServer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMUpdateServer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMUpdateServer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMUpdateServer* self = (WMUpdateServer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMUpdateServer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMUpdateServer");
    tolua_cclass(tolua_S,"WMUpdateServer","WMUpdateServer","CServerPacket",lua_worldserver_WMUpdateServer_finalize);

    tolua_beginmodule(tolua_S,"WMUpdateServer");
        tolua_function(tolua_S,"new",lua_worldserver_WMUpdateServer_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMUpdateServer_getPackLen);
        tolua_function(tolua_S,"Setup", lua_worldserver_WMUpdateServer_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_WMUpdateServer_Unsetup);
        tolua_function(tolua_S,"Unpacket", lua_worldserver_WMUpdateServer_Unpacket);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMUpdateServer).name();
    g_luaType[typeName] = "WMUpdateServer";
    g_typeCast["WMUpdateServer"] = "WMUpdateServer";
    return 1;
}

int lua_worldserver_MWUpdateServer_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWUpdateServer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWUpdateServer",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWUpdateServer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWUpdateServer_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWUpdateServer:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWUpdateServer_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWUpdateServer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWUpdateServer* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWUpdateServer();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWUpdateServer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWUpdateServer:MWUpdateServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWUpdateServer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWUpdateServer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWUpdateServer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWUpdateServer* self = (MWUpdateServer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWUpdateServer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWUpdateServer");
    tolua_cclass(tolua_S,"MWUpdateServer","MWUpdateServer","CServerPacket",lua_worldserver_MWUpdateServer_finalize);

    tolua_beginmodule(tolua_S,"MWUpdateServer");
        tolua_function(tolua_S,"new",lua_worldserver_MWUpdateServer_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWUpdateServer_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWUpdateServer).name();
    g_luaType[typeName] = "MWUpdateServer";
    g_typeCast["MWUpdateServer"] = "MWUpdateServer";
    return 1;
}

int lua_worldserver_MWOpenScene_toString(lua_State* tolua_S)
{
    int argc = 0;
    MWOpenScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWOpenScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWOpenScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWOpenScene_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("MWOpenScene:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWOpenScene_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWOpenScene_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWOpenScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWOpenScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWOpenScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWOpenScene_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWOpenScene:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWOpenScene_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWOpenScene_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWOpenScene* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWOpenScene();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWOpenScene");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWOpenScene:MWOpenScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWOpenScene_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWOpenScene)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWOpenScene",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWOpenScene* self = (MWOpenScene*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWOpenScene(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWOpenScene");
    tolua_cclass(tolua_S,"MWOpenScene","MWOpenScene","CServerPacket",lua_worldserver_MWOpenScene_finalize);

    tolua_beginmodule(tolua_S,"MWOpenScene");
        tolua_function(tolua_S,"new",lua_worldserver_MWOpenScene_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_MWOpenScene_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWOpenScene_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWOpenScene).name();
    g_luaType[typeName] = "MWOpenScene";
    g_typeCast["MWOpenScene"] = "MWOpenScene";
    return 1;
}

int lua_worldserver_MWCloseScene_toString(lua_State* tolua_S)
{
    int argc = 0;
    MWCloseScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWCloseScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWCloseScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWCloseScene_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("MWCloseScene:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWCloseScene_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWCloseScene_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWCloseScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWCloseScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWCloseScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWCloseScene_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWCloseScene:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWCloseScene_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWCloseScene_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWCloseScene* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWCloseScene();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWCloseScene");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWCloseScene:MWCloseScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWCloseScene_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWCloseScene)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWCloseScene",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWCloseScene* self = (MWCloseScene*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWCloseScene(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWCloseScene");
    tolua_cclass(tolua_S,"MWCloseScene","MWCloseScene","CServerPacket",lua_worldserver_MWCloseScene_finalize);

    tolua_beginmodule(tolua_S,"MWCloseScene");
        tolua_function(tolua_S,"new",lua_worldserver_MWCloseScene_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_MWCloseScene_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWCloseScene_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWCloseScene).name();
    g_luaType[typeName] = "MWCloseScene";
    g_typeCast["MWCloseScene"] = "MWCloseScene";
    return 1;
}

int lua_worldserver_MMChangeScene_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MMChangeScene* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MMChangeScene",0,&tolua_err)) goto tolua_lerror;
    cobj = (MMChangeScene*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MMChangeScene_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MMChangeScene:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MMChangeScene_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MMChangeScene_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MMChangeScene* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MMChangeScene();
        tolua_pushusertype(tolua_S,(void*)cobj,"MMChangeScene");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MMChangeScene:MMChangeScene has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MMChangeScene_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MMChangeScene)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MMChangeScene",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MMChangeScene* self = (MMChangeScene*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MMChangeScene(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MMChangeScene");
    tolua_cclass(tolua_S,"MMChangeScene","MMChangeScene","CServerPacket",lua_worldserver_MMChangeScene_finalize);

    tolua_beginmodule(tolua_S,"MMChangeScene");
        tolua_function(tolua_S,"new",lua_worldserver_MMChangeScene_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MMChangeScene_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MMChangeScene).name();
    g_luaType[typeName] = "MMChangeScene";
    g_typeCast["MMChangeScene"] = "MMChangeScene";
    return 1;
}

int lua_worldserver_MWChangeLine_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWChangeLine* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWChangeLine",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWChangeLine*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWChangeLine_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWChangeLine:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWChangeLine_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWChangeLine_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWChangeLine* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWChangeLine();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWChangeLine");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWChangeLine:MWChangeLine has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWChangeLine_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWChangeLine)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWChangeLine",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWChangeLine* self = (MWChangeLine*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWChangeLine(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWChangeLine");
    tolua_cclass(tolua_S,"MWChangeLine","MWChangeLine","CRequestPacket",lua_worldserver_MWChangeLine_finalize);

    tolua_beginmodule(tolua_S,"MWChangeLine");
        tolua_function(tolua_S,"new",lua_worldserver_MWChangeLine_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWChangeLine_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWChangeLine).name();
    g_luaType[typeName] = "MWChangeLine";
    g_typeCast["MWChangeLine"] = "MWChangeLine";
    return 1;
}

int lua_worldserver_WMChangeLine_toString(lua_State* tolua_S)
{
    int argc = 0;
    WMChangeLine* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMChangeLine",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMChangeLine*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMChangeLine_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("WMChangeLine:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMChangeLine_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMChangeLine_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMChangeLine* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMChangeLine",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMChangeLine*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMChangeLine_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMChangeLine:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMChangeLine_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMChangeLine_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMChangeLine* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMChangeLine();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMChangeLine");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMChangeLine:WMChangeLine has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMChangeLine_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMChangeLine)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMChangeLine",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMChangeLine* self = (WMChangeLine*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMChangeLine(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMChangeLine");
    tolua_cclass(tolua_S,"WMChangeLine","WMChangeLine","CServerPacket",lua_worldserver_WMChangeLine_finalize);

    tolua_beginmodule(tolua_S,"WMChangeLine");
        tolua_function(tolua_S,"new",lua_worldserver_WMChangeLine_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_WMChangeLine_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMChangeLine_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMChangeLine).name();
    g_luaType[typeName] = "WMChangeLine";
    g_typeCast["WMChangeLine"] = "WMChangeLine";
    return 1;
}

int lua_worldserver_WMChangeLineRet_toString(lua_State* tolua_S)
{
    int argc = 0;
    WMChangeLineRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMChangeLineRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMChangeLineRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMChangeLineRet_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("WMChangeLineRet:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMChangeLineRet_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMChangeLineRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMChangeLineRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMChangeLineRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMChangeLineRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMChangeLineRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMChangeLineRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMChangeLineRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMChangeLineRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMChangeLineRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMChangeLineRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMChangeLineRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMChangeLineRet:WMChangeLineRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMChangeLineRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMChangeLineRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMChangeLineRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMChangeLineRet* self = (WMChangeLineRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMChangeLineRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMChangeLineRet");
    tolua_cclass(tolua_S,"WMChangeLineRet","WMChangeLineRet","CResponsePacket",lua_worldserver_WMChangeLineRet_finalize);

    tolua_beginmodule(tolua_S,"WMChangeLineRet");
        tolua_function(tolua_S,"new",lua_worldserver_WMChangeLineRet_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_WMChangeLineRet_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMChangeLineRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMChangeLineRet).name();
    g_luaType[typeName] = "WMChangeLineRet";
    g_typeCast["WMChangeLineRet"] = "WMChangeLineRet";
    return 1;
}

int lua_worldserver_WMLoadRoleData_toString(lua_State* tolua_S)
{
    int argc = 0;
    WMLoadRoleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMLoadRoleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMLoadRoleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMLoadRoleData_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("WMLoadRoleData:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMLoadRoleData_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMLoadRoleData_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMLoadRoleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMLoadRoleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMLoadRoleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMLoadRoleData_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMLoadRoleData:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMLoadRoleData_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMLoadRoleData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMLoadRoleData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMLoadRoleData();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMLoadRoleData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMLoadRoleData:WMLoadRoleData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMLoadRoleData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMLoadRoleData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMLoadRoleData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMLoadRoleData* self = (WMLoadRoleData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMLoadRoleData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMLoadRoleData");
    tolua_cclass(tolua_S,"WMLoadRoleData","WMLoadRoleData","CRequestPacket",lua_worldserver_WMLoadRoleData_finalize);

    tolua_beginmodule(tolua_S,"WMLoadRoleData");
        tolua_function(tolua_S,"new",lua_worldserver_WMLoadRoleData_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_WMLoadRoleData_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMLoadRoleData_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMLoadRoleData).name();
    g_luaType[typeName] = "WMLoadRoleData";
    g_typeCast["WMLoadRoleData"] = "WMLoadRoleData";
    return 1;
}

int lua_worldserver_MWLoadRoleDataRet_toString(lua_State* tolua_S)
{
    int argc = 0;
    MWLoadRoleDataRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWLoadRoleDataRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWLoadRoleDataRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWLoadRoleDataRet_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("MWLoadRoleDataRet:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWLoadRoleDataRet_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWLoadRoleDataRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWLoadRoleDataRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWLoadRoleDataRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWLoadRoleDataRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWLoadRoleDataRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWLoadRoleDataRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWLoadRoleDataRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWLoadRoleDataRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWLoadRoleDataRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWLoadRoleDataRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWLoadRoleDataRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWLoadRoleDataRet:MWLoadRoleDataRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWLoadRoleDataRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWLoadRoleDataRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWLoadRoleDataRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWLoadRoleDataRet* self = (MWLoadRoleDataRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWLoadRoleDataRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWLoadRoleDataRet");
    tolua_cclass(tolua_S,"MWLoadRoleDataRet","MWLoadRoleDataRet","CResponsePacket",lua_worldserver_MWLoadRoleDataRet_finalize);

    tolua_beginmodule(tolua_S,"MWLoadRoleDataRet");
        tolua_function(tolua_S,"new",lua_worldserver_MWLoadRoleDataRet_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_MWLoadRoleDataRet_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWLoadRoleDataRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWLoadRoleDataRet).name();
    g_luaType[typeName] = "MWLoadRoleDataRet";
    g_typeCast["MWLoadRoleDataRet"] = "MWLoadRoleDataRet";
    return 1;
}

int lua_worldserver_WMUnloadRoleData_toString(lua_State* tolua_S)
{
    int argc = 0;
    WMUnloadRoleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMUnloadRoleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMUnloadRoleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMUnloadRoleData_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("WMUnloadRoleData:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMUnloadRoleData_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMUnloadRoleData_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMUnloadRoleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMUnloadRoleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMUnloadRoleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMUnloadRoleData_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMUnloadRoleData:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMUnloadRoleData_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMUnloadRoleData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMUnloadRoleData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMUnloadRoleData();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMUnloadRoleData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMUnloadRoleData:WMUnloadRoleData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMUnloadRoleData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMUnloadRoleData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMUnloadRoleData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMUnloadRoleData* self = (WMUnloadRoleData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMUnloadRoleData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMUnloadRoleData");
    tolua_cclass(tolua_S,"WMUnloadRoleData","WMUnloadRoleData","CRequestPacket",lua_worldserver_WMUnloadRoleData_finalize);

    tolua_beginmodule(tolua_S,"WMUnloadRoleData");
        tolua_function(tolua_S,"new",lua_worldserver_WMUnloadRoleData_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_WMUnloadRoleData_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMUnloadRoleData_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMUnloadRoleData).name();
    g_luaType[typeName] = "WMUnloadRoleData";
    g_typeCast["WMUnloadRoleData"] = "WMUnloadRoleData";
    return 1;
}

int lua_worldserver_MWUnloadRoleDataRet_toString(lua_State* tolua_S)
{
    int argc = 0;
    MWUnloadRoleDataRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWUnloadRoleDataRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWUnloadRoleDataRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWUnloadRoleDataRet_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("MWUnloadRoleDataRet:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWUnloadRoleDataRet_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWUnloadRoleDataRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWUnloadRoleDataRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWUnloadRoleDataRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWUnloadRoleDataRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWUnloadRoleDataRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWUnloadRoleDataRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWUnloadRoleDataRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWUnloadRoleDataRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWUnloadRoleDataRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWUnloadRoleDataRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWUnloadRoleDataRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWUnloadRoleDataRet:MWUnloadRoleDataRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWUnloadRoleDataRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWUnloadRoleDataRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWUnloadRoleDataRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWUnloadRoleDataRet* self = (MWUnloadRoleDataRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWUnloadRoleDataRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWUnloadRoleDataRet");
    tolua_cclass(tolua_S,"MWUnloadRoleDataRet","MWUnloadRoleDataRet","CResponsePacket",lua_worldserver_MWUnloadRoleDataRet_finalize);

    tolua_beginmodule(tolua_S,"MWUnloadRoleDataRet");
        tolua_function(tolua_S,"new",lua_worldserver_MWUnloadRoleDataRet_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_MWUnloadRoleDataRet_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWUnloadRoleDataRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWUnloadRoleDataRet).name();
    g_luaType[typeName] = "MWUnloadRoleDataRet";
    g_typeCast["MWUnloadRoleDataRet"] = "MWUnloadRoleDataRet";
    return 1;
}

int lua_worldserver_MWRoleQuit_toString(lua_State* tolua_S)
{
    int argc = 0;
    MWRoleQuit* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRoleQuit",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRoleQuit*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRoleQuit_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("MWRoleQuit:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRoleQuit_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRoleQuit_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWRoleQuit* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRoleQuit",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRoleQuit*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRoleQuit_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWRoleQuit:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRoleQuit_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRoleQuit_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWRoleQuit* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWRoleQuit();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWRoleQuit");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWRoleQuit:MWRoleQuit has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWRoleQuit_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWRoleQuit)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWRoleQuit",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWRoleQuit* self = (MWRoleQuit*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWRoleQuit(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWRoleQuit");
    tolua_cclass(tolua_S,"MWRoleQuit","MWRoleQuit","CRequestPacket",lua_worldserver_MWRoleQuit_finalize);

    tolua_beginmodule(tolua_S,"MWRoleQuit");
        tolua_function(tolua_S,"new",lua_worldserver_MWRoleQuit_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_MWRoleQuit_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWRoleQuit_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWRoleQuit).name();
    g_luaType[typeName] = "MWRoleQuit";
    g_typeCast["MWRoleQuit"] = "MWRoleQuit";
    return 1;
}

int lua_worldserver_MWUserLogin_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWUserLogin* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWUserLogin",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWUserLogin*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWUserLogin_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWUserLogin:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWUserLogin_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWUserLogin_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWUserLogin* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWUserLogin();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWUserLogin");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWUserLogin:MWUserLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWUserLogin_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWUserLogin)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWUserLogin",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWUserLogin* self = (MWUserLogin*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWUserLogin(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWUserLogin");
    tolua_cclass(tolua_S,"MWUserLogin","MWUserLogin","CServerPacket",lua_worldserver_MWUserLogin_finalize);

    tolua_beginmodule(tolua_S,"MWUserLogin");
        tolua_function(tolua_S,"new",lua_worldserver_MWUserLogin_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWUserLogin_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWUserLogin).name();
    g_luaType[typeName] = "MWUserLogin";
    g_typeCast["MWUserLogin"] = "MWUserLogin";
    return 1;
}

int lua_worldserver_MWRoleHeart_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWRoleHeart* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRoleHeart",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRoleHeart*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRoleHeart_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWRoleHeart:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRoleHeart_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRoleHeart_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWRoleHeart* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWRoleHeart();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWRoleHeart");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWRoleHeart:MWRoleHeart has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWRoleHeart_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWRoleHeart)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWRoleHeart",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWRoleHeart* self = (MWRoleHeart*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWRoleHeart(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWRoleHeart");
    tolua_cclass(tolua_S,"MWRoleHeart","MWRoleHeart","CRequestPacket",lua_worldserver_MWRoleHeart_finalize);

    tolua_beginmodule(tolua_S,"MWRoleHeart");
        tolua_function(tolua_S,"new",lua_worldserver_MWRoleHeart_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWRoleHeart_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWRoleHeart).name();
    g_luaType[typeName] = "MWRoleHeart";
    g_typeCast["MWRoleHeart"] = "MWRoleHeart";
    return 1;
}

int lua_worldserver_WMRoleHeartRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMRoleHeartRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMRoleHeartRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMRoleHeartRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMRoleHeartRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMRoleHeartRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMRoleHeartRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMRoleHeartRet_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WMRoleHeartRet",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        WMRoleHeartRet::Setup();
        return 0;
    }
    gxError("WMRoleHeartRet:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMRoleHeartRet_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_WMRoleHeartRet_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WMRoleHeartRet",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        WMRoleHeartRet::Unsetup();
        return 0;
    }
    gxError("WMRoleHeartRet:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMRoleHeartRet_Unsetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_WMRoleHeartRet_Unpacket(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WMRoleHeartRet",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        WMRoleHeartRet* arg0;
        const char* arg1;
        int arg2;
        ok &= luaval_to_object<WMRoleHeartRet>(tolua_S, 2, "WMRoleHeartRet", &arg0, "WMRoleHeartRet:Unpacket");
        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "WMRoleHeartRet:Unpacket"); arg1 = (char*)arg1_tmp.buffer;
        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "WMRoleHeartRet:Unpacket");
        if(!ok)
            return 0;
        bool ret = WMRoleHeartRet::Unpacket(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("WMRoleHeartRet:Unpacket has wrong number of arguments: {0}, was expecting {1}\n ", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMRoleHeartRet_Unpacket'.", &tolua_err);
    return 0;
}
int lua_worldserver_WMRoleHeartRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMRoleHeartRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMRoleHeartRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMRoleHeartRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMRoleHeartRet:WMRoleHeartRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMRoleHeartRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMRoleHeartRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMRoleHeartRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMRoleHeartRet* self = (WMRoleHeartRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMRoleHeartRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMRoleHeartRet");
    tolua_cclass(tolua_S,"WMRoleHeartRet","WMRoleHeartRet","CResponsePacket",lua_worldserver_WMRoleHeartRet_finalize);

    tolua_beginmodule(tolua_S,"WMRoleHeartRet");
        tolua_function(tolua_S,"new",lua_worldserver_WMRoleHeartRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMRoleHeartRet_getPackLen);
        tolua_function(tolua_S,"Setup", lua_worldserver_WMRoleHeartRet_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_WMRoleHeartRet_Unsetup);
        tolua_function(tolua_S,"Unpacket", lua_worldserver_WMRoleHeartRet_Unpacket);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMRoleHeartRet).name();
    g_luaType[typeName] = "WMRoleHeartRet";
    g_typeCast["WMRoleHeartRet"] = "WMRoleHeartRet";
    return 1;
}

int lua_worldserver_MWRoleKick_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWRoleKick* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRoleKick",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRoleKick*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRoleKick_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWRoleKick:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRoleKick_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRoleKick_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWRoleKick* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWRoleKick();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWRoleKick");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWRoleKick:MWRoleKick has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWRoleKick_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWRoleKick)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWRoleKick",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWRoleKick* self = (MWRoleKick*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWRoleKick(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWRoleKick");
    tolua_cclass(tolua_S,"MWRoleKick","MWRoleKick","CServerPacket",lua_worldserver_MWRoleKick_finalize);

    tolua_beginmodule(tolua_S,"MWRoleKick");
        tolua_function(tolua_S,"new",lua_worldserver_MWRoleKick_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWRoleKick_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWRoleKick).name();
    g_luaType[typeName] = "MWRoleKick";
    g_typeCast["MWRoleKick"] = "MWRoleKick";
    return 1;
}

int lua_worldserver_WMUpdateUserData_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMUpdateUserData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMUpdateUserData",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMUpdateUserData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMUpdateUserData_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMUpdateUserData:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMUpdateUserData_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMUpdateUserData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMUpdateUserData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMUpdateUserData();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMUpdateUserData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMUpdateUserData:WMUpdateUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMUpdateUserData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMUpdateUserData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMUpdateUserData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMUpdateUserData* self = (WMUpdateUserData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMUpdateUserData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMUpdateUserData");
    tolua_cclass(tolua_S,"WMUpdateUserData","WMUpdateUserData","CServerPacket",lua_worldserver_WMUpdateUserData_finalize);

    tolua_beginmodule(tolua_S,"WMUpdateUserData");
        tolua_function(tolua_S,"new",lua_worldserver_WMUpdateUserData_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMUpdateUserData_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMUpdateUserData).name();
    g_luaType[typeName] = "WMUpdateUserData";
    g_typeCast["WMUpdateUserData"] = "WMUpdateUserData";
    return 1;
}

int lua_worldserver_MWUpdateRoleData_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWUpdateRoleData* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWUpdateRoleData",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWUpdateRoleData*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWUpdateRoleData_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWUpdateRoleData:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWUpdateRoleData_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWUpdateRoleData_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWUpdateRoleData* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWUpdateRoleData();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWUpdateRoleData");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWUpdateRoleData:MWUpdateRoleData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWUpdateRoleData_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWUpdateRoleData)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWUpdateRoleData",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWUpdateRoleData* self = (MWUpdateRoleData*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWUpdateRoleData(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWUpdateRoleData");
    tolua_cclass(tolua_S,"MWUpdateRoleData","MWUpdateRoleData","CServerPacket",lua_worldserver_MWUpdateRoleData_finalize);

    tolua_beginmodule(tolua_S,"MWUpdateRoleData");
        tolua_function(tolua_S,"new",lua_worldserver_MWUpdateRoleData_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWUpdateRoleData_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWUpdateRoleData).name();
    g_luaType[typeName] = "MWUpdateRoleData";
    g_typeCast["MWUpdateRoleData"] = "MWUpdateRoleData";
    return 1;
}

int lua_worldserver_MWRandRoleName_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWRandRoleName* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRandRoleName",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRandRoleName*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRandRoleName_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWRandRoleName:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRandRoleName_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRandRoleName_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWRandRoleName* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWRandRoleName();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWRandRoleName");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWRandRoleName:MWRandRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWRandRoleName_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWRandRoleName)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWRandRoleName",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWRandRoleName* self = (MWRandRoleName*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWRandRoleName(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWRandRoleName");
    tolua_cclass(tolua_S,"MWRandRoleName","MWRandRoleName","CRequestPacket",lua_worldserver_MWRandRoleName_finalize);

    tolua_beginmodule(tolua_S,"MWRandRoleName");
        tolua_function(tolua_S,"new",lua_worldserver_MWRandRoleName_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWRandRoleName_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWRandRoleName).name();
    g_luaType[typeName] = "MWRandRoleName";
    g_typeCast["MWRandRoleName"] = "MWRandRoleName";
    return 1;
}

int lua_worldserver_WMRandRoleNameRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMRandRoleNameRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMRandRoleNameRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMRandRoleNameRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMRandRoleNameRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMRandRoleNameRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMRandRoleNameRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMRandRoleNameRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMRandRoleNameRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMRandRoleNameRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMRandRoleNameRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMRandRoleNameRet:WMRandRoleNameRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMRandRoleNameRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMRandRoleNameRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMRandRoleNameRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMRandRoleNameRet* self = (WMRandRoleNameRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMRandRoleNameRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMRandRoleNameRet");
    tolua_cclass(tolua_S,"WMRandRoleNameRet","WMRandRoleNameRet","CResponsePacket",lua_worldserver_WMRandRoleNameRet_finalize);

    tolua_beginmodule(tolua_S,"WMRandRoleNameRet");
        tolua_function(tolua_S,"new",lua_worldserver_WMRandRoleNameRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMRandRoleNameRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMRandRoleNameRet).name();
    g_luaType[typeName] = "WMRandRoleNameRet";
    g_typeCast["WMRandRoleNameRet"] = "WMRandRoleNameRet";
    return 1;
}

int lua_worldserver_MWRenameRoleName_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWRenameRoleName* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRenameRoleName",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRenameRoleName*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRenameRoleName_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWRenameRoleName:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRenameRoleName_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRenameRoleName_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWRenameRoleName* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWRenameRoleName();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWRenameRoleName");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWRenameRoleName:MWRenameRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWRenameRoleName_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWRenameRoleName)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWRenameRoleName",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWRenameRoleName* self = (MWRenameRoleName*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWRenameRoleName(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWRenameRoleName");
    tolua_cclass(tolua_S,"MWRenameRoleName","MWRenameRoleName","CRequestPacket",lua_worldserver_MWRenameRoleName_finalize);

    tolua_beginmodule(tolua_S,"MWRenameRoleName");
        tolua_function(tolua_S,"new",lua_worldserver_MWRenameRoleName_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWRenameRoleName_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWRenameRoleName).name();
    g_luaType[typeName] = "MWRenameRoleName";
    g_typeCast["MWRenameRoleName"] = "MWRenameRoleName";
    return 1;
}

int lua_worldserver_WMRenameRoleNameRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMRenameRoleNameRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMRenameRoleNameRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMRenameRoleNameRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMRenameRoleNameRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMRenameRoleNameRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMRenameRoleNameRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMRenameRoleNameRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMRenameRoleNameRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMRenameRoleNameRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMRenameRoleNameRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMRenameRoleNameRet:WMRenameRoleNameRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMRenameRoleNameRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMRenameRoleNameRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMRenameRoleNameRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMRenameRoleNameRet* self = (WMRenameRoleNameRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMRenameRoleNameRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMRenameRoleNameRet");
    tolua_cclass(tolua_S,"WMRenameRoleNameRet","WMRenameRoleNameRet","CResponsePacket",lua_worldserver_WMRenameRoleNameRet_finalize);

    tolua_beginmodule(tolua_S,"WMRenameRoleNameRet");
        tolua_function(tolua_S,"new",lua_worldserver_WMRenameRoleNameRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMRenameRoleNameRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMRenameRoleNameRet).name();
    g_luaType[typeName] = "WMRenameRoleNameRet";
    g_typeCast["WMRenameRoleNameRet"] = "WMRenameRoleNameRet";
    return 1;
}

int lua_worldserver_MWGetRandNameList_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWGetRandNameList* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWGetRandNameList",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWGetRandNameList*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWGetRandNameList_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWGetRandNameList:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWGetRandNameList_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWGetRandNameList_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWGetRandNameList* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWGetRandNameList();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWGetRandNameList");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWGetRandNameList:MWGetRandNameList has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWGetRandNameList_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWGetRandNameList)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWGetRandNameList",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWGetRandNameList* self = (MWGetRandNameList*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWGetRandNameList(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWGetRandNameList");
    tolua_cclass(tolua_S,"MWGetRandNameList","MWGetRandNameList","CRequestPacket",lua_worldserver_MWGetRandNameList_finalize);

    tolua_beginmodule(tolua_S,"MWGetRandNameList");
        tolua_function(tolua_S,"new",lua_worldserver_MWGetRandNameList_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWGetRandNameList_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWGetRandNameList).name();
    g_luaType[typeName] = "MWGetRandNameList";
    g_typeCast["MWGetRandNameList"] = "MWGetRandNameList";
    return 1;
}

int lua_worldserver_WMGetRandNameListRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMGetRandNameListRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMGetRandNameListRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMGetRandNameListRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMGetRandNameListRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMGetRandNameListRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMGetRandNameListRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMGetRandNameListRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMGetRandNameListRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMGetRandNameListRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMGetRandNameListRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMGetRandNameListRet:WMGetRandNameListRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMGetRandNameListRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMGetRandNameListRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMGetRandNameListRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMGetRandNameListRet* self = (WMGetRandNameListRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMGetRandNameListRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMGetRandNameListRet");
    tolua_cclass(tolua_S,"WMGetRandNameListRet","WMGetRandNameListRet","CResponsePacket",lua_worldserver_WMGetRandNameListRet_finalize);

    tolua_beginmodule(tolua_S,"WMGetRandNameListRet");
        tolua_function(tolua_S,"new",lua_worldserver_WMGetRandNameListRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMGetRandNameListRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMGetRandNameListRet).name();
    g_luaType[typeName] = "WMGetRandNameListRet";
    g_typeCast["WMGetRandNameListRet"] = "WMGetRandNameListRet";
    return 1;
}

int lua_worldserver_WMRecharge_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMRecharge* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMRecharge",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMRecharge*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMRecharge_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMRecharge:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMRecharge_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMRecharge_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMRecharge* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMRecharge();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMRecharge");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMRecharge:WMRecharge has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMRecharge_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMRecharge)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMRecharge",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMRecharge* self = (WMRecharge*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMRecharge(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMRecharge");
    tolua_cclass(tolua_S,"WMRecharge","WMRecharge","CRequestPacket",lua_worldserver_WMRecharge_finalize);

    tolua_beginmodule(tolua_S,"WMRecharge");
        tolua_function(tolua_S,"new",lua_worldserver_WMRecharge_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMRecharge_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMRecharge).name();
    g_luaType[typeName] = "WMRecharge";
    g_typeCast["WMRecharge"] = "WMRecharge";
    return 1;
}

int lua_worldserver_MWRechargeRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWRechargeRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWRechargeRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWRechargeRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWRechargeRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWRechargeRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWRechargeRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWRechargeRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWRechargeRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWRechargeRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWRechargeRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWRechargeRet:MWRechargeRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWRechargeRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWRechargeRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWRechargeRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWRechargeRet* self = (MWRechargeRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWRechargeRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWRechargeRet");
    tolua_cclass(tolua_S,"MWRechargeRet","MWRechargeRet","CResponsePacket",lua_worldserver_MWRechargeRet_finalize);

    tolua_beginmodule(tolua_S,"MWRechargeRet");
        tolua_function(tolua_S,"new",lua_worldserver_MWRechargeRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWRechargeRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWRechargeRet).name();
    g_luaType[typeName] = "MWRechargeRet";
    g_typeCast["MWRechargeRet"] = "MWRechargeRet";
    return 1;
}

int lua_worldserver_WMServerInfo_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMServerInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMServerInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMServerInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMServerInfo_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMServerInfo:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMServerInfo_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMServerInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMServerInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMServerInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMServerInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMServerInfo:WMServerInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMServerInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMServerInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMServerInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMServerInfo* self = (WMServerInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMServerInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMServerInfo");
    tolua_cclass(tolua_S,"WMServerInfo","WMServerInfo","CServerPacket",lua_worldserver_WMServerInfo_finalize);

    tolua_beginmodule(tolua_S,"WMServerInfo");
        tolua_function(tolua_S,"new",lua_worldserver_WMServerInfo_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMServerInfo_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMServerInfo).name();
    g_luaType[typeName] = "WMServerInfo";
    g_typeCast["WMServerInfo"] = "WMServerInfo";
    return 1;
}

int lua_worldserver_WMAwardBindRmb_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMAwardBindRmb* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMAwardBindRmb",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMAwardBindRmb*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMAwardBindRmb_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMAwardBindRmb:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMAwardBindRmb_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMAwardBindRmb_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMAwardBindRmb* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMAwardBindRmb();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMAwardBindRmb");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMAwardBindRmb:WMAwardBindRmb has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMAwardBindRmb_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMAwardBindRmb)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMAwardBindRmb",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMAwardBindRmb* self = (WMAwardBindRmb*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMAwardBindRmb(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMAwardBindRmb");
    tolua_cclass(tolua_S,"WMAwardBindRmb","WMAwardBindRmb","CServerPacket",lua_worldserver_WMAwardBindRmb_finalize);

    tolua_beginmodule(tolua_S,"WMAwardBindRmb");
        tolua_function(tolua_S,"new",lua_worldserver_WMAwardBindRmb_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMAwardBindRmb_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMAwardBindRmb).name();
    g_luaType[typeName] = "WMAwardBindRmb";
    g_typeCast["WMAwardBindRmb"] = "WMAwardBindRmb";
    return 1;
}

int lua_worldserver_MWAnnoucement_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWAnnoucement* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWAnnoucement",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWAnnoucement*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWAnnoucement_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWAnnoucement:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWAnnoucement_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWAnnoucement_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"MWAnnoucement",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        MWAnnoucement::Setup();
        return 0;
    }
    gxError("MWAnnoucement:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWAnnoucement_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_MWAnnoucement_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"MWAnnoucement",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        MWAnnoucement::Unsetup();
        return 0;
    }
    gxError("MWAnnoucement:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWAnnoucement_Unsetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_MWAnnoucement_Unpacket(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"MWAnnoucement",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        MWAnnoucement* arg0;
        const char* arg1;
        int arg2;
        ok &= luaval_to_object<MWAnnoucement>(tolua_S, 2, "MWAnnoucement", &arg0, "MWAnnoucement:Unpacket");
        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "MWAnnoucement:Unpacket"); arg1 = (char*)arg1_tmp.buffer;
        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "MWAnnoucement:Unpacket");
        if(!ok)
            return 0;
        bool ret = MWAnnoucement::Unpacket(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("MWAnnoucement:Unpacket has wrong number of arguments: {0}, was expecting {1}\n ", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWAnnoucement_Unpacket'.", &tolua_err);
    return 0;
}
int lua_worldserver_MWAnnoucement_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWAnnoucement* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWAnnoucement();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWAnnoucement");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWAnnoucement:MWAnnoucement has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWAnnoucement_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWAnnoucement)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWAnnoucement",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWAnnoucement* self = (MWAnnoucement*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWAnnoucement(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWAnnoucement");
    tolua_cclass(tolua_S,"MWAnnoucement","MWAnnoucement","CServerPacket",lua_worldserver_MWAnnoucement_finalize);

    tolua_beginmodule(tolua_S,"MWAnnoucement");
        tolua_function(tolua_S,"new",lua_worldserver_MWAnnoucement_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWAnnoucement_getPackLen);
        tolua_function(tolua_S,"Setup", lua_worldserver_MWAnnoucement_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_MWAnnoucement_Unsetup);
        tolua_function(tolua_S,"Unpacket", lua_worldserver_MWAnnoucement_Unpacket);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWAnnoucement).name();
    g_luaType[typeName] = "MWAnnoucement";
    g_typeCast["MWAnnoucement"] = "MWAnnoucement";
    return 1;
}

int lua_worldserver_CWMLimitAccountInfo_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWMLimitAccountInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWMLimitAccountInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWMLimitAccountInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWMLimitAccountInfo_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWMLimitAccountInfo:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWMLimitAccountInfo_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWMLimitAccountInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWMLimitAccountInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWMLimitAccountInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWMLimitAccountInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWMLimitAccountInfo:CWMLimitAccountInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWMLimitAccountInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWMLimitAccountInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWMLimitAccountInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWMLimitAccountInfo* self = (CWMLimitAccountInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWMLimitAccountInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWMLimitAccountInfo");
    tolua_cclass(tolua_S,"CWMLimitAccountInfo","CWMLimitAccountInfo","CServerPacket",lua_worldserver_CWMLimitAccountInfo_finalize);

    tolua_beginmodule(tolua_S,"CWMLimitAccountInfo");
        tolua_function(tolua_S,"new",lua_worldserver_CWMLimitAccountInfo_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWMLimitAccountInfo_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWMLimitAccountInfo).name();
    g_luaType[typeName] = "CWMLimitAccountInfo";
    g_typeCast["CWMLimitAccountInfo"] = "CWMLimitAccountInfo";
    return 1;
}

int lua_worldserver_CWMLimitChatInfo_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWMLimitChatInfo* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWMLimitChatInfo",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWMLimitChatInfo*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWMLimitChatInfo_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWMLimitChatInfo:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWMLimitChatInfo_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWMLimitChatInfo_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWMLimitChatInfo* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWMLimitChatInfo();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWMLimitChatInfo");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWMLimitChatInfo:CWMLimitChatInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWMLimitChatInfo_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWMLimitChatInfo)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWMLimitChatInfo",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWMLimitChatInfo* self = (CWMLimitChatInfo*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWMLimitChatInfo(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWMLimitChatInfo");
    tolua_cclass(tolua_S,"CWMLimitChatInfo","CWMLimitChatInfo","CServerPacket",lua_worldserver_CWMLimitChatInfo_finalize);

    tolua_beginmodule(tolua_S,"CWMLimitChatInfo");
        tolua_function(tolua_S,"new",lua_worldserver_CWMLimitChatInfo_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWMLimitChatInfo_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWMLimitChatInfo).name();
    g_luaType[typeName] = "CWMLimitChatInfo";
    g_typeCast["CWMLimitChatInfo"] = "CWMLimitChatInfo";
    return 1;
}

int lua_worldserver_CMWLimitInfoReq_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CMWLimitInfoReq* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CMWLimitInfoReq",0,&tolua_err)) goto tolua_lerror;
    cobj = (CMWLimitInfoReq*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CMWLimitInfoReq_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CMWLimitInfoReq:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CMWLimitInfoReq_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CMWLimitInfoReq_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CMWLimitInfoReq* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CMWLimitInfoReq();
        tolua_pushusertype(tolua_S,(void*)cobj,"CMWLimitInfoReq");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CMWLimitInfoReq:CMWLimitInfoReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CMWLimitInfoReq_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CMWLimitInfoReq)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CMWLimitInfoReq",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CMWLimitInfoReq* self = (CMWLimitInfoReq*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CMWLimitInfoReq(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CMWLimitInfoReq");
    tolua_cclass(tolua_S,"CMWLimitInfoReq","CMWLimitInfoReq","CServerPacket",lua_worldserver_CMWLimitInfoReq_finalize);

    tolua_beginmodule(tolua_S,"CMWLimitInfoReq");
        tolua_function(tolua_S,"new",lua_worldserver_CMWLimitInfoReq_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CMWLimitInfoReq_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CMWLimitInfoReq).name();
    g_luaType[typeName] = "CMWLimitInfoReq";
    g_typeCast["CMWLimitInfoReq"] = "CMWLimitInfoReq";
    return 1;
}

int lua_worldserver_MWExchangeGiftReq_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    MWExchangeGiftReq* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"MWExchangeGiftReq",0,&tolua_err)) goto tolua_lerror;
    cobj = (MWExchangeGiftReq*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_MWExchangeGiftReq_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("MWExchangeGiftReq:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_MWExchangeGiftReq_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_MWExchangeGiftReq_constructor(lua_State* tolua_S)
{
    int argc = 0;
    MWExchangeGiftReq* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new MWExchangeGiftReq();
        tolua_pushusertype(tolua_S,(void*)cobj,"MWExchangeGiftReq");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("MWExchangeGiftReq:MWExchangeGiftReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_MWExchangeGiftReq_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (MWExchangeGiftReq)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"MWExchangeGiftReq",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        MWExchangeGiftReq* self = (MWExchangeGiftReq*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_MWExchangeGiftReq(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"MWExchangeGiftReq");
    tolua_cclass(tolua_S,"MWExchangeGiftReq","MWExchangeGiftReq","CRequestPacket",lua_worldserver_MWExchangeGiftReq_finalize);

    tolua_beginmodule(tolua_S,"MWExchangeGiftReq");
        tolua_function(tolua_S,"new",lua_worldserver_MWExchangeGiftReq_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_MWExchangeGiftReq_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(MWExchangeGiftReq).name();
    g_luaType[typeName] = "MWExchangeGiftReq";
    g_typeCast["MWExchangeGiftReq"] = "MWExchangeGiftReq";
    return 1;
}

int lua_worldserver_WMExchangeGiftRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WMExchangeGiftRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WMExchangeGiftRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WMExchangeGiftRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WMExchangeGiftRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WMExchangeGiftRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WMExchangeGiftRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WMExchangeGiftRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WMExchangeGiftRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WMExchangeGiftRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WMExchangeGiftRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WMExchangeGiftRet:WMExchangeGiftRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WMExchangeGiftRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WMExchangeGiftRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WMExchangeGiftRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WMExchangeGiftRet* self = (WMExchangeGiftRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WMExchangeGiftRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WMExchangeGiftRet");
    tolua_cclass(tolua_S,"WMExchangeGiftRet","WMExchangeGiftRet","CResponsePacket",lua_worldserver_WMExchangeGiftRet_finalize);

    tolua_beginmodule(tolua_S,"WMExchangeGiftRet");
        tolua_function(tolua_S,"new",lua_worldserver_WMExchangeGiftRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WMExchangeGiftRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WMExchangeGiftRet).name();
    g_luaType[typeName] = "WMExchangeGiftRet";
    g_typeCast["WMExchangeGiftRet"] = "WMExchangeGiftRet";
    return 1;
}

int lua_worldserver_CWorldMapServerHandlerBase_genStrName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapServerHandlerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapServerHandlerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapServerHandlerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapServerHandlerBase_genStrName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->genStrName();
        return 0;
    }

    gxError("CWorldMapServerHandlerBase:genStrName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapServerHandlerBase_genStrName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapServerHandlerBase_quit(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapServerHandlerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapServerHandlerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapServerHandlerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapServerHandlerBase_quit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->quit();
        return 0;
    }

    gxError("CWorldMapServerHandlerBase:quit has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapServerHandlerBase_quit'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapServerHandlerBase_getServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapServerHandlerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapServerHandlerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapServerHandlerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapServerHandlerBase_getServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getServerID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldMapServerHandlerBase:getServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapServerHandlerBase_getServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapServerHandlerBase_toString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapServerHandlerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapServerHandlerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapServerHandlerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapServerHandlerBase_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldMapServerHandlerBase:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapServerHandlerBase_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapServerHandlerBase_setServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapServerHandlerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapServerHandlerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapServerHandlerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapServerHandlerBase_setServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldMapServerHandlerBase:setServerID");
        if(!ok)
            return 0;
        cobj->setServerID(arg0);
        return 0;
    }

    gxError("CWorldMapServerHandlerBase:setServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapServerHandlerBase_setServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapServerHandlerBase_getWorldMapPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapServerHandlerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapServerHandlerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapServerHandlerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapServerHandlerBase_getWorldMapPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldMapPlayer* ret = cobj->getWorldMapPlayer();
        object_to_luaval<CWorldMapPlayer>(tolua_S, "CWorldMapPlayer",(CWorldMapPlayer*)ret);
        return 1;
    }

    gxError("CWorldMapServerHandlerBase:getWorldMapPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapServerHandlerBase_getWorldMapPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapServerHandlerBase_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapServerHandlerBase* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldMapServerHandlerBase();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldMapServerHandlerBase");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldMapServerHandlerBase:CWorldMapServerHandlerBase has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldMapServerHandlerBase_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldMapServerHandlerBase)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldMapServerHandlerBase",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldMapServerHandlerBase* self = (CWorldMapServerHandlerBase*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldMapServerHandlerBase(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldMapServerHandlerBase");
    tolua_cclass(tolua_S,"CWorldMapServerHandlerBase","CWorldMapServerHandlerBase","CGameSocketHandler<CWorldMapServerHandlerBase>",lua_worldserver_CWorldMapServerHandlerBase_finalize);

    tolua_beginmodule(tolua_S,"CWorldMapServerHandlerBase");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldMapServerHandlerBase_constructor);
        tolua_function(tolua_S,"genStrName",lua_worldserver_CWorldMapServerHandlerBase_genStrName);
        tolua_function(tolua_S,"quit",lua_worldserver_CWorldMapServerHandlerBase_quit);
        tolua_function(tolua_S,"getServerID",lua_worldserver_CWorldMapServerHandlerBase_getServerID);
        tolua_function(tolua_S,"toString",lua_worldserver_CWorldMapServerHandlerBase_toString);
        tolua_function(tolua_S,"setServerID",lua_worldserver_CWorldMapServerHandlerBase_setServerID);
        tolua_function(tolua_S,"getWorldMapPlayer",lua_worldserver_CWorldMapServerHandlerBase_getWorldMapPlayer);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldMapServerHandlerBase).name();
    g_luaType[typeName] = "CWorldMapServerHandlerBase";
    g_typeCast["CWorldMapServerHandlerBase"] = "CWorldMapServerHandlerBase";
    return 1;
}

int lua_worldserver_CWorldMapServerHandler_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldMapServerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldMapServerHandler::Setup();
        return 0;
    }
    gxError("CWorldMapServerHandler:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapServerHandler_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldMapServerHandler_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldMapServerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldMapServerHandler::Unsetup();
        return 0;
    }
    gxError("CWorldMapServerHandler:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapServerHandler_Unsetup'.", &tolua_err);
    return 0;
}
static int lua_worldserver_CWorldMapServerHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldMapServerHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldMapServerHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldMapServerHandler* self = (CWorldMapServerHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldMapServerHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldMapServerHandler");
    tolua_cclass(tolua_S,"CWorldMapServerHandler","CWorldMapServerHandler","CWorldMapServerHandlerBase",nullptr);

    tolua_beginmodule(tolua_S,"CWorldMapServerHandler");
        tolua_function(tolua_S,"Setup", lua_worldserver_CWorldMapServerHandler_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_CWorldMapServerHandler_Unsetup);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldMapServerHandler).name();
    g_luaType[typeName] = "CWorldMapServerHandler";
    g_typeCast["CWorldMapServerHandler"] = "CWorldMapServerHandler";
    return 1;
}

int lua_worldserver_CWorldMapPlayer_keyToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_keyToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->keyToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldMapPlayer:keyToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_keyToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_setClientListenPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_setClientListenPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldMapPlayer:setClientListenPort");
        if(!ok)
            return 0;
        cobj->setClientListenPort(arg0);
        return 0;
    }

    gxError("CWorldMapPlayer:setClientListenPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_setClientListenPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_isNormalServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_isNormalServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isNormalServer();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:isNormalServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_isNormalServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getServerType(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getServerType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->getServerType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getServerType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getServerType'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_canEnter(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_canEnter'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->canEnter();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:canEnter has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_canEnter'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getClientListenIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getClientListenIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->getClientListenIP();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getClientListenIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getClientListenIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_setRoleSceneID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_setRoleSceneID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned long long arg0;
        unsigned long long arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldMapPlayer:setRoleSceneID");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldMapPlayer:setRoleSceneID");
        if(!ok)
            return 0;
        cobj->setRoleSceneID(arg0, arg1);
        return 0;
    }

    gxError("CWorldMapPlayer:setRoleSceneID has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_setRoleSceneID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getServerID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_send(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_send'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        const char* arg0;
        unsigned int arg1;

        CScriptString arg0_tmp; ok &= luaval_to_script_string(tolua_S, 2, &arg0_tmp, "CWorldMapPlayer:send"); arg0 = (char*)arg0_tmp.buffer;

        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CWorldMapPlayer:send");
        if(!ok)
            return 0;
        cobj->send(arg0, arg1);
        return 0;
    }

    gxError("CWorldMapPlayer:send has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_send'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_setKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_setKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldMapPlayer:setKey");
        if(!ok)
            return 0;
        cobj->setKey(arg0);
        return 0;
    }

    gxError("CWorldMapPlayer:setKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_setKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_setServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_setServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldMapPlayer:setServerID");
        if(!ok)
            return 0;
        cobj->setServerID(arg0);
        return 0;
    }

    gxError("CWorldMapPlayer:setServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_setServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_setSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_setSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldMapPlayer:setSocketIndex");
        if(!ok)
            return 0;
        cobj->setSocketIndex(arg0);
        return 0;
    }

    gxError("CWorldMapPlayer:setSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_setSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_isHalfNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_isHalfNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isHalfNum();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:isHalfNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_isHalfNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_sendUnloadRoleData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_sendUnloadRoleData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->sendUnloadRoleData();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:sendUnloadRoleData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_sendUnloadRoleData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_isMaxNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_isMaxNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isMaxNum();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:isMaxNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_isMaxNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getClientListenPort(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getClientListenPort'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getClientListenPort();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getClientListenPort has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getClientListenPort'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_setServerType(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_setServerType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        EServerType arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldMapPlayer:setServerType");
        if(!ok)
            return 0;
        cobj->setServerType(arg0);
        return 0;
    }

    gxError("CWorldMapPlayer:setServerType has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_setServerType'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getSocketIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_setClientListenIP(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_setClientListenIP'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CWorldMapPlayer:setClientListenIP");
        if(!ok)
            return 0;
        cobj->setClientListenIP(arg0);
        return 0;
    }

    gxError("CWorldMapPlayer:setClientListenIP has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_setClientListenIP'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_isDynamicServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_isDynamicServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isDynamicServer();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:isDynamicServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_isDynamicServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_isKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_isKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:isKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_isKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getMapServerHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getMapServerHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldMapServerHandler* ret = cobj->getMapServerHandler();
        object_to_luaval<CWorldMapServerHandler>(tolua_S, "CWorldMapServerHandler",(CWorldMapServerHandler*)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getMapServerHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getMapServerHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getKey();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_leave(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_leave'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CWorldPlayer* arg0;

        ok &= luaval_to_object<CWorldPlayer>(tolua_S, 2, "CWorldPlayer", &arg0, "CWorldMapPlayer:leave");
        if(!ok)
            return 0;
        cobj->leave(arg0);
        return 0;
    }

    gxError("CWorldMapPlayer:leave has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_leave'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_updateData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_updateData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        MapServerUpdate* arg0;

        ok &= luaval_to_object<MapServerUpdate>(tolua_S, 2, "MapServerUpdate", &arg0, "CWorldMapPlayer:updateData");
        if(!ok)
            return 0;
        cobj->updateData(arg0);
        return 0;
    }

    gxError("CWorldMapPlayer:updateData has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_updateData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getRoleSceneID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getRoleSceneID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldMapPlayer:getRoleSceneID");
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getRoleSceneID(arg0);
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getRoleSceneID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getRoleSceneID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_getRoleNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_getRoleNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getRoleNum();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:getRoleNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_getRoleNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_enter(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayer_enter'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        CScene* arg0;
        unsigned long long arg1;
        CWorldPlayer* arg2;

        ok &= luaval_to_object<CScene>(tolua_S, 2, "CScene", &arg0, "CWorldMapPlayer:enter");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldMapPlayer:enter");

        ok &= luaval_to_object<CWorldPlayer>(tolua_S, 4, "CWorldPlayer", &arg2, "CWorldMapPlayer:enter");
        if(!ok)
            return 0;
        bool ret = cobj->enter(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayer:enter has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayer_enter'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayer* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldMapPlayer();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldMapPlayer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldMapPlayer:CWorldMapPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldMapPlayer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldMapPlayer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldMapPlayer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldMapPlayer* self = (CWorldMapPlayer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldMapPlayer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldMapPlayer");
    tolua_cclass(tolua_S,"CWorldMapPlayer","CWorldMapPlayer","",lua_worldserver_CWorldMapPlayer_finalize);

    tolua_beginmodule(tolua_S,"CWorldMapPlayer");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldMapPlayer_constructor);
        tolua_function(tolua_S,"keyToString",lua_worldserver_CWorldMapPlayer_keyToString);
        tolua_function(tolua_S,"setClientListenPort",lua_worldserver_CWorldMapPlayer_setClientListenPort);
        tolua_function(tolua_S,"isNormalServer",lua_worldserver_CWorldMapPlayer_isNormalServer);
        tolua_function(tolua_S,"getServerType",lua_worldserver_CWorldMapPlayer_getServerType);
        tolua_function(tolua_S,"canEnter",lua_worldserver_CWorldMapPlayer_canEnter);
        tolua_function(tolua_S,"getClientListenIP",lua_worldserver_CWorldMapPlayer_getClientListenIP);
        tolua_function(tolua_S,"setRoleSceneID",lua_worldserver_CWorldMapPlayer_setRoleSceneID);
        tolua_function(tolua_S,"getServerID",lua_worldserver_CWorldMapPlayer_getServerID);
        tolua_function(tolua_S,"send",lua_worldserver_CWorldMapPlayer_send);
        tolua_function(tolua_S,"setKey",lua_worldserver_CWorldMapPlayer_setKey);
        tolua_function(tolua_S,"setServerID",lua_worldserver_CWorldMapPlayer_setServerID);
        tolua_function(tolua_S,"setSocketIndex",lua_worldserver_CWorldMapPlayer_setSocketIndex);
        tolua_function(tolua_S,"isHalfNum",lua_worldserver_CWorldMapPlayer_isHalfNum);
        tolua_function(tolua_S,"sendUnloadRoleData",lua_worldserver_CWorldMapPlayer_sendUnloadRoleData);
        tolua_function(tolua_S,"isMaxNum",lua_worldserver_CWorldMapPlayer_isMaxNum);
        tolua_function(tolua_S,"getClientListenPort",lua_worldserver_CWorldMapPlayer_getClientListenPort);
        tolua_function(tolua_S,"setServerType",lua_worldserver_CWorldMapPlayer_setServerType);
        tolua_function(tolua_S,"getSocketIndex",lua_worldserver_CWorldMapPlayer_getSocketIndex);
        tolua_function(tolua_S,"setClientListenIP",lua_worldserver_CWorldMapPlayer_setClientListenIP);
        tolua_function(tolua_S,"isDynamicServer",lua_worldserver_CWorldMapPlayer_isDynamicServer);
        tolua_function(tolua_S,"isKey",lua_worldserver_CWorldMapPlayer_isKey);
        tolua_function(tolua_S,"getMapServerHandler",lua_worldserver_CWorldMapPlayer_getMapServerHandler);
        tolua_function(tolua_S,"getKey",lua_worldserver_CWorldMapPlayer_getKey);
        tolua_function(tolua_S,"leave",lua_worldserver_CWorldMapPlayer_leave);
        tolua_function(tolua_S,"updateData",lua_worldserver_CWorldMapPlayer_updateData);
        tolua_function(tolua_S,"getRoleSceneID",lua_worldserver_CWorldMapPlayer_getRoleSceneID);
        tolua_function(tolua_S,"getRoleNum",lua_worldserver_CWorldMapPlayer_getRoleNum);
        tolua_function(tolua_S,"enter",lua_worldserver_CWorldMapPlayer_enter);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldMapPlayer).name();
    g_luaType[typeName] = "CWorldMapPlayer";
    g_typeCast["CWorldMapPlayer"] = "CWorldMapPlayer";
    return 1;
}

int lua_worldserver_CWorldMapPlayerMgr_getNext(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_getNext'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldMapPlayer* ret = cobj->getNext();
        object_to_luaval<CWorldMapPlayer>(tolua_S, "CWorldMapPlayer",(CWorldMapPlayer*)ret);
        return 1;
    }

    gxError("CWorldMapPlayerMgr:getNext has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_getNext'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_updateServerInfo(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_updateServerInfo'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->updateServerInfo();
        return 0;
    }

    gxError("CWorldMapPlayerMgr:updateServerInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_updateServerInfo'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_getBegin(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_getBegin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldMapPlayer* ret = cobj->getBegin();
        object_to_luaval<CWorldMapPlayer>(tolua_S, "CWorldMapPlayer",(CWorldMapPlayer*)ret);
        return 1;
    }

    gxError("CWorldMapPlayerMgr:getBegin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_getBegin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_delMapPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_delMapPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldMapPlayerMgr:delMapPlayer");
        if(!ok)
            return 0;
        cobj->delMapPlayer(arg0);
        return 0;
    }

    gxError("CWorldMapPlayerMgr:delMapPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_delMapPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_getLeastNormalMapServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_getLeastNormalMapServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldMapPlayer* ret = cobj->getLeastNormalMapServer();
        object_to_luaval<CWorldMapPlayer>(tolua_S, "CWorldMapPlayer",(CWorldMapPlayer*)ret);
        return 1;
    }

    gxError("CWorldMapPlayerMgr:getLeastNormalMapServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_getLeastNormalMapServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_update(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldMapPlayerMgr:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CWorldMapPlayerMgr:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_getLeastDynamicServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_getLeastDynamicServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldMapPlayer* ret = cobj->getLeastDynamicServer();
        object_to_luaval<CWorldMapPlayer>(tolua_S, "CWorldMapPlayer",(CWorldMapPlayer*)ret);
        return 1;
    }

    gxError("CWorldMapPlayerMgr:getLeastDynamicServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_getLeastDynamicServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_init(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_init'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldMapPlayerMgr:init");
        if(!ok)
            return 0;
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldMapPlayerMgr:init has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_init'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_findMapPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_findMapPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldMapPlayerMgr:findMapPlayer");
        if(!ok)
            return 0;
        CWorldMapPlayer* ret = cobj->findMapPlayer(arg0);
        object_to_luaval<CWorldMapPlayer>(tolua_S, "CWorldMapPlayer",(CWorldMapPlayer*)ret);
        return 1;
    }

    gxError("CWorldMapPlayerMgr:findMapPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_findMapPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_addMapPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldMapPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldMapPlayerMgr_addMapPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldMapPlayerMgr:addMapPlayer");
        if(!ok)
            return 0;
        CWorldMapPlayer* ret = cobj->addMapPlayer(arg0);
        object_to_luaval<CWorldMapPlayer>(tolua_S, "CWorldMapPlayer",(CWorldMapPlayer*)ret);
        return 1;
    }

    gxError("CWorldMapPlayerMgr:addMapPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_addMapPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldMapPlayerMgr* ret = CWorldMapPlayerMgr::GetPtr();
        object_to_luaval<CWorldMapPlayerMgr>(tolua_S, "CWorldMapPlayerMgr",(CWorldMapPlayerMgr*)ret);
        return 1;
    }
    gxError("CWorldMapPlayerMgr:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldMapPlayerMgr_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldMapPlayerMgr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldMapPlayerMgr* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldMapPlayerMgr();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldMapPlayerMgr");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldMapPlayerMgr:CWorldMapPlayerMgr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldMapPlayerMgr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldMapPlayerMgr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldMapPlayerMgr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldMapPlayerMgr* self = (CWorldMapPlayerMgr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldMapPlayerMgr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldMapPlayerMgr");
    tolua_cclass(tolua_S,"CWorldMapPlayerMgr","CWorldMapPlayerMgr","CHashMultiIndex<CWorldMapPlayer, false, 0>",lua_worldserver_CWorldMapPlayerMgr_finalize);

    tolua_beginmodule(tolua_S,"CWorldMapPlayerMgr");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldMapPlayerMgr_constructor);
        tolua_function(tolua_S,"getNext",lua_worldserver_CWorldMapPlayerMgr_getNext);
        tolua_function(tolua_S,"updateServerInfo",lua_worldserver_CWorldMapPlayerMgr_updateServerInfo);
        tolua_function(tolua_S,"getBegin",lua_worldserver_CWorldMapPlayerMgr_getBegin);
        tolua_function(tolua_S,"delMapPlayer",lua_worldserver_CWorldMapPlayerMgr_delMapPlayer);
        tolua_function(tolua_S,"getLeastNormalMapServer",lua_worldserver_CWorldMapPlayerMgr_getLeastNormalMapServer);
        tolua_function(tolua_S,"update",lua_worldserver_CWorldMapPlayerMgr_update);
        tolua_function(tolua_S,"getLeastDynamicServer",lua_worldserver_CWorldMapPlayerMgr_getLeastDynamicServer);
        tolua_function(tolua_S,"init",lua_worldserver_CWorldMapPlayerMgr_init);
        tolua_function(tolua_S,"findMapPlayer",lua_worldserver_CWorldMapPlayerMgr_findMapPlayer);
        tolua_function(tolua_S,"addMapPlayer",lua_worldserver_CWorldMapPlayerMgr_addMapPlayer);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CWorldMapPlayerMgr_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldMapPlayerMgr).name();
    g_luaType[typeName] = "CWorldMapPlayerMgr";
    g_typeCast["CWorldMapPlayerMgr"] = "CWorldMapPlayerMgr";
    return 1;
}

int lua_worldserver_IPlayer_onAddToLogout(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onAddToLogout'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->onAddToLogout();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("IPlayer:onAddToLogout has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onAddToLogout'.",&tolua_err);
	return 0;
}
int lua_worldserver_IPlayer_onRemoveFromReady(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onRemoveFromReady'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onRemoveFromReady();
        return 0;
    }

    gxError("IPlayer:onRemoveFromReady has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onRemoveFromReady'.",&tolua_err);
	return 0;
}
int lua_worldserver_IPlayer_onRemoveFromEnter(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onRemoveFromEnter'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onRemoveFromEnter();
        return 0;
    }

    gxError("IPlayer:onRemoveFromEnter has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onRemoveFromEnter'.",&tolua_err);
	return 0;
}
int lua_worldserver_IPlayer_onAddToReady(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onAddToReady'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->onAddToReady();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("IPlayer:onAddToReady has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onAddToReady'.",&tolua_err);
	return 0;
}
int lua_worldserver_IPlayer_onAddToEnter(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onAddToEnter'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->onAddToEnter();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("IPlayer:onAddToEnter has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onAddToEnter'.",&tolua_err);
	return 0;
}
int lua_worldserver_IPlayer_onUpdateReadyQue(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onUpdateReadyQue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IPlayer:onUpdateReadyQue");
        if(!ok)
            return 0;
        cobj->onUpdateReadyQue(arg0);
        return 0;
    }

    gxError("IPlayer:onUpdateReadyQue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onUpdateReadyQue'.",&tolua_err);
	return 0;
}
int lua_worldserver_IPlayer_onUpdateEnterQue(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onUpdateEnterQue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IPlayer:onUpdateEnterQue");
        if(!ok)
            return 0;
        cobj->onUpdateEnterQue(arg0);
        return 0;
    }

    gxError("IPlayer:onUpdateEnterQue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onUpdateEnterQue'.",&tolua_err);
	return 0;
}
int lua_worldserver_IPlayer_onUpdateLogoutQue(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onUpdateLogoutQue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "IPlayer:onUpdateLogoutQue");
        if(!ok)
            return 0;
        cobj->onUpdateLogoutQue(arg0);
        return 0;
    }

    gxError("IPlayer:onUpdateLogoutQue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onUpdateLogoutQue'.",&tolua_err);
	return 0;
}
int lua_worldserver_IPlayer_onRemoveFromLogout(lua_State* tolua_S)
{
    int argc = 0;
    IPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (IPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_IPlayer_onRemoveFromLogout'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onRemoveFromLogout();
        return 0;
    }

    gxError("IPlayer:onRemoveFromLogout has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_IPlayer_onRemoveFromLogout'.",&tolua_err);
	return 0;
}
static int lua_worldserver_IPlayer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (IPlayer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"IPlayer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        IPlayer* self = (IPlayer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_IPlayer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"IPlayer");
    tolua_cclass(tolua_S,"IPlayer","IPlayer","",nullptr);

    tolua_beginmodule(tolua_S,"IPlayer");
        tolua_function(tolua_S,"onAddToLogout",lua_worldserver_IPlayer_onAddToLogout);
        tolua_function(tolua_S,"onRemoveFromReady",lua_worldserver_IPlayer_onRemoveFromReady);
        tolua_function(tolua_S,"onRemoveFromEnter",lua_worldserver_IPlayer_onRemoveFromEnter);
        tolua_function(tolua_S,"onAddToReady",lua_worldserver_IPlayer_onAddToReady);
        tolua_function(tolua_S,"onAddToEnter",lua_worldserver_IPlayer_onAddToEnter);
        tolua_function(tolua_S,"onUpdateReadyQue",lua_worldserver_IPlayer_onUpdateReadyQue);
        tolua_function(tolua_S,"onUpdateEnterQue",lua_worldserver_IPlayer_onUpdateEnterQue);
        tolua_function(tolua_S,"onUpdateLogoutQue",lua_worldserver_IPlayer_onUpdateLogoutQue);
        tolua_function(tolua_S,"onRemoveFromLogout",lua_worldserver_IPlayer_onRemoveFromLogout);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(IPlayer).name();
    g_luaType[typeName] = "IPlayer";
    g_typeCast["IPlayer"] = "IPlayer";
    return 1;
}

int lua_worldserver_CWVerifyConnect_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWVerifyConnect* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWVerifyConnect",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWVerifyConnect*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWVerifyConnect_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWVerifyConnect:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWVerifyConnect_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWVerifyConnect_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWVerifyConnect",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWVerifyConnect::Setup();
        return 0;
    }
    gxError("CWVerifyConnect:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWVerifyConnect_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWVerifyConnect_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWVerifyConnect",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWVerifyConnect::Unsetup();
        return 0;
    }
    gxError("CWVerifyConnect:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWVerifyConnect_Unsetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWVerifyConnect_Unpacket(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWVerifyConnect",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        CWVerifyConnect* arg0;
        const char* arg1;
        int arg2;
        ok &= luaval_to_object<CWVerifyConnect>(tolua_S, 2, "CWVerifyConnect", &arg0, "CWVerifyConnect:Unpacket");
        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "CWVerifyConnect:Unpacket"); arg1 = (char*)arg1_tmp.buffer;
        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CWVerifyConnect:Unpacket");
        if(!ok)
            return 0;
        bool ret = CWVerifyConnect::Unpacket(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("CWVerifyConnect:Unpacket has wrong number of arguments: {0}, was expecting {1}\n ", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWVerifyConnect_Unpacket'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWVerifyConnect_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWVerifyConnect* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWVerifyConnect();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWVerifyConnect");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWVerifyConnect:CWVerifyConnect has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWVerifyConnect_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWVerifyConnect)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWVerifyConnect",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWVerifyConnect* self = (CWVerifyConnect*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWVerifyConnect(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWVerifyConnect");
    tolua_cclass(tolua_S,"CWVerifyConnect","CWVerifyConnect","CRequestPacket",lua_worldserver_CWVerifyConnect_finalize);

    tolua_beginmodule(tolua_S,"CWVerifyConnect");
        tolua_function(tolua_S,"new",lua_worldserver_CWVerifyConnect_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWVerifyConnect_getPackLen);
        tolua_function(tolua_S,"Setup", lua_worldserver_CWVerifyConnect_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_CWVerifyConnect_Unsetup);
        tolua_function(tolua_S,"Unpacket", lua_worldserver_CWVerifyConnect_Unpacket);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWVerifyConnect).name();
    g_luaType[typeName] = "CWVerifyConnect";
    g_typeCast["CWVerifyConnect"] = "CWVerifyConnect";
    return 1;
}

int lua_worldserver_WCVerifyConnectRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WCVerifyConnectRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WCVerifyConnectRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WCVerifyConnectRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WCVerifyConnectRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WCVerifyConnectRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCVerifyConnectRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WCVerifyConnectRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WCVerifyConnectRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WCVerifyConnectRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WCVerifyConnectRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WCVerifyConnectRet:WCVerifyConnectRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WCVerifyConnectRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WCVerifyConnectRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WCVerifyConnectRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WCVerifyConnectRet* self = (WCVerifyConnectRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WCVerifyConnectRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WCVerifyConnectRet");
    tolua_cclass(tolua_S,"WCVerifyConnectRet","WCVerifyConnectRet","CResponsePacket",lua_worldserver_WCVerifyConnectRet_finalize);

    tolua_beginmodule(tolua_S,"WCVerifyConnectRet");
        tolua_function(tolua_S,"new",lua_worldserver_WCVerifyConnectRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WCVerifyConnectRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WCVerifyConnectRet).name();
    g_luaType[typeName] = "WCVerifyConnectRet";
    g_typeCast["WCVerifyConnectRet"] = "WCVerifyConnectRet";
    return 1;
}

int lua_worldserver_CWRandGenName_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWRandGenName* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWRandGenName",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWRandGenName*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWRandGenName_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWRandGenName:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWRandGenName_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWRandGenName_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWRandGenName* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWRandGenName();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWRandGenName");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWRandGenName:CWRandGenName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWRandGenName_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWRandGenName)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWRandGenName",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWRandGenName* self = (CWRandGenName*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWRandGenName(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWRandGenName");
    tolua_cclass(tolua_S,"CWRandGenName","CWRandGenName","CRequestPacket",lua_worldserver_CWRandGenName_finalize);

    tolua_beginmodule(tolua_S,"CWRandGenName");
        tolua_function(tolua_S,"new",lua_worldserver_CWRandGenName_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWRandGenName_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWRandGenName).name();
    g_luaType[typeName] = "CWRandGenName";
    g_typeCast["CWRandGenName"] = "CWRandGenName";
    return 1;
}

int lua_worldserver_WCRandGenNameRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WCRandGenNameRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WCRandGenNameRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WCRandGenNameRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WCRandGenNameRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WCRandGenNameRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCRandGenNameRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WCRandGenNameRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WCRandGenNameRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WCRandGenNameRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WCRandGenNameRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WCRandGenNameRet:WCRandGenNameRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WCRandGenNameRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WCRandGenNameRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WCRandGenNameRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WCRandGenNameRet* self = (WCRandGenNameRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WCRandGenNameRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WCRandGenNameRet");
    tolua_cclass(tolua_S,"WCRandGenNameRet","WCRandGenNameRet","CResponsePacket",lua_worldserver_WCRandGenNameRet_finalize);

    tolua_beginmodule(tolua_S,"WCRandGenNameRet");
        tolua_function(tolua_S,"new",lua_worldserver_WCRandGenNameRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WCRandGenNameRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WCRandGenNameRet).name();
    g_luaType[typeName] = "WCRandGenNameRet";
    g_typeCast["WCRandGenNameRet"] = "WCRandGenNameRet";
    return 1;
}

int lua_worldserver_CWCreateRole_isValid(lua_State* tolua_S)
{
    int argc = 0;
    CWCreateRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWCreateRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWCreateRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWCreateRole_isValid'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isValid();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWCreateRole:isValid has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWCreateRole_isValid'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWCreateRole_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWCreateRole* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWCreateRole",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWCreateRole*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWCreateRole_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWCreateRole:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWCreateRole_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWCreateRole_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWCreateRole",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWCreateRole::Setup();
        return 0;
    }
    gxError("CWCreateRole:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWCreateRole_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWCreateRole_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWCreateRole",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWCreateRole::Unsetup();
        return 0;
    }
    gxError("CWCreateRole:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWCreateRole_Unsetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWCreateRole_Unpacket(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWCreateRole",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        CWCreateRole* arg0;
        const char* arg1;
        int arg2;
        ok &= luaval_to_object<CWCreateRole>(tolua_S, 2, "CWCreateRole", &arg0, "CWCreateRole:Unpacket");
        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "CWCreateRole:Unpacket"); arg1 = (char*)arg1_tmp.buffer;
        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CWCreateRole:Unpacket");
        if(!ok)
            return 0;
        bool ret = CWCreateRole::Unpacket(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("CWCreateRole:Unpacket has wrong number of arguments: {0}, was expecting {1}\n ", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWCreateRole_Unpacket'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWCreateRole_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWCreateRole* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWCreateRole();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWCreateRole");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWCreateRole:CWCreateRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWCreateRole_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWCreateRole)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWCreateRole",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWCreateRole* self = (CWCreateRole*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWCreateRole(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWCreateRole");
    tolua_cclass(tolua_S,"CWCreateRole","CWCreateRole","CRequestPacket",lua_worldserver_CWCreateRole_finalize);

    tolua_beginmodule(tolua_S,"CWCreateRole");
        tolua_function(tolua_S,"new",lua_worldserver_CWCreateRole_constructor);
        tolua_function(tolua_S,"isValid",lua_worldserver_CWCreateRole_isValid);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWCreateRole_getPackLen);
        tolua_function(tolua_S,"Setup", lua_worldserver_CWCreateRole_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_CWCreateRole_Unsetup);
        tolua_function(tolua_S,"Unpacket", lua_worldserver_CWCreateRole_Unpacket);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWCreateRole).name();
    g_luaType[typeName] = "CWCreateRole";
    g_typeCast["CWCreateRole"] = "CWCreateRole";
    return 1;
}

int lua_worldserver_WCCreateRoleRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WCCreateRoleRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WCCreateRoleRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WCCreateRoleRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WCCreateRoleRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WCCreateRoleRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCCreateRoleRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WCCreateRoleRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WCCreateRoleRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WCCreateRoleRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WCCreateRoleRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WCCreateRoleRet:WCCreateRoleRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WCCreateRoleRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WCCreateRoleRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WCCreateRoleRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WCCreateRoleRet* self = (WCCreateRoleRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WCCreateRoleRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WCCreateRoleRet");
    tolua_cclass(tolua_S,"WCCreateRoleRet","WCCreateRoleRet","CResponsePacket",lua_worldserver_WCCreateRoleRet_finalize);

    tolua_beginmodule(tolua_S,"WCCreateRoleRet");
        tolua_function(tolua_S,"new",lua_worldserver_WCCreateRoleRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WCCreateRoleRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WCCreateRoleRet).name();
    g_luaType[typeName] = "WCCreateRoleRet";
    g_typeCast["WCCreateRoleRet"] = "WCCreateRoleRet";
    return 1;
}

int lua_worldserver_CWLoginGame_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWLoginGame* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWLoginGame",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWLoginGame*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWLoginGame_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWLoginGame:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWLoginGame_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWLoginGame_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWLoginGame* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWLoginGame();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWLoginGame");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWLoginGame:CWLoginGame has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWLoginGame_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWLoginGame)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWLoginGame",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWLoginGame* self = (CWLoginGame*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWLoginGame(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWLoginGame");
    tolua_cclass(tolua_S,"CWLoginGame","CWLoginGame","CRequestPacket",lua_worldserver_CWLoginGame_finalize);

    tolua_beginmodule(tolua_S,"CWLoginGame");
        tolua_function(tolua_S,"new",lua_worldserver_CWLoginGame_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWLoginGame_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWLoginGame).name();
    g_luaType[typeName] = "CWLoginGame";
    g_typeCast["CWLoginGame"] = "CWLoginGame";
    return 1;
}

int lua_worldserver_WCLoginGameRet_toString(lua_State* tolua_S)
{
    int argc = 0;
    WCLoginGameRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WCLoginGameRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WCLoginGameRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WCLoginGameRet_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        std::string ret = cobj->toString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("WCLoginGameRet:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCLoginGameRet_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_WCLoginGameRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WCLoginGameRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WCLoginGameRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WCLoginGameRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WCLoginGameRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WCLoginGameRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCLoginGameRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WCLoginGameRet_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WCLoginGameRet",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        WCLoginGameRet::Setup();
        return 0;
    }
    gxError("WCLoginGameRet:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCLoginGameRet_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_WCLoginGameRet_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WCLoginGameRet",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        WCLoginGameRet::Unsetup();
        return 0;
    }
    gxError("WCLoginGameRet:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCLoginGameRet_Unsetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_WCLoginGameRet_Unpacket(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"WCLoginGameRet",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 3)
    {
        WCLoginGameRet* arg0;
        const char* arg1;
        int arg2;
        ok &= luaval_to_object<WCLoginGameRet>(tolua_S, 2, "WCLoginGameRet", &arg0, "WCLoginGameRet:Unpacket");
        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "WCLoginGameRet:Unpacket"); arg1 = (char*)arg1_tmp.buffer;
        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "WCLoginGameRet:Unpacket");
        if(!ok)
            return 0;
        bool ret = WCLoginGameRet::Unpacket(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    gxError("WCLoginGameRet:Unpacket has wrong number of arguments: {0}, was expecting {1}\n ", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCLoginGameRet_Unpacket'.", &tolua_err);
    return 0;
}
int lua_worldserver_WCLoginGameRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WCLoginGameRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WCLoginGameRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WCLoginGameRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WCLoginGameRet:WCLoginGameRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WCLoginGameRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WCLoginGameRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WCLoginGameRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WCLoginGameRet* self = (WCLoginGameRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WCLoginGameRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WCLoginGameRet");
    tolua_cclass(tolua_S,"WCLoginGameRet","WCLoginGameRet","CResponsePacket",lua_worldserver_WCLoginGameRet_finalize);

    tolua_beginmodule(tolua_S,"WCLoginGameRet");
        tolua_function(tolua_S,"new",lua_worldserver_WCLoginGameRet_constructor);
        tolua_function(tolua_S,"toString",lua_worldserver_WCLoginGameRet_toString);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WCLoginGameRet_getPackLen);
        tolua_function(tolua_S,"Setup", lua_worldserver_WCLoginGameRet_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_WCLoginGameRet_Unsetup);
        tolua_function(tolua_S,"Unpacket", lua_worldserver_WCLoginGameRet_Unpacket);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WCLoginGameRet).name();
    g_luaType[typeName] = "WCLoginGameRet";
    g_typeCast["WCLoginGameRet"] = "WCLoginGameRet";
    return 1;
}

int lua_worldserver_CWLoginQuit_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    CWLoginQuit* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWLoginQuit",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWLoginQuit*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWLoginQuit_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWLoginQuit:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWLoginQuit_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWLoginQuit_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWLoginQuit* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWLoginQuit();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWLoginQuit");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWLoginQuit:CWLoginQuit has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWLoginQuit_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWLoginQuit)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWLoginQuit",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWLoginQuit* self = (CWLoginQuit*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWLoginQuit(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWLoginQuit");
    tolua_cclass(tolua_S,"CWLoginQuit","CWLoginQuit","CRequestPacket",lua_worldserver_CWLoginQuit_finalize);

    tolua_beginmodule(tolua_S,"CWLoginQuit");
        tolua_function(tolua_S,"new",lua_worldserver_CWLoginQuit_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_CWLoginQuit_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWLoginQuit).name();
    g_luaType[typeName] = "CWLoginQuit";
    g_typeCast["CWLoginQuit"] = "CWLoginQuit";
    return 1;
}

int lua_worldserver_WCLoginQuitRet_getPackLen(lua_State* tolua_S)
{
    int argc = 0;
    WCLoginQuitRet* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"WCLoginQuitRet",0,&tolua_err)) goto tolua_lerror;
    cobj = (WCLoginQuitRet*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_WCLoginQuitRet_getPackLen'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getPackLen();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("WCLoginQuitRet:getPackLen has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_WCLoginQuitRet_getPackLen'.",&tolua_err);
	return 0;
}
int lua_worldserver_WCLoginQuitRet_constructor(lua_State* tolua_S)
{
    int argc = 0;
    WCLoginQuitRet* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new WCLoginQuitRet();
        tolua_pushusertype(tolua_S,(void*)cobj,"WCLoginQuitRet");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("WCLoginQuitRet:WCLoginQuitRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_WCLoginQuitRet_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (WCLoginQuitRet)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"WCLoginQuitRet",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        WCLoginQuitRet* self = (WCLoginQuitRet*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_WCLoginQuitRet(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"WCLoginQuitRet");
    tolua_cclass(tolua_S,"WCLoginQuitRet","WCLoginQuitRet","CResponsePacket",lua_worldserver_WCLoginQuitRet_finalize);

    tolua_beginmodule(tolua_S,"WCLoginQuitRet");
        tolua_function(tolua_S,"new",lua_worldserver_WCLoginQuitRet_constructor);
        tolua_function(tolua_S,"getPackLen",lua_worldserver_WCLoginQuitRet_getPackLen);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(WCLoginQuitRet).name();
    g_luaType[typeName] = "WCLoginQuitRet";
    g_typeCast["WCLoginQuitRet"] = "WCLoginQuitRet";
    return 1;
}

int lua_worldserver_CWorldPlayerHandler_quit(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_quit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->quit();
        return 0;
    }

    gxError("CWorldPlayerHandler:quit has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_quit'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_getAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_getAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getAccountID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayerHandler:getAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_getAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_getDbHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_getDbHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldDbHandler* ret = cobj->getDbHandler();
        object_to_luaval<CWorldDbHandler>(tolua_S, "CWorldDbHandler",(CWorldDbHandler*)ret);
        return 1;
    }

    gxError("CWorldPlayerHandler:getDbHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_getDbHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_getWorldPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_getWorldPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->getWorldPlayer();
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerHandler:getWorldPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_getWorldPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_onBeforeHandlePacket(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_onBeforeHandlePacket'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CBasePacket* arg0;

        ok &= luaval_to_object<CBasePacket>(tolua_S, 2, "CBasePacket", &arg0, "CWorldPlayerHandler:onBeforeHandlePacket");
        if(!ok)
            return 0;
        bool ret = cobj->onBeforeHandlePacket(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayerHandler:onBeforeHandlePacket has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_onBeforeHandlePacket'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_setDbIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_setDbIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerHandler:setDbIndex");
        if(!ok)
            return 0;
        cobj->setDbIndex(arg0);
        return 0;
    }

    gxError("CWorldPlayerHandler:setDbIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_setDbIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_toString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldPlayerHandler:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_setAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_setAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerHandler:setAccountID");
        if(!ok)
            return 0;
        cobj->setAccountID(arg0);
        return 0;
    }

    gxError("CWorldPlayerHandler:setAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_setAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_getDbIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerHandler*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerHandler_getDbIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getDbIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayerHandler:getDbIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_getDbIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerHandler_Setup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldPlayerHandler::Setup();
        return 0;
    }
    gxError("CWorldPlayerHandler:Setup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_Setup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldPlayerHandler_Unsetup(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldPlayerHandler::Unsetup();
        return 0;
    }
    gxError("CWorldPlayerHandler:Unsetup has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerHandler_Unsetup'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldPlayerHandler_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerHandler* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldPlayerHandler();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldPlayerHandler");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldPlayerHandler:CWorldPlayerHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldPlayerHandler_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldPlayerHandler)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldPlayerHandler",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldPlayerHandler* self = (CWorldPlayerHandler*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldPlayerHandler(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldPlayerHandler");
    tolua_cclass(tolua_S,"CWorldPlayerHandler","CWorldPlayerHandler","CGameExtendSocketHandler<CWorldPlayerHandler>",lua_worldserver_CWorldPlayerHandler_finalize);

    tolua_beginmodule(tolua_S,"CWorldPlayerHandler");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldPlayerHandler_constructor);
        tolua_function(tolua_S,"quit",lua_worldserver_CWorldPlayerHandler_quit);
        tolua_function(tolua_S,"getAccountID",lua_worldserver_CWorldPlayerHandler_getAccountID);
        tolua_function(tolua_S,"getDbHandler",lua_worldserver_CWorldPlayerHandler_getDbHandler);
        tolua_function(tolua_S,"getWorldPlayer",lua_worldserver_CWorldPlayerHandler_getWorldPlayer);
        tolua_function(tolua_S,"onBeforeHandlePacket",lua_worldserver_CWorldPlayerHandler_onBeforeHandlePacket);
        tolua_function(tolua_S,"setDbIndex",lua_worldserver_CWorldPlayerHandler_setDbIndex);
        tolua_function(tolua_S,"toString",lua_worldserver_CWorldPlayerHandler_toString);
        tolua_function(tolua_S,"setAccountID",lua_worldserver_CWorldPlayerHandler_setAccountID);
        tolua_function(tolua_S,"getDbIndex",lua_worldserver_CWorldPlayerHandler_getDbIndex);
        tolua_function(tolua_S,"Setup", lua_worldserver_CWorldPlayerHandler_Setup);
        tolua_function(tolua_S,"Unsetup", lua_worldserver_CWorldPlayerHandler_Unsetup);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldPlayerHandler).name();
    g_luaType[typeName] = "CWorldPlayerHandler";
    g_typeCast["CWorldPlayerHandler"] = "CWorldPlayerHandler";
    return 1;
}

int lua_worldserver_CTimeWaiter_setWaitTime(lua_State* tolua_S)
{
    int argc = 0;
    CTimeWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CTimeWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CTimeWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CTimeWaiter_setWaitTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CTimeWaiter:setWaitTime");
        if(!ok)
            return 0;
        cobj->setWaitTime(arg0);
        return 0;
    }

    gxError("CTimeWaiter:setWaitTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CTimeWaiter_setWaitTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CTimeWaiter_update(lua_State* tolua_S)
{
    int argc = 0;
    CTimeWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CTimeWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CTimeWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CTimeWaiter_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CTimeWaiter:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CTimeWaiter:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CTimeWaiter_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CTimeWaiter_isTimeout(lua_State* tolua_S)
{
    int argc = 0;
    CTimeWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CTimeWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CTimeWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CTimeWaiter_isTimeout'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isTimeout();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CTimeWaiter:isTimeout has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CTimeWaiter_isTimeout'.",&tolua_err);
	return 0;
}
int lua_worldserver_CTimeWaiter_setStartTime(lua_State* tolua_S)
{
    int argc = 0;
    CTimeWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CTimeWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CTimeWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CTimeWaiter_setStartTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CTimeWaiter:setStartTime");
        if(!ok)
            return 0;
        cobj->setStartTime(arg0);
        return 0;
    }

    gxError("CTimeWaiter:setStartTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CTimeWaiter_setStartTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CTimeWaiter_getWaitTime(lua_State* tolua_S)
{
    int argc = 0;
    CTimeWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CTimeWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CTimeWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CTimeWaiter_getWaitTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getWaitTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CTimeWaiter:getWaitTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CTimeWaiter_getWaitTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CTimeWaiter_cleanup(lua_State* tolua_S)
{
    int argc = 0;
    CTimeWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CTimeWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CTimeWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CTimeWaiter_cleanup'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanup();
        return 0;
    }

    gxError("CTimeWaiter:cleanup has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CTimeWaiter_cleanup'.",&tolua_err);
	return 0;
}
int lua_worldserver_CTimeWaiter_getStartTime(lua_State* tolua_S)
{
    int argc = 0;
    CTimeWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CTimeWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CTimeWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CTimeWaiter_getStartTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getStartTime();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CTimeWaiter:getStartTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CTimeWaiter_getStartTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CTimeWaiter_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CTimeWaiter* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CTimeWaiter();
        tolua_pushusertype(tolua_S,(void*)cobj,"CTimeWaiter");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CTimeWaiter:CTimeWaiter has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CTimeWaiter_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CTimeWaiter)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CTimeWaiter",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CTimeWaiter* self = (CTimeWaiter*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CTimeWaiter(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CTimeWaiter");
    tolua_cclass(tolua_S,"CTimeWaiter","CTimeWaiter","",lua_worldserver_CTimeWaiter_finalize);

    tolua_beginmodule(tolua_S,"CTimeWaiter");
        tolua_function(tolua_S,"new",lua_worldserver_CTimeWaiter_constructor);
        tolua_function(tolua_S,"setWaitTime",lua_worldserver_CTimeWaiter_setWaitTime);
        tolua_function(tolua_S,"update",lua_worldserver_CTimeWaiter_update);
        tolua_function(tolua_S,"isTimeout",lua_worldserver_CTimeWaiter_isTimeout);
        tolua_function(tolua_S,"setStartTime",lua_worldserver_CTimeWaiter_setStartTime);
        tolua_function(tolua_S,"getWaitTime",lua_worldserver_CTimeWaiter_getWaitTime);
        tolua_function(tolua_S,"cleanup",lua_worldserver_CTimeWaiter_cleanup);
        tolua_function(tolua_S,"getStartTime",lua_worldserver_CTimeWaiter_getStartTime);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CTimeWaiter).name();
    g_luaType[typeName] = "CTimeWaiter";
    g_typeCast["CTimeWaiter"] = "CTimeWaiter";
    return 1;
}

int lua_worldserver_CLoginWaiter_setLoadType(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiter_setLoadType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        ELoadRoleType arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CLoginWaiter:setLoadType");
        if(!ok)
            return 0;
        cobj->setLoadType(arg0);
        return 0;
    }

    gxError("CLoginWaiter:setLoadType has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiter_setLoadType'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginWaiter_getSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiter_getSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getSocketIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CLoginWaiter:getSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiter_getSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginWaiter_getLoadType(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiter_getLoadType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->getLoadType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLoginWaiter:getLoadType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiter_getLoadType'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginWaiter_setSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiter_setSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLoginWaiter:setSocketIndex");
        if(!ok)
            return 0;
        cobj->setSocketIndex(arg0);
        return 0;
    }

    gxError("CLoginWaiter:setSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiter_setSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginWaiter_cleanup(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiter_cleanup'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanup();
        return 0;
    }

    gxError("CLoginWaiter:cleanup has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiter_cleanup'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginWaiter_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiter* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLoginWaiter();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLoginWaiter");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLoginWaiter:CLoginWaiter has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLoginWaiter_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLoginWaiter)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLoginWaiter",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLoginWaiter* self = (CLoginWaiter*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLoginWaiter(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLoginWaiter");
    tolua_cclass(tolua_S,"CLoginWaiter","CLoginWaiter","",lua_worldserver_CLoginWaiter_finalize);

    tolua_beginmodule(tolua_S,"CLoginWaiter");
        tolua_function(tolua_S,"new",lua_worldserver_CLoginWaiter_constructor);
        tolua_function(tolua_S,"setLoadType",lua_worldserver_CLoginWaiter_setLoadType);
        tolua_function(tolua_S,"getSocketIndex",lua_worldserver_CLoginWaiter_getSocketIndex);
        tolua_function(tolua_S,"getLoadType",lua_worldserver_CLoginWaiter_getLoadType);
        tolua_function(tolua_S,"setSocketIndex",lua_worldserver_CLoginWaiter_setSocketIndex);
        tolua_function(tolua_S,"cleanup",lua_worldserver_CLoginWaiter_cleanup);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLoginWaiter).name();
    g_luaType[typeName] = "CLoginWaiter";
    g_typeCast["CLoginWaiter"] = "CLoginWaiter";
    return 1;
}

int lua_worldserver_CLogoutWaiter_setSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLogoutWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLogoutWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLogoutWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLogoutWaiter_setSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CLogoutWaiter:setSocketIndex");
        if(!ok)
            return 0;
        cobj->setSocketIndex(arg0);
        return 0;
    }

    gxError("CLogoutWaiter:setSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLogoutWaiter_setSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLogoutWaiter_setUnloadType(lua_State* tolua_S)
{
    int argc = 0;
    CLogoutWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLogoutWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLogoutWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLogoutWaiter_setUnloadType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        EUnloadRoleType arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CLogoutWaiter:setUnloadType");
        if(!ok)
            return 0;
        cobj->setUnloadType(arg0);
        return 0;
    }

    gxError("CLogoutWaiter:setUnloadType has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLogoutWaiter_setUnloadType'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLogoutWaiter_getNeedRet(lua_State* tolua_S)
{
    int argc = 0;
    CLogoutWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLogoutWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLogoutWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLogoutWaiter_getNeedRet'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->getNeedRet();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLogoutWaiter:getNeedRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLogoutWaiter_getNeedRet'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLogoutWaiter_getUnloadType(lua_State* tolua_S)
{
    int argc = 0;
    CLogoutWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLogoutWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLogoutWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLogoutWaiter_getUnloadType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->getUnloadType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CLogoutWaiter:getUnloadType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLogoutWaiter_getUnloadType'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLogoutWaiter_getSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CLogoutWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLogoutWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLogoutWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLogoutWaiter_getSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getSocketIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CLogoutWaiter:getSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLogoutWaiter_getSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLogoutWaiter_cleanup(lua_State* tolua_S)
{
    int argc = 0;
    CLogoutWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLogoutWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLogoutWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLogoutWaiter_cleanup'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanup();
        return 0;
    }

    gxError("CLogoutWaiter:cleanup has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLogoutWaiter_cleanup'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLogoutWaiter_setNeedRet(lua_State* tolua_S)
{
    int argc = 0;
    CLogoutWaiter* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLogoutWaiter",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLogoutWaiter*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLogoutWaiter_setNeedRet'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CLogoutWaiter:setNeedRet");
        if(!ok)
            return 0;
        cobj->setNeedRet(arg0);
        return 0;
    }

    gxError("CLogoutWaiter:setNeedRet has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLogoutWaiter_setNeedRet'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLogoutWaiter_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CLogoutWaiter* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CLogoutWaiter();
        tolua_pushusertype(tolua_S,(void*)cobj,"CLogoutWaiter");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CLogoutWaiter:CLogoutWaiter has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CLogoutWaiter_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLogoutWaiter)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLogoutWaiter",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLogoutWaiter* self = (CLogoutWaiter*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLogoutWaiter(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLogoutWaiter");
    tolua_cclass(tolua_S,"CLogoutWaiter","CLogoutWaiter","",lua_worldserver_CLogoutWaiter_finalize);

    tolua_beginmodule(tolua_S,"CLogoutWaiter");
        tolua_function(tolua_S,"new",lua_worldserver_CLogoutWaiter_constructor);
        tolua_function(tolua_S,"setSocketIndex",lua_worldserver_CLogoutWaiter_setSocketIndex);
        tolua_function(tolua_S,"setUnloadType",lua_worldserver_CLogoutWaiter_setUnloadType);
        tolua_function(tolua_S,"getNeedRet",lua_worldserver_CLogoutWaiter_getNeedRet);
        tolua_function(tolua_S,"getUnloadType",lua_worldserver_CLogoutWaiter_getUnloadType);
        tolua_function(tolua_S,"getSocketIndex",lua_worldserver_CLogoutWaiter_getSocketIndex);
        tolua_function(tolua_S,"cleanup",lua_worldserver_CLogoutWaiter_cleanup);
        tolua_function(tolua_S,"setNeedRet",lua_worldserver_CLogoutWaiter_setNeedRet);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLogoutWaiter).name();
    g_luaType[typeName] = "CLogoutWaiter";
    g_typeCast["CLogoutWaiter"] = "CLogoutWaiter";
    return 1;
}

int lua_worldserver_CLoginWaiterManager_push(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiterManager* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiterManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiterManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CLoginWaiterManager_push'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 3) {
            EUnloadRoleType arg0;
            ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CLoginWaiterManager:push");

            if (!ok) { break; }
            bool arg1;
            ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CLoginWaiterManager:push");

            if (!ok) { break; }
            unsigned long long arg2;
            ok &= luaval_to_uint64(tolua_S, 4, (uint64*)&arg2, "CLoginWaiterManager:push");

            if (!ok) { break; }
            cobj->push(arg0, arg1, arg2);
            return 0;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            ELoadRoleType arg0;
            ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CLoginWaiterManager:push");

            if (!ok) { break; }
            unsigned long long arg1;
            ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CLoginWaiterManager:push");

            if (!ok) { break; }
            cobj->push(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    gxError("CLoginWaiterManager:push has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiterManager_push'.",&tolua_err);
    return 0;
}
int lua_worldserver_CLoginWaiterManager_isLogin(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiterManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiterManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiterManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiterManager_isLogin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isLogin();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginWaiterManager:isLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiterManager_isLogin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginWaiterManager_isLogout(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiterManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiterManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiterManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiterManager_isLogout'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isLogout();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CLoginWaiterManager:isLogout has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiterManager_isLogout'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginWaiterManager_onLogin(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiterManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiterManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiterManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiterManager_onLogin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        ELoadRoleType arg0;
        unsigned long long arg1;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CLoginWaiterManager:onLogin");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CLoginWaiterManager:onLogin");
        if(!ok)
            return 0;
        cobj->onLogin(arg0, arg1);
        return 0;
    }

    gxError("CLoginWaiterManager:onLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiterManager_onLogin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CLoginWaiterManager_onLogout(lua_State* tolua_S)
{
    int argc = 0;
    CLoginWaiterManager* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CLoginWaiterManager",0,&tolua_err)) goto tolua_lerror;
    cobj = (CLoginWaiterManager*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CLoginWaiterManager_onLogout'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        EUnloadRoleType arg0;
        unsigned long long arg1;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CLoginWaiterManager:onLogout");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CLoginWaiterManager:onLogout");
        if(!ok)
            return 0;
        cobj->onLogout(arg0, arg1);
        return 0;
    }

    gxError("CLoginWaiterManager:onLogout has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CLoginWaiterManager_onLogout'.",&tolua_err);
	return 0;
}
static int lua_worldserver_CLoginWaiterManager_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CLoginWaiterManager)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CLoginWaiterManager",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CLoginWaiterManager* self = (CLoginWaiterManager*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CLoginWaiterManager(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CLoginWaiterManager");
    tolua_cclass(tolua_S,"CLoginWaiterManager","CLoginWaiterManager","",nullptr);

    tolua_beginmodule(tolua_S,"CLoginWaiterManager");
        tolua_function(tolua_S,"push",lua_worldserver_CLoginWaiterManager_push);
        tolua_function(tolua_S,"isLogin",lua_worldserver_CLoginWaiterManager_isLogin);
        tolua_function(tolua_S,"isLogout",lua_worldserver_CLoginWaiterManager_isLogout);
        tolua_function(tolua_S,"onLogin",lua_worldserver_CLoginWaiterManager_onLogin);
        tolua_function(tolua_S,"onLogout",lua_worldserver_CLoginWaiterManager_onLogout);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CLoginWaiterManager).name();
    g_luaType[typeName] = "CLoginWaiterManager";
    g_typeCast["CLoginWaiterManager"] = "CLoginWaiterManager";
    return 1;
}

int lua_worldserver_CWorldPlayer_isDataNeedFreeStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isDataNeedFreeStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isDataNeedFreeStatus();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isDataNeedFreeStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isDataNeedFreeStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onUpdateLogoutQue(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onUpdateLogoutQue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:onUpdateLogoutQue");
        if(!ok)
            return 0;
        cobj->onUpdateLogoutQue(arg0);
        return 0;
    }

    gxError("CWorldPlayer:onUpdateLogoutQue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onUpdateLogoutQue'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getSocketHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getSocketHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldPlayerHandler* ret = cobj->getSocketHandler();
        object_to_luaval<CWorldPlayerHandler>(tolua_S, "CWorldPlayerHandler",(CWorldPlayerHandler*)ret);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CWorldPlayer:getSocketHandler");
        if(!ok)
            return 0;
        CWorldPlayerHandler* ret = cobj->getSocketHandler(arg0);
        object_to_luaval<CWorldPlayerHandler>(tolua_S, "CWorldPlayerHandler",(CWorldPlayerHandler*)ret);
        return 1;
    }

    gxError("CWorldPlayer:getSocketHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getSocketHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:setAccountID");
        if(!ok)
            return 0;
        cobj->setAccountID(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getChangeLineWait(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getChangeLineWait'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        ChangeLineWait* ret = cobj->getChangeLineWait();
        object_to_luaval<ChangeLineWait>(tolua_S, "ChangeLineWait",(ChangeLineWait*)ret);
        return 1;
    }

    gxError("CWorldPlayer:getChangeLineWait has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getChangeLineWait'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getLoginTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getLoginTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        GXMISC::CGameTime ret = cobj->getLoginTime();
        tolua_pushnumber(tolua_S,(GXMISC::TGameTime_t)ret);
        return 1;
    }

    gxError("CWorldPlayer:getLoginTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getLoginTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onUpdateReadyQue(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onUpdateReadyQue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:onUpdateReadyQue");
        if(!ok)
            return 0;
        cobj->onUpdateReadyQue(arg0);
        return 0;
    }

    gxError("CWorldPlayer:onUpdateReadyQue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onUpdateReadyQue'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey2();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_changeLineLoadRes(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_changeLineLoadRes'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        CWorldUserData* arg0;
        unsigned short arg1;
        unsigned short arg2;

        ok &= luaval_to_object<CWorldUserData>(tolua_S, 2, "CWorldUserData", &arg0, "CWorldPlayer:changeLineLoadRes");

        ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CWorldPlayer:changeLineLoadRes");

        ok &= luaval_to_uint16(tolua_S, 4, (uint16*)&arg2, "CWorldPlayer:changeLineLoadRes");
        if(!ok)
            return 0;
        int ret = (int)cobj->changeLineLoadRes(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:changeLineLoadRes has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_changeLineLoadRes'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_changeLineLoadReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_changeLineLoadReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->changeLineLoadReq();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:changeLineLoadReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_changeLineLoadReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_changeLineUnloadRes(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_changeLineUnloadRes'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->changeLineUnloadRes();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:changeLineUnloadRes has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_changeLineUnloadRes'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_toString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldPlayer:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_changeLineUnloadReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_changeLineUnloadReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->changeLineUnloadReq();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:changeLineUnloadReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_changeLineUnloadReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setLoginManager(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setLoginManager'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CLoginWaiterManager* arg0;

        ok &= luaval_to_object<CLoginWaiterManager>(tolua_S, 2, "CLoginWaiterManager", &arg0, "CWorldPlayer:setLoginManager");
        if(!ok)
            return 0;
        cobj->setLoginManager(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setLoginManager has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setLoginManager'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_closeRecharge(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_closeRecharge'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->closeRecharge();
        return 0;
    }

    gxError("CWorldPlayer:closeRecharge has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_closeRecharge'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setLoginKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setLoginKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:setLoginKey");
        if(!ok)
            return 0;
        cobj->setLoginKey(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setLoginKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setLoginKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getCurrentUser(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getCurrentUser'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldUser* ret = cobj->getCurrentUser();
        object_to_luaval<CWorldUser>(tolua_S, "CWorldUser",(CWorldUser*)ret);
        return 1;
    }

    gxError("CWorldPlayer:getCurrentUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getCurrentUser'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onAddToEnter(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onAddToEnter'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->onAddToEnter();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:onAddToEnter has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onAddToEnter'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onUserLogin(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onUserLogin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onUserLogin();
        return 0;
    }

    gxError("CWorldPlayer:onUserLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onUserLogin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getDbIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getDbIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getDbIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayer:getDbIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getDbIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isMaxRoleNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isMaxRoleNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isMaxRoleNum();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isMaxRoleNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isMaxRoleNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_createRoleReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_createRoleReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        CCharArray1<50> arg0;
        unsigned char arg1;

        ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldPlayer:createRoleReq");

        ok &= luaval_to_uint8(tolua_S, 3,(uint8*)&arg1, "CWorldPlayer:createRoleReq");
        if(!ok)
            return 0;
        cobj->createRoleReq(arg0, arg1);
        return 0;
    }

    gxError("CWorldPlayer:createRoleReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_createRoleReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_key2ToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_key2ToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->key2ToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldPlayer:key2ToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_key2ToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isEnterGame(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isEnterGame'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isEnterGame();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isEnterGame has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isEnterGame'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onRemoveFromEnter(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onRemoveFromEnter'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onRemoveFromEnter();
        return 0;
    }

    gxError("CWorldPlayer:onRemoveFromEnter has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onRemoveFromEnter'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onAddToReady(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onAddToReady'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->onAddToReady();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:onAddToReady has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onAddToReady'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getChisourceWay(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getChisourceWay'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CCharArray1<250> ret = cobj->getChisourceWay();
        array_string1_to_luaval(tolua_S,ret);
        return 1;
    }

    gxError("CWorldPlayer:getChisourceWay has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getChisourceWay'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setGmPower(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setGmPower'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CWorldPlayer:setGmPower");
        if(!ok)
            return 0;
        cobj->setGmPower(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setGmPower has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setGmPower'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getGmPower(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getGmPower'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned char ret = cobj->getGmPower();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:getGmPower has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getGmPower'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:setKey2");
        if(!ok)
            return 0;
        cobj->setKey2(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onBeforeRequst(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onBeforeRequst'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        EWPlayerActionType arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:onBeforeRequst");
        if(!ok)
            return 0;
        int ret = (int)cobj->onBeforeRequst(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:onBeforeRequst has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onBeforeRequst'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isLoadRoleDataStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isLoadRoleDataStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isLoadRoleDataStatus();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isLoadRoleDataStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isLoadRoleDataStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_quitGameRes(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_quitGameRes'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->quitGameRes();
        return 0;
    }

    gxError("CWorldPlayer:quitGameRes has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_quitGameRes'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_quitGameReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_quitGameReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:quitGameReq");
        if(!ok)
            return 0;
        cobj->quitGameReq(arg0);
        return 0;
    }

    gxError("CWorldPlayer:quitGameReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_quitGameReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setMapServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setMapServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldPlayer:setMapServerID");
        if(!ok)
            return 0;
        cobj->setMapServerID(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setMapServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setMapServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_quitByDbClose(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_quitByDbClose'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->quitByDbClose();
        return 0;
    }

    gxError("CWorldPlayer:quitByDbClose has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_quitByDbClose'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_createRoleFailed(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_createRoleFailed'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        _LoginRole* arg0;

        ok &= luaval_to_object<_LoginRole>(tolua_S, 2, "_LoginRole", &arg0, "CWorldPlayer:createRoleFailed");
        if(!ok)
            return 0;
        cobj->createRoleFailed(arg0);
        return 0;
    }

    gxError("CWorldPlayer:createRoleFailed has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_createRoleFailed'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_loadRoleDataSuccess(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_loadRoleDataSuccess'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        CWorldUserData* arg0;
        unsigned short arg1;
        unsigned short arg2;

        ok &= luaval_to_object<CWorldUserData>(tolua_S, 2, "CWorldUserData", &arg0, "CWorldPlayer:loadRoleDataSuccess");

        ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CWorldPlayer:loadRoleDataSuccess");

        ok &= luaval_to_uint16(tolua_S, 4, (uint16*)&arg2, "CWorldPlayer:loadRoleDataSuccess");
        if(!ok)
            return 0;
        int ret = (int)cobj->loadRoleDataSuccess(arg0, arg1, arg2);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:loadRoleDataSuccess has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_loadRoleDataSuccess'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setDbIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setDbIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:setDbIndex");
        if(!ok)
            return 0;
        cobj->setDbIndex(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setDbIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setDbIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_loginSuccess(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_loginSuccess'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->loginSuccess();
        return 0;
    }

    gxError("CWorldPlayer:loginSuccess has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_loginSuccess'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isAccountVerifyStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isAccountVerifyStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isAccountVerifyStatus();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isAccountVerifyStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isAccountVerifyStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onRoleHeart(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onRoleHeart'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onRoleHeart();
        return 0;
    }

    gxError("CWorldPlayer:onRoleHeart has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onRoleHeart'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isVerifyPass(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isVerifyPass'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isVerifyPass();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isVerifyPass has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isVerifyPass'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isLoginGame(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isLoginGame'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isLoginGame();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isLoginGame has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isLoginGame'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getKey2();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayer:getKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isIdle(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isIdle'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isIdle();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isIdle has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isIdle'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isPlaying(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isPlaying'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isPlaying();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isPlaying has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isPlaying'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onRemoveFromReady(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onRemoveFromReady'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onRemoveFromReady();
        return 0;
    }

    gxError("CWorldPlayer:onRemoveFromReady has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onRemoveFromReady'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getCurrentRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getCurrentRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getCurrentRoleUID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayer:getCurrentRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getCurrentRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getLoginManager(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getLoginManager'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CLoginWaiterManager* ret = cobj->getLoginManager();
        object_to_luaval<CLoginWaiterManager>(tolua_S, "CLoginWaiterManager",(CLoginWaiterManager*)ret);
        return 1;
    }

    gxError("CWorldPlayer:getLoginManager has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getLoginManager'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_loadRoleDataFailed(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_loadRoleDataFailed'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        const LoadRoleData* arg0;
        EGameRetCode arg1;

        ok &= luaval_to_object<const LoadRoleData>(tolua_S, 2, "LoadRoleData", &arg0, "CWorldPlayer:loadRoleDataFailed");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CWorldPlayer:loadRoleDataFailed");
        if(!ok)
            return 0;
        bool ret = cobj->loadRoleDataFailed(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:loadRoleDataFailed has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_loadRoleDataFailed'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_cleanRole(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_cleanRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->cleanRole();
        return 0;
    }

    gxError("CWorldPlayer:cleanRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_cleanRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_checkRequest(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_checkRequest'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->checkRequest();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:checkRequest has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_checkRequest'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onBerforeLoadRoleData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onBerforeLoadRoleData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        unsigned int arg0;
        unsigned long long arg1;
        unsigned short arg2;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldPlayer:onBerforeLoadRoleData");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldPlayer:onBerforeLoadRoleData");

        ok &= luaval_to_uint16(tolua_S, 4, (uint16*)&arg2, "CWorldPlayer:onBerforeLoadRoleData");
        if(!ok)
            return 0;
        cobj->onBerforeLoadRoleData(arg0, arg1, arg2);
        return 0;
    }

    gxError("CWorldPlayer:onBerforeLoadRoleData has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onBerforeLoadRoleData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getAccountID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayer:getAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onAddToLogout(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onAddToLogout'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->onAddToLogout();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:onAddToLogout has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onAddToLogout'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_keyToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_keyToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->keyToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldPlayer:keyToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_keyToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getSourceWay(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getSourceWay'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CCharArray1<250> ret = cobj->getSourceWay();
        array_string1_to_luaval(tolua_S,ret);
        return 1;
    }

    gxError("CWorldPlayer:getSourceWay has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getSourceWay'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_unloadRoleDataFailed(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_unloadRoleDataFailed'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:unloadRoleDataFailed");
        if(!ok)
            return 0;
        cobj->unloadRoleDataFailed(arg0);
        return 0;
    }

    gxError("CWorldPlayer:unloadRoleDataFailed has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_unloadRoleDataFailed'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_quit(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_quit'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CWorldPlayer:quit");
        if(!ok)
            return 0;
        cobj->quit(arg0);
        return 0;
    }
    if (argc == 2) 
    {
        bool arg0;
        const char* arg1;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CWorldPlayer:quit");

        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "CWorldPlayer:quit"); arg1 = (char*)arg1_tmp.buffer;
        if(!ok)
            return 0;
        cobj->quit(arg0, arg1);
        return 0;
    }

    gxError("CWorldPlayer:quit has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_quit'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_hasRole(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_hasRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:hasRole");
        if(!ok)
            return 0;
        bool ret = cobj->hasRole(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:hasRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_hasRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_transLimitInfo(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_transLimitInfo'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->transLimitInfo();
        return 0;
    }

    gxError("CWorldPlayer:transLimitInfo has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_transLimitInfo'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_unloadRoleDataReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_unloadRoleDataReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        EUnloadRoleType arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:unloadRoleDataReq");
        if(!ok)
            return 0;
        bool ret = cobj->unloadRoleDataReq(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }
    if (argc == 2) 
    {
        EUnloadRoleType arg0;
        bool arg1;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:unloadRoleDataReq");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayer:unloadRoleDataReq");
        if(!ok)
            return 0;
        bool ret = cobj->unloadRoleDataReq(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:unloadRoleDataReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_unloadRoleDataReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_doLoginVerify(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_doLoginVerify'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->doLoginVerify();
        return 0;
    }

    gxError("CWorldPlayer:doLoginVerify has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_doLoginVerify'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_createRoleSuccess(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_createRoleSuccess'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned short arg0;
        _LoginRole* arg1;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldPlayer:createRoleSuccess");

        ok &= luaval_to_object<_LoginRole>(tolua_S, 3, "_LoginRole", &arg1, "CWorldPlayer:createRoleSuccess");
        if(!ok)
            return 0;
        int ret = (int)cobj->createRoleSuccess(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:createRoleSuccess has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_createRoleSuccess'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onUpdateEnterQue(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onUpdateEnterQue'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:onUpdateEnterQue");
        if(!ok)
            return 0;
        cobj->onUpdateEnterQue(arg0);
        return 0;
    }

    gxError("CWorldPlayer:onUpdateEnterQue has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onUpdateEnterQue'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getLoginKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getLoginKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getLoginKey();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayer:getLoginKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getLoginKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getMapServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getMapServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getMapServerID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:getMapServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getMapServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getSocketIndex();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayer:getSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_addRole(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_addRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        _LoginRole* arg0;

        ok &= luaval_to_object<_LoginRole>(tolua_S, 2, "_LoginRole", &arg0, "CWorldPlayer:addRole");
        if(!ok)
            return 0;
        cobj->addRole(arg0);
        return 0;
    }

    gxError("CWorldPlayer:addRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_addRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isRechargeStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isRechargeStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isRechargeStatus();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isRechargeStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isRechargeStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_heartOutTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_heartOutTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->heartOutTime();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:heartOutTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_heartOutTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onBeforeResponse(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onBeforeResponse'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        EWPlayerActionType arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:onBeforeResponse");
        if(!ok)
            return 0;
        int ret = (int)cobj->onBeforeResponse(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:onBeforeResponse has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onBeforeResponse'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_loginQuitReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_loginQuitReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->loginQuitReq();
        return 0;
    }

    gxError("CWorldPlayer:loginQuitReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_loginQuitReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_changeLineRes(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_changeLineRes'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned short arg0;
        unsigned short arg1;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldPlayer:changeLineRes");

        ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CWorldPlayer:changeLineRes");
        if(!ok)
            return 0;
        int ret = (int)cobj->changeLineRes(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:changeLineRes has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_changeLineRes'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_changeLineReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_changeLineReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 7) 
    {
        unsigned long long arg0;
        AxisPos arg1;
        unsigned short arg2;
        unsigned long long arg3;
        AxisPos arg4;
        unsigned short arg5;
        ChangeLineTempData* arg6;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:changeLineReq");

        ok &= luaval_to_axispos(tolua_S, 3, "AxisPos", &arg1, "CWorldPlayer:changeLineReq");

        ok &= luaval_to_uint16(tolua_S, 4, (uint16*)&arg2, "CWorldPlayer:changeLineReq");

        ok &= luaval_to_uint64(tolua_S, 5, (uint64*)&arg3, "CWorldPlayer:changeLineReq");

        ok &= luaval_to_axispos(tolua_S, 6, "AxisPos", &arg4, "CWorldPlayer:changeLineReq");

        ok &= luaval_to_uint16(tolua_S, 7, (uint16*)&arg5, "CWorldPlayer:changeLineReq");

        ok &= luaval_to_object<ChangeLineTempData>(tolua_S, 8, "ChangeLineTempData", &arg6, "CWorldPlayer:changeLineReq");
        if(!ok)
            return 0;
        int ret = (int)cobj->changeLineReq(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:changeLineReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 7);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_changeLineReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getCurrentObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getCurrentObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getCurrentObjUID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:getCurrentObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getCurrentObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getQueType(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getQueType'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->getQueType();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:getQueType has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getQueType'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_kickByOtherPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_kickByOtherPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->kickByOtherPlayer();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:kickByOtherPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_kickByOtherPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setChangeLine(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setChangeLine'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        unsigned short arg0;
        unsigned long long arg1;
        AxisPos arg2;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldPlayer:setChangeLine");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldPlayer:setChangeLine");

        ok &= luaval_to_axispos(tolua_S, 4, "AxisPos", &arg2, "CWorldPlayer:setChangeLine");
        if(!ok)
            return 0;
        cobj->setChangeLine(arg0, arg1, arg2);
        return 0;
    }

    gxError("CWorldPlayer:setChangeLine has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setChangeLine'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setPlayerStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setPlayerStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        EPlayerStatus arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:setPlayerStatus");
        if(!ok)
            return 0;
        cobj->setPlayerStatus(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setPlayerStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setPlayerStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getKey();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayer:getKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onBeforeLogin(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onBeforeLogin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldPlayer:onBeforeLogin");
        if(!ok)
            return 0;
        cobj->onBeforeLogin(arg0);
        return 0;
    }

    gxError("CWorldPlayer:onBeforeLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onBeforeLogin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getCWorldLoginRoleList(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getCWorldLoginRoleList'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldLoginRoleList* ret = cobj->getCWorldLoginRoleList();
        object_to_luaval<CWorldLoginRoleList>(tolua_S, "CWorldLoginRoleList",(CWorldLoginRoleList*)ret);
        return 1;
    }

    gxError("CWorldPlayer:getCWorldLoginRoleList has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getCWorldLoginRoleList'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isChangeLineStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isChangeLineStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isChangeLineStatus();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isChangeLineStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isChangeLineStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_unloadRoleDataAll(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_unloadRoleDataAll'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->unloadRoleDataAll();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:unloadRoleDataAll has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_unloadRoleDataAll'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setChisourceWay(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setChisourceWay'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CCharArray1<250> arg0;

        ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldPlayer:setChisourceWay");
        if(!ok)
            return 0;
        cobj->setChisourceWay(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setChisourceWay has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setChisourceWay'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:setKey");
        if(!ok)
            return 0;
        cobj->setKey(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setSocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setSocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:setSocketIndex");
        if(!ok)
            return 0;
        cobj->setSocketIndex(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setSocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setSocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_startRecharge(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_startRecharge'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->startRecharge();
        return 0;
    }

    gxError("CWorldPlayer:startRecharge has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_startRecharge'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_quitBySocketClose(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_quitBySocketClose'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->quitBySocketClose();
        return 0;
    }

    gxError("CWorldPlayer:quitBySocketClose has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_quitBySocketClose'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isLoadRoleDataReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isLoadRoleDataReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isLoadRoleDataReq();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isLoadRoleDataReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isLoadRoleDataReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_loginGameRes(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_loginGameRes'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        CWorldUserData* arg0;
        unsigned short arg1;

        ok &= luaval_to_object<CWorldUserData>(tolua_S, 2, "CWorldUserData", &arg0, "CWorldPlayer:loginGameRes");

        ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CWorldPlayer:loginGameRes");
        if(!ok)
            return 0;
        int ret = (int)cobj->loginGameRes(arg0, arg1);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:loginGameRes has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_loginGameRes'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_loginGameReq(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_loginGameReq'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:loginGameReq");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayer:loginGameReq");
        if(!ok)
            return 0;
        cobj->loginGameReq(arg0, arg1);
        return 0;
    }

    gxError("CWorldPlayer:loginGameReq has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_loginGameReq'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_update(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayer:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CWorldPlayer:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getPlayerStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getPlayerStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = (int)cobj->getPlayerStatus();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:getPlayerStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getPlayerStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onAfterLogin(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onAfterLogin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldPlayer:onAfterLogin");
        if(!ok)
            return 0;
        cobj->onAfterLogin(arg0);
        return 0;
    }

    gxError("CWorldPlayer:onAfterLogin has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onAfterLogin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setLoginTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_setLoginTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        GXMISC::CGameTime arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(GXMISC::TGameTime_t*)&arg0, "CWorldPlayer:setLoginTime");
        if(!ok)
            return 0;
        cobj->setLoginTime(arg0);
        return 0;
    }

    gxError("CWorldPlayer:setLoginTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setLoginTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getFirstRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getFirstRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getFirstRoleUID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayer:getFirstRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getFirstRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_onRemoveFromLogout(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_onRemoveFromLogout'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onRemoveFromLogout();
        return 0;
    }

    gxError("CWorldPlayer:onRemoveFromLogout has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_onRemoveFromLogout'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_unloadRoleDataSuccess(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_unloadRoleDataSuccess'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayer:unloadRoleDataSuccess");
        if(!ok)
            return 0;
        int ret = (int)cobj->unloadRoleDataSuccess(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:unloadRoleDataSuccess has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_unloadRoleDataSuccess'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_getDbHandler(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getDbHandler'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldDbHandler* ret = cobj->getDbHandler();
        object_to_luaval<CWorldDbHandler>(tolua_S, "CWorldDbHandler",(CWorldDbHandler*)ret);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CWorldPlayer:getDbHandler");
        if(!ok)
            return 0;
        CWorldDbHandler* ret = cobj->getDbHandler(arg0);
        object_to_luaval<CWorldDbHandler>(tolua_S, "CWorldDbHandler",(CWorldDbHandler*)ret);
        return 1;
    }

    gxError("CWorldPlayer:getDbHandler has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getDbHandler'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_quitByMapServerClose(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_quitByMapServerClose'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->quitByMapServerClose();
        return 0;
    }

    gxError("CWorldPlayer:quitByMapServerClose has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_quitByMapServerClose'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_setSourceWay(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;
   
	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj)
    {
        tolua_error(tolua_S,"invalid 'cobject' in function 'lua_worldserver_CWorldPlayer_setSourceWay'", nullptr);
        return 0;
    }
    argc = lua_gettop(tolua_S)-1;
    do{
        if (argc == 1) {
            CCharArray1<250> arg0;
            ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldPlayer:setSourceWay");

            if (!ok) { break; }
            cobj->setSourceWay(arg0);
            return 0;
        }
    }while(0);
    ok  = true;
    do{
        if (argc == 2) {
            CCharArray1<250> arg0;
            ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldPlayer:setSourceWay");

            if (!ok) { break; }
            CCharArray1<250> arg1;
            ok &= luaval_to_array_string1(tolua_S, 3,&arg1, "CWorldPlayer:setSourceWay");

            if (!ok) { break; }
            cobj->setSourceWay(arg0, arg1);
            return 0;
        }
    }while(0);
    ok  = true;
    gxError("CWorldPlayer:setSourceWay has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_setSourceWay'.",&tolua_err);
    return 0;
}
int lua_worldserver_CWorldPlayer_getRoleNum(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_getRoleNum'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        int ret = cobj->getRoleNum();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayer:getRoleNum has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_getRoleNum'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isRequstStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isRequstStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isRequstStatus();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isRequstStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isRequstStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_isDataHasFreedStatus(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayer*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayer_isDataHasFreedStatus'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isDataHasFreedStatus();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldPlayer:isDataHasFreedStatus has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayer_isDataHasFreedStatus'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayer_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayer* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldPlayer();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldPlayer");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldPlayer:CWorldPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldPlayer_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldPlayer)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldPlayer",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldPlayer* self = (CWorldPlayer*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldPlayer(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldPlayer");
    tolua_cclass(tolua_S,"CWorldPlayer","CWorldPlayer","",lua_worldserver_CWorldPlayer_finalize);

    tolua_beginmodule(tolua_S,"CWorldPlayer");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldPlayer_constructor);
        tolua_function(tolua_S,"isDataNeedFreeStatus",lua_worldserver_CWorldPlayer_isDataNeedFreeStatus);
        tolua_function(tolua_S,"onUpdateLogoutQue",lua_worldserver_CWorldPlayer_onUpdateLogoutQue);
        tolua_function(tolua_S,"getSocketHandler",lua_worldserver_CWorldPlayer_getSocketHandler);
        tolua_function(tolua_S,"setAccountID",lua_worldserver_CWorldPlayer_setAccountID);
        tolua_function(tolua_S,"getChangeLineWait",lua_worldserver_CWorldPlayer_getChangeLineWait);
        tolua_function(tolua_S,"getLoginTime",lua_worldserver_CWorldPlayer_getLoginTime);
        tolua_function(tolua_S,"onUpdateReadyQue",lua_worldserver_CWorldPlayer_onUpdateReadyQue);
        tolua_function(tolua_S,"isKey2",lua_worldserver_CWorldPlayer_isKey2);
        tolua_function(tolua_S,"changeLineLoadRes",lua_worldserver_CWorldPlayer_changeLineLoadRes);
        tolua_function(tolua_S,"changeLineLoadReq",lua_worldserver_CWorldPlayer_changeLineLoadReq);
        tolua_function(tolua_S,"changeLineUnloadRes",lua_worldserver_CWorldPlayer_changeLineUnloadRes);
        tolua_function(tolua_S,"toString",lua_worldserver_CWorldPlayer_toString);
        tolua_function(tolua_S,"changeLineUnloadReq",lua_worldserver_CWorldPlayer_changeLineUnloadReq);
        tolua_function(tolua_S,"setLoginManager",lua_worldserver_CWorldPlayer_setLoginManager);
        tolua_function(tolua_S,"closeRecharge",lua_worldserver_CWorldPlayer_closeRecharge);
        tolua_function(tolua_S,"setLoginKey",lua_worldserver_CWorldPlayer_setLoginKey);
        tolua_function(tolua_S,"getCurrentUser",lua_worldserver_CWorldPlayer_getCurrentUser);
        tolua_function(tolua_S,"onAddToEnter",lua_worldserver_CWorldPlayer_onAddToEnter);
        tolua_function(tolua_S,"onUserLogin",lua_worldserver_CWorldPlayer_onUserLogin);
        tolua_function(tolua_S,"getDbIndex",lua_worldserver_CWorldPlayer_getDbIndex);
        tolua_function(tolua_S,"isMaxRoleNum",lua_worldserver_CWorldPlayer_isMaxRoleNum);
        tolua_function(tolua_S,"createRoleReq",lua_worldserver_CWorldPlayer_createRoleReq);
        tolua_function(tolua_S,"key2ToString",lua_worldserver_CWorldPlayer_key2ToString);
        tolua_function(tolua_S,"isEnterGame",lua_worldserver_CWorldPlayer_isEnterGame);
        tolua_function(tolua_S,"onRemoveFromEnter",lua_worldserver_CWorldPlayer_onRemoveFromEnter);
        tolua_function(tolua_S,"onAddToReady",lua_worldserver_CWorldPlayer_onAddToReady);
        tolua_function(tolua_S,"getChisourceWay",lua_worldserver_CWorldPlayer_getChisourceWay);
        tolua_function(tolua_S,"setGmPower",lua_worldserver_CWorldPlayer_setGmPower);
        tolua_function(tolua_S,"getGmPower",lua_worldserver_CWorldPlayer_getGmPower);
        tolua_function(tolua_S,"setKey2",lua_worldserver_CWorldPlayer_setKey2);
        tolua_function(tolua_S,"onBeforeRequst",lua_worldserver_CWorldPlayer_onBeforeRequst);
        tolua_function(tolua_S,"isLoadRoleDataStatus",lua_worldserver_CWorldPlayer_isLoadRoleDataStatus);
        tolua_function(tolua_S,"quitGameRes",lua_worldserver_CWorldPlayer_quitGameRes);
        tolua_function(tolua_S,"quitGameReq",lua_worldserver_CWorldPlayer_quitGameReq);
        tolua_function(tolua_S,"setMapServerID",lua_worldserver_CWorldPlayer_setMapServerID);
        tolua_function(tolua_S,"quitByDbClose",lua_worldserver_CWorldPlayer_quitByDbClose);
        tolua_function(tolua_S,"createRoleFailed",lua_worldserver_CWorldPlayer_createRoleFailed);
        tolua_function(tolua_S,"loadRoleDataSuccess",lua_worldserver_CWorldPlayer_loadRoleDataSuccess);
        tolua_function(tolua_S,"setDbIndex",lua_worldserver_CWorldPlayer_setDbIndex);
        tolua_function(tolua_S,"loginSuccess",lua_worldserver_CWorldPlayer_loginSuccess);
        tolua_function(tolua_S,"isAccountVerifyStatus",lua_worldserver_CWorldPlayer_isAccountVerifyStatus);
        tolua_function(tolua_S,"onRoleHeart",lua_worldserver_CWorldPlayer_onRoleHeart);
        tolua_function(tolua_S,"isVerifyPass",lua_worldserver_CWorldPlayer_isVerifyPass);
        tolua_function(tolua_S,"isLoginGame",lua_worldserver_CWorldPlayer_isLoginGame);
        tolua_function(tolua_S,"getKey2",lua_worldserver_CWorldPlayer_getKey2);
        tolua_function(tolua_S,"isIdle",lua_worldserver_CWorldPlayer_isIdle);
        tolua_function(tolua_S,"isPlaying",lua_worldserver_CWorldPlayer_isPlaying);
        tolua_function(tolua_S,"onRemoveFromReady",lua_worldserver_CWorldPlayer_onRemoveFromReady);
        tolua_function(tolua_S,"getCurrentRoleUID",lua_worldserver_CWorldPlayer_getCurrentRoleUID);
        tolua_function(tolua_S,"getLoginManager",lua_worldserver_CWorldPlayer_getLoginManager);
        tolua_function(tolua_S,"loadRoleDataFailed",lua_worldserver_CWorldPlayer_loadRoleDataFailed);
        tolua_function(tolua_S,"cleanRole",lua_worldserver_CWorldPlayer_cleanRole);
        tolua_function(tolua_S,"checkRequest",lua_worldserver_CWorldPlayer_checkRequest);
        tolua_function(tolua_S,"onBerforeLoadRoleData",lua_worldserver_CWorldPlayer_onBerforeLoadRoleData);
        tolua_function(tolua_S,"getAccountID",lua_worldserver_CWorldPlayer_getAccountID);
        tolua_function(tolua_S,"onAddToLogout",lua_worldserver_CWorldPlayer_onAddToLogout);
        tolua_function(tolua_S,"keyToString",lua_worldserver_CWorldPlayer_keyToString);
        tolua_function(tolua_S,"getSourceWay",lua_worldserver_CWorldPlayer_getSourceWay);
        tolua_function(tolua_S,"unloadRoleDataFailed",lua_worldserver_CWorldPlayer_unloadRoleDataFailed);
        tolua_function(tolua_S,"quit",lua_worldserver_CWorldPlayer_quit);
        tolua_function(tolua_S,"hasRole",lua_worldserver_CWorldPlayer_hasRole);
        tolua_function(tolua_S,"transLimitInfo",lua_worldserver_CWorldPlayer_transLimitInfo);
        tolua_function(tolua_S,"unloadRoleDataReq",lua_worldserver_CWorldPlayer_unloadRoleDataReq);
        tolua_function(tolua_S,"doLoginVerify",lua_worldserver_CWorldPlayer_doLoginVerify);
        tolua_function(tolua_S,"createRoleSuccess",lua_worldserver_CWorldPlayer_createRoleSuccess);
        tolua_function(tolua_S,"onUpdateEnterQue",lua_worldserver_CWorldPlayer_onUpdateEnterQue);
        tolua_function(tolua_S,"getLoginKey",lua_worldserver_CWorldPlayer_getLoginKey);
        tolua_function(tolua_S,"getMapServerID",lua_worldserver_CWorldPlayer_getMapServerID);
        tolua_function(tolua_S,"getSocketIndex",lua_worldserver_CWorldPlayer_getSocketIndex);
        tolua_function(tolua_S,"addRole",lua_worldserver_CWorldPlayer_addRole);
        tolua_function(tolua_S,"isRechargeStatus",lua_worldserver_CWorldPlayer_isRechargeStatus);
        tolua_function(tolua_S,"heartOutTime",lua_worldserver_CWorldPlayer_heartOutTime);
        tolua_function(tolua_S,"onBeforeResponse",lua_worldserver_CWorldPlayer_onBeforeResponse);
        tolua_function(tolua_S,"isKey",lua_worldserver_CWorldPlayer_isKey);
        tolua_function(tolua_S,"loginQuitReq",lua_worldserver_CWorldPlayer_loginQuitReq);
        tolua_function(tolua_S,"changeLineRes",lua_worldserver_CWorldPlayer_changeLineRes);
        tolua_function(tolua_S,"changeLineReq",lua_worldserver_CWorldPlayer_changeLineReq);
        tolua_function(tolua_S,"getCurrentObjUID",lua_worldserver_CWorldPlayer_getCurrentObjUID);
        tolua_function(tolua_S,"getQueType",lua_worldserver_CWorldPlayer_getQueType);
        tolua_function(tolua_S,"kickByOtherPlayer",lua_worldserver_CWorldPlayer_kickByOtherPlayer);
        tolua_function(tolua_S,"setChangeLine",lua_worldserver_CWorldPlayer_setChangeLine);
        tolua_function(tolua_S,"setPlayerStatus",lua_worldserver_CWorldPlayer_setPlayerStatus);
        tolua_function(tolua_S,"getKey",lua_worldserver_CWorldPlayer_getKey);
        tolua_function(tolua_S,"onBeforeLogin",lua_worldserver_CWorldPlayer_onBeforeLogin);
        tolua_function(tolua_S,"getCWorldLoginRoleList",lua_worldserver_CWorldPlayer_getCWorldLoginRoleList);
        tolua_function(tolua_S,"isChangeLineStatus",lua_worldserver_CWorldPlayer_isChangeLineStatus);
        tolua_function(tolua_S,"unloadRoleDataAll",lua_worldserver_CWorldPlayer_unloadRoleDataAll);
        tolua_function(tolua_S,"setChisourceWay",lua_worldserver_CWorldPlayer_setChisourceWay);
        tolua_function(tolua_S,"setKey",lua_worldserver_CWorldPlayer_setKey);
        tolua_function(tolua_S,"setSocketIndex",lua_worldserver_CWorldPlayer_setSocketIndex);
        tolua_function(tolua_S,"startRecharge",lua_worldserver_CWorldPlayer_startRecharge);
        tolua_function(tolua_S,"quitBySocketClose",lua_worldserver_CWorldPlayer_quitBySocketClose);
        tolua_function(tolua_S,"isLoadRoleDataReq",lua_worldserver_CWorldPlayer_isLoadRoleDataReq);
        tolua_function(tolua_S,"loginGameRes",lua_worldserver_CWorldPlayer_loginGameRes);
        tolua_function(tolua_S,"loginGameReq",lua_worldserver_CWorldPlayer_loginGameReq);
        tolua_function(tolua_S,"update",lua_worldserver_CWorldPlayer_update);
        tolua_function(tolua_S,"getPlayerStatus",lua_worldserver_CWorldPlayer_getPlayerStatus);
        tolua_function(tolua_S,"onAfterLogin",lua_worldserver_CWorldPlayer_onAfterLogin);
        tolua_function(tolua_S,"setLoginTime",lua_worldserver_CWorldPlayer_setLoginTime);
        tolua_function(tolua_S,"getFirstRoleUID",lua_worldserver_CWorldPlayer_getFirstRoleUID);
        tolua_function(tolua_S,"onRemoveFromLogout",lua_worldserver_CWorldPlayer_onRemoveFromLogout);
        tolua_function(tolua_S,"unloadRoleDataSuccess",lua_worldserver_CWorldPlayer_unloadRoleDataSuccess);
        tolua_function(tolua_S,"getDbHandler",lua_worldserver_CWorldPlayer_getDbHandler);
        tolua_function(tolua_S,"quitByMapServerClose",lua_worldserver_CWorldPlayer_quitByMapServerClose);
        tolua_function(tolua_S,"setSourceWay",lua_worldserver_CWorldPlayer_setSourceWay);
        tolua_function(tolua_S,"getRoleNum",lua_worldserver_CWorldPlayer_getRoleNum);
        tolua_function(tolua_S,"isRequstStatus",lua_worldserver_CWorldPlayer_isRequstStatus);
        tolua_function(tolua_S,"isDataHasFreedStatus",lua_worldserver_CWorldPlayer_isDataHasFreedStatus);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldPlayer).name();
    g_luaType[typeName] = "CWorldPlayer";
    g_typeCast["CWorldPlayer"] = "CWorldPlayer";
    return 1;
}

int lua_worldserver_CWorldPlayerMgr_genRoleName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_genRoleName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CCharArray1<50> ret = cobj->genRoleName();
        array_string1_to_luaval(tolua_S,ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:genRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_genRoleName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_genRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_genRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->genRoleUID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:genRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_genRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findInEnterByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findInEnterByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInEnterByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInEnterByAccountID(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInEnterByAccountID");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayerMgr:findInEnterByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInEnterByAccountID(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findInEnterByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findInEnterByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_setGenRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_setGenRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        unsigned long long arg0;
        unsigned int arg1;
        unsigned int arg2;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:setGenRoleUID");

        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CWorldPlayerMgr:setGenRoleUID");

        ok &= luaval_to_uint32(tolua_S, 4,(uint32*)&arg2, "CWorldPlayerMgr:setGenRoleUID");
        if(!ok)
            return 0;
        cobj->setGenRoleUID(arg0, arg1, arg2);
        return 0;
    }

    gxError("CWorldPlayerMgr:setGenRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_setGenRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findInReadyBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findInReadyBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInReadyBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInReadyBySocketIndex(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInReadyBySocketIndex");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayerMgr:findInReadyBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInReadyBySocketIndex(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findInReadyBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findInReadyBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_genTempRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_genTempRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->genTempRoleUID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:genTempRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_genTempRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findInQueTypeBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findInQueTypeBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        EManagerQueType arg0;
        unsigned long long arg1;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayerMgr:findInQueTypeBySocketIndex");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldPlayerMgr:findInQueTypeBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInQueTypeBySocketIndex(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 3) 
    {
        EManagerQueType arg0;
        unsigned long long arg1;
        bool arg2;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayerMgr:findInQueTypeBySocketIndex");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldPlayerMgr:findInQueTypeBySocketIndex");

        ok &= luaval_to_boolean(tolua_S, 4,(bool*)&arg2, "CWorldPlayerMgr:findInQueTypeBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInQueTypeBySocketIndex(arg0, arg1, arg2);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findInQueTypeBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findInQueTypeBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findInQueTypeByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findInQueTypeByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        EManagerQueType arg0;
        unsigned long long arg1;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayerMgr:findInQueTypeByAccountID");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldPlayerMgr:findInQueTypeByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInQueTypeByAccountID(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 3) 
    {
        EManagerQueType arg0;
        unsigned long long arg1;
        bool arg2;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayerMgr:findInQueTypeByAccountID");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldPlayerMgr:findInQueTypeByAccountID");

        ok &= luaval_to_boolean(tolua_S, 4,(bool*)&arg2, "CWorldPlayerMgr:findInQueTypeByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInQueTypeByAccountID(arg0, arg1, arg2);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findInQueTypeByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findInQueTypeByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findByAccountID(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findByAccountID");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayerMgr:findByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findByAccountID(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_update(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldPlayerMgr:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CWorldPlayerMgr:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findInEnterBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findInEnterBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInEnterBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInEnterBySocketIndex(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInEnterBySocketIndex");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayerMgr:findInEnterBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInEnterBySocketIndex(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findInEnterBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findInEnterBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_kickPlayerByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_kickPlayerByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:kickPlayerByAccountID");
        if(!ok)
            return 0;
        cobj->kickPlayerByAccountID(arg0);
        return 0;
    }

    gxError("CWorldPlayerMgr:kickPlayerByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_kickPlayerByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findInLogoutByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findInLogoutByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInLogoutByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInLogoutByAccountID(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInLogoutByAccountID");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayerMgr:findInLogoutByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInLogoutByAccountID(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findInLogoutByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findInLogoutByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findBySocketIndex(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findBySocketIndex");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayerMgr:findBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findBySocketIndex(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findInReadyByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findInReadyByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInReadyByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInReadyByAccountID(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInReadyByAccountID");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayerMgr:findInReadyByAccountID");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInReadyByAccountID(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findInReadyByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findInReadyByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_getTempRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_getTempRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getTempRoleUID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:getTempRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_getTempRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_closeByMapServer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_closeByMapServer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldPlayerMgr:closeByMapServer");
        if(!ok)
            return 0;
        cobj->closeByMapServer(arg0);
        return 0;
    }

    gxError("CWorldPlayerMgr:closeByMapServer has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_closeByMapServer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_findInLogoutBySocketIndex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldPlayerMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldPlayerMgr_findInLogoutBySocketIndex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInLogoutBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInLogoutBySocketIndex(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 2) 
    {
        unsigned long long arg0;
        bool arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldPlayerMgr:findInLogoutBySocketIndex");

        ok &= luaval_to_boolean(tolua_S, 3,(bool*)&arg1, "CWorldPlayerMgr:findInLogoutBySocketIndex");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->findInLogoutBySocketIndex(arg0, arg1);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldPlayerMgr:findInLogoutBySocketIndex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_findInLogoutBySocketIndex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldPlayerMgr_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldPlayerMgr* ret = CWorldPlayerMgr::GetPtr();
        object_to_luaval<CWorldPlayerMgr>(tolua_S, "CWorldPlayerMgr",(CWorldPlayerMgr*)ret);
        return 1;
    }
    gxError("CWorldPlayerMgr:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldPlayerMgr_GetPtr'.", &tolua_err);
    return 0;
}
int lua_worldserver_CWorldPlayerMgr_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldPlayerMgr* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldPlayerMgr();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldPlayerMgr");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldPlayerMgr:CWorldPlayerMgr has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldPlayerMgr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldPlayerMgr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldPlayerMgr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldPlayerMgr* self = (CWorldPlayerMgr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldPlayerMgr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldPlayerMgr");
    tolua_cclass(tolua_S,"CWorldPlayerMgr","CWorldPlayerMgr","CGamePlayerMgr2Pool<CWorldPlayer>",lua_worldserver_CWorldPlayerMgr_finalize);

    tolua_beginmodule(tolua_S,"CWorldPlayerMgr");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldPlayerMgr_constructor);
        tolua_function(tolua_S,"genRoleName",lua_worldserver_CWorldPlayerMgr_genRoleName);
        tolua_function(tolua_S,"genRoleUID",lua_worldserver_CWorldPlayerMgr_genRoleUID);
        tolua_function(tolua_S,"findInEnterByAccountID",lua_worldserver_CWorldPlayerMgr_findInEnterByAccountID);
        tolua_function(tolua_S,"setGenRoleUID",lua_worldserver_CWorldPlayerMgr_setGenRoleUID);
        tolua_function(tolua_S,"findInReadyBySocketIndex",lua_worldserver_CWorldPlayerMgr_findInReadyBySocketIndex);
        tolua_function(tolua_S,"genTempRoleUID",lua_worldserver_CWorldPlayerMgr_genTempRoleUID);
        tolua_function(tolua_S,"findInQueTypeBySocketIndex",lua_worldserver_CWorldPlayerMgr_findInQueTypeBySocketIndex);
        tolua_function(tolua_S,"findInQueTypeByAccountID",lua_worldserver_CWorldPlayerMgr_findInQueTypeByAccountID);
        tolua_function(tolua_S,"findByAccountID",lua_worldserver_CWorldPlayerMgr_findByAccountID);
        tolua_function(tolua_S,"update",lua_worldserver_CWorldPlayerMgr_update);
        tolua_function(tolua_S,"findInEnterBySocketIndex",lua_worldserver_CWorldPlayerMgr_findInEnterBySocketIndex);
        tolua_function(tolua_S,"kickPlayerByAccountID",lua_worldserver_CWorldPlayerMgr_kickPlayerByAccountID);
        tolua_function(tolua_S,"findInLogoutByAccountID",lua_worldserver_CWorldPlayerMgr_findInLogoutByAccountID);
        tolua_function(tolua_S,"findBySocketIndex",lua_worldserver_CWorldPlayerMgr_findBySocketIndex);
        tolua_function(tolua_S,"findInReadyByAccountID",lua_worldserver_CWorldPlayerMgr_findInReadyByAccountID);
        tolua_function(tolua_S,"getTempRoleUID",lua_worldserver_CWorldPlayerMgr_getTempRoleUID);
        tolua_function(tolua_S,"closeByMapServer",lua_worldserver_CWorldPlayerMgr_closeByMapServer);
        tolua_function(tolua_S,"findInLogoutBySocketIndex",lua_worldserver_CWorldPlayerMgr_findInLogoutBySocketIndex);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CWorldPlayerMgr_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldPlayerMgr).name();
    g_luaType[typeName] = "CWorldPlayerMgr";
    g_typeCast["CWorldPlayerMgr"] = "CWorldPlayerMgr";
    return 1;
}

int lua_worldserver_CSqlConnectionManagerBase_getRoleUIDByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_getRoleUIDByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:getRoleUIDByAccountID");
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getRoleUIDByAccountID(arg0);
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:getRoleUIDByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_getRoleUIDByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_loadUserData(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_loadUserData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        UserDbData* arg0;

        ok &= luaval_to_object<UserDbData>(tolua_S, 2, "UserDbData", &arg0, "CSqlConnectionManagerBase:loadUserData");
        if(!ok)
            return 0;
        bool ret = cobj->loadUserData(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:loadUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_loadUserData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_addAwardBindRmb(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_addAwardBindRmb'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        int arg0;
        int arg1;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CSqlConnectionManagerBase:addAwardBindRmb");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CSqlConnectionManagerBase:addAwardBindRmb");
        if(!ok)
            return 0;
        bool ret = cobj->addAwardBindRmb(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:addAwardBindRmb has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_addAwardBindRmb'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_updateUserData(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_updateUserData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned long long arg0;
        UserDbData* arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:updateUserData");

        ok &= luaval_to_object<UserDbData>(tolua_S, 3, "UserDbData", &arg1, "CSqlConnectionManagerBase:updateUserData");
        if(!ok)
            return 0;
        bool ret = cobj->updateUserData(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:updateUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_updateUserData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_addRoleAwardBindRmb(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_addRoleAwardBindRmb'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        unsigned long long arg0;
        unsigned long long arg1;
        int arg2;
        int arg3;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:addRoleAwardBindRmb");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CSqlConnectionManagerBase:addRoleAwardBindRmb");

        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CSqlConnectionManagerBase:addRoleAwardBindRmb");

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CSqlConnectionManagerBase:addRoleAwardBindRmb");
        if(!ok)
            return 0;
        bool ret = cobj->addRoleAwardBindRmb(arg0, arg1, arg2, arg3);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:addRoleAwardBindRmb has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_addRoleAwardBindRmb'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_loadAllUser(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_loadAllUser'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->loadAllUser();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:loadAllUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_loadAllUser'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_getLastLoginRoleUIDByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_getLastLoginRoleUIDByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:getLastLoginRoleUIDByAccountID");
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getLastLoginRoleUIDByAccountID(arg0);
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:getLastLoginRoleUIDByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_getLastLoginRoleUIDByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_addAwardItem(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_addAwardItem'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        unsigned long long arg0;
        unsigned short arg1;
        short arg2;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:addAwardItem");

        ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CSqlConnectionManagerBase:addAwardItem");

        ok &= luaval_to_sint16(tolua_S, 4,(sint16*)&arg2, "CSqlConnectionManagerBase:addAwardItem");
        if(!ok)
            return 0;
        bool ret = cobj->addAwardItem(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:addAwardItem has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_addAwardItem'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_changeRoleObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_changeRoleObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned long long arg0;
        unsigned int arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:changeRoleObjUID");

        ok &= luaval_to_uint32(tolua_S, 3,(uint32*)&arg1, "CSqlConnectionManagerBase:changeRoleObjUID");
        if(!ok)
            return 0;
        bool ret = cobj->changeRoleObjUID(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:changeRoleObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_changeRoleObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_addAccountRmb(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_addAccountRmb'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        unsigned long long arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:addAccountRmb");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CSqlConnectionManagerBase:addAccountRmb");

        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CSqlConnectionManagerBase:addAccountRmb");
        if(!ok)
            return 0;
        bool ret = cobj->addAccountRmb(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:addAccountRmb has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_addAccountRmb'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_deleteUserData(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_deleteUserData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:deleteUserData");
        if(!ok)
            return 0;
        bool ret = cobj->deleteUserData(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:deleteUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_deleteUserData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_loadAllUserRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_loadAllUserRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::vector<unsigned long long, std::allocator<unsigned long long> > arg0;

        ok &= luaval_to_vector(tolua_S, 2, "std::vector<unsigned long long, std::allocator<unsigned long long> >", &arg0, "CSqlConnectionManagerBase:loadAllUserRoleUID");
        if(!ok)
            return 0;
        bool ret = cobj->loadAllUserRoleUID(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:loadAllUserRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_loadAllUserRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_addUserData(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_addUserData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        UserDbData* arg0;

        ok &= luaval_to_object<UserDbData>(tolua_S, 2, "UserDbData", &arg0, "CSqlConnectionManagerBase:addUserData");
        if(!ok)
            return 0;
        bool ret = cobj->addUserData(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:addUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_addUserData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_delRole(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_delRole'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned long long arg0;
        const char* arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:delRole");

        CScriptString arg1_tmp; ok &= luaval_to_script_string(tolua_S, 3, &arg1_tmp, "CSqlConnectionManagerBase:delRole"); arg1 = (char*)arg1_tmp.buffer;
        if(!ok)
            return 0;
        bool ret = cobj->delRole(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:delRole has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_delRole'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_getRoleNameByRoleId(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_getRoleNameByRoleId'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:getRoleNameByRoleId");
        if(!ok)
            return 0;
        CCharArray1<50> ret = cobj->getRoleNameByRoleId(arg0);
        array_string1_to_luaval(tolua_S,ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:getRoleNameByRoleId has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_getRoleNameByRoleId'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_addTempRechargeRecord(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_addTempRechargeRecord'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        GXMISC::CFixString<50> arg0;
        unsigned long long arg1;
        int arg2;
        int arg3;

        ok &= luaval_to_fixstring(tolua_S, 2,&arg0, "CSqlConnectionManagerBase:addTempRechargeRecord");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CSqlConnectionManagerBase:addTempRechargeRecord");

        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CSqlConnectionManagerBase:addTempRechargeRecord");

        ok &= luaval_to_sint32(tolua_S, 5,(sint32*)&arg3, "CSqlConnectionManagerBase:addTempRechargeRecord");
        if(!ok)
            return 0;
        bool ret = cobj->addTempRechargeRecord(arg0, arg1, arg2, arg3);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:addTempRechargeRecord has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_addTempRechargeRecord'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_getRoleLevelByRoleId(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_getRoleLevelByRoleId'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:getRoleLevelByRoleId");
        if(!ok)
            return 0;
        unsigned char ret = cobj->getRoleLevelByRoleId(arg0);
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:getRoleLevelByRoleId has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_getRoleLevelByRoleId'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_delTempRechargeRecord(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_delTempRechargeRecord'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        GXMISC::CFixString<50> arg0;

        ok &= luaval_to_fixstring(tolua_S, 2,&arg0, "CSqlConnectionManagerBase:delTempRechargeRecord");
        if(!ok)
            return 0;
        bool ret = cobj->delTempRechargeRecord(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:delTempRechargeRecord has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_delTempRechargeRecord'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_updateTempRechargeRecord(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_updateTempRechargeRecord'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        GXMISC::CFixString<50> arg0;
        char arg1;

        ok &= luaval_to_fixstring(tolua_S, 2,&arg0, "CSqlConnectionManagerBase:updateTempRechargeRecord");

        ok &= luaval_to_sint8(tolua_S, 3,(sint8*)&arg1, "CSqlConnectionManagerBase:updateTempRechargeRecord");
        if(!ok)
            return 0;
        bool ret = cobj->updateTempRechargeRecord(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:updateTempRechargeRecord has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_updateTempRechargeRecord'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_accountRmbQuery(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err)) goto tolua_lerror;
    cobj = (CSqlConnectionManagerBase*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CSqlConnectionManagerBase_accountRmbQuery'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        unsigned long long arg0;
        int arg1;
        int arg2;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CSqlConnectionManagerBase:accountRmbQuery");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CSqlConnectionManagerBase:accountRmbQuery");

        ok &= luaval_to_sint32(tolua_S, 4,(sint32*)&arg2, "CSqlConnectionManagerBase:accountRmbQuery");
        if(!ok)
            return 0;
        bool ret = cobj->accountRmbQuery(arg0, arg1, arg2);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CSqlConnectionManagerBase:accountRmbQuery has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CSqlConnectionManagerBase_accountRmbQuery'.",&tolua_err);
	return 0;
}
int lua_worldserver_CSqlConnectionManagerBase_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManagerBase* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CSqlConnectionManagerBase();
        tolua_pushusertype(tolua_S,(void*)cobj,"CSqlConnectionManagerBase");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CSqlConnectionManagerBase:CSqlConnectionManagerBase has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CSqlConnectionManagerBase_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CSqlConnectionManagerBase)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CSqlConnectionManagerBase",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CSqlConnectionManagerBase* self = (CSqlConnectionManagerBase*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CSqlConnectionManagerBase(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CSqlConnectionManagerBase");
    tolua_cclass(tolua_S,"CSqlConnectionManagerBase","CSqlConnectionManagerBase","CDbConnectionManager<CSqlConnectionManagerBase>",lua_worldserver_CSqlConnectionManagerBase_finalize);

    tolua_beginmodule(tolua_S,"CSqlConnectionManagerBase");
        tolua_function(tolua_S,"new",lua_worldserver_CSqlConnectionManagerBase_constructor);
        tolua_function(tolua_S,"getRoleUIDByAccountID",lua_worldserver_CSqlConnectionManagerBase_getRoleUIDByAccountID);
        tolua_function(tolua_S,"loadUserData",lua_worldserver_CSqlConnectionManagerBase_loadUserData);
        tolua_function(tolua_S,"addAwardBindRmb",lua_worldserver_CSqlConnectionManagerBase_addAwardBindRmb);
        tolua_function(tolua_S,"updateUserData",lua_worldserver_CSqlConnectionManagerBase_updateUserData);
        tolua_function(tolua_S,"addRoleAwardBindRmb",lua_worldserver_CSqlConnectionManagerBase_addRoleAwardBindRmb);
        tolua_function(tolua_S,"loadAllUser",lua_worldserver_CSqlConnectionManagerBase_loadAllUser);
        tolua_function(tolua_S,"getLastLoginRoleUIDByAccountID",lua_worldserver_CSqlConnectionManagerBase_getLastLoginRoleUIDByAccountID);
        tolua_function(tolua_S,"addAwardItem",lua_worldserver_CSqlConnectionManagerBase_addAwardItem);
        tolua_function(tolua_S,"changeRoleObjUID",lua_worldserver_CSqlConnectionManagerBase_changeRoleObjUID);
        tolua_function(tolua_S,"addAccountRmb",lua_worldserver_CSqlConnectionManagerBase_addAccountRmb);
        tolua_function(tolua_S,"deleteUserData",lua_worldserver_CSqlConnectionManagerBase_deleteUserData);
        tolua_function(tolua_S,"loadAllUserRoleUID",lua_worldserver_CSqlConnectionManagerBase_loadAllUserRoleUID);
        tolua_function(tolua_S,"addUserData",lua_worldserver_CSqlConnectionManagerBase_addUserData);
        tolua_function(tolua_S,"delRole",lua_worldserver_CSqlConnectionManagerBase_delRole);
        tolua_function(tolua_S,"getRoleNameByRoleId",lua_worldserver_CSqlConnectionManagerBase_getRoleNameByRoleId);
        tolua_function(tolua_S,"addTempRechargeRecord",lua_worldserver_CSqlConnectionManagerBase_addTempRechargeRecord);
        tolua_function(tolua_S,"getRoleLevelByRoleId",lua_worldserver_CSqlConnectionManagerBase_getRoleLevelByRoleId);
        tolua_function(tolua_S,"delTempRechargeRecord",lua_worldserver_CSqlConnectionManagerBase_delTempRechargeRecord);
        tolua_function(tolua_S,"updateTempRechargeRecord",lua_worldserver_CSqlConnectionManagerBase_updateTempRechargeRecord);
        tolua_function(tolua_S,"accountRmbQuery",lua_worldserver_CSqlConnectionManagerBase_accountRmbQuery);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CSqlConnectionManagerBase).name();
    g_luaType[typeName] = "CSqlConnectionManagerBase";
    g_typeCast["CSqlConnectionManagerBase"] = "CSqlConnectionManagerBase";
    return 1;
}

int lua_worldserver_CSqlConnectionManager_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CSqlConnectionManager* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CSqlConnectionManager();
        tolua_pushusertype(tolua_S,(void*)cobj,"CSqlConnectionManager");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CSqlConnectionManager:CSqlConnectionManager has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CSqlConnectionManager_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CSqlConnectionManager)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CSqlConnectionManager",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CSqlConnectionManager* self = (CSqlConnectionManager*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CSqlConnectionManager(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CSqlConnectionManager");
    tolua_cclass(tolua_S,"CSqlConnectionManager","CSqlConnectionManager","CSqlConnectionManagerBase",lua_worldserver_CSqlConnectionManager_finalize);

    tolua_beginmodule(tolua_S,"CSqlConnectionManager");
        tolua_function(tolua_S,"new",lua_worldserver_CSqlConnectionManager_constructor);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CSqlConnectionManager).name();
    g_luaType[typeName] = "CSqlConnectionManager";
    g_typeCast["CSqlConnectionManager"] = "CSqlConnectionManager";
    return 1;
}

int lua_worldserver_CWorldUser_setObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUser:setObjUID");
        if(!ok)
            return 0;
        cobj->setObjUID(arg0);
        return 0;
    }

    gxError("CWorldUser:setObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getAccountID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldUser:getAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_keyToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_keyToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->keyToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUser:keyToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_keyToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_isKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_isKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey2();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUser:isKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_isKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getMapPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getMapPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldMapPlayer* ret = cobj->getMapPlayer();
        object_to_luaval<CWorldMapPlayer>(tolua_S, "CWorldMapPlayer",(CWorldMapPlayer*)ret);
        return 1;
    }

    gxError("CWorldUser:getMapPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getMapPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getRoleUpdateData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getRoleUpdateData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        M2WRoleDataUpdate* ret = cobj->getRoleUpdateData();
        object_to_luaval<M2WRoleDataUpdate>(tolua_S, "M2WRoleDataUpdate",(M2WRoleDataUpdate*)ret);
        return 1;
    }

    gxError("CWorldUser:getRoleUpdateData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getRoleUpdateData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUser:setAccountID");
        if(!ok)
            return 0;
        cobj->setAccountID(arg0);
        return 0;
    }

    gxError("CWorldUser:setAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setCloseServerTime(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setCloseServerTime'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUser:setCloseServerTime");
        if(!ok)
            return 0;
        cobj->setCloseServerTime(arg0);
        return 0;
    }

    gxError("CWorldUser:setCloseServerTime has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setCloseServerTime'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setMapServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setMapServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned short arg0;

        ok &= luaval_to_uint16(tolua_S, 2, (uint16*)&arg0, "CWorldUser:setMapServerID");
        if(!ok)
            return 0;
        cobj->setMapServerID(arg0);
        return 0;
    }

    gxError("CWorldUser:setMapServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setMapServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_onBeforeChangeLine(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_onBeforeChangeLine'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        ChangeLineTempData* arg0;
        ESceneType arg1;
        unsigned short arg2;

        ok &= luaval_to_object<ChangeLineTempData>(tolua_S, 2, "ChangeLineTempData", &arg0, "CWorldUser:onBeforeChangeLine");

        ok &= luaval_to_sint32(tolua_S, 3,(sint32*)&arg1, "CWorldUser:onBeforeChangeLine");

        ok &= luaval_to_uint16(tolua_S, 4, (uint16*)&arg2, "CWorldUser:onBeforeChangeLine");
        if(!ok)
            return 0;
        cobj->onBeforeChangeLine(arg0, arg1, arg2);
        return 0;
    }

    gxError("CWorldUser:onBeforeChangeLine has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_onBeforeChangeLine'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_key3ToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_key3ToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->key3ToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUser:key3ToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_key3ToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->getName();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUser:getName has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getLevel(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getLevel'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned char ret = cobj->getLevel();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldUser:getLevel has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getLevel'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getRoleUID();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldUser:getRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_isKey3(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_isKey3'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey3();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUser:isKey3 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_isKey3'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUser:setKey");
        if(!ok)
            return 0;
        cobj->setKey(arg0);
        return 0;
    }

    gxError("CWorldUser:setKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_toString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_toString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const char* ret = cobj->toString();
        tolua_pushstring(tolua_S,(const char*)ret);
        return 1;
    }

    gxError("CWorldUser:toString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_toString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_isKey4(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_isKey4'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey4();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUser:isKey4 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_isKey4'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setJob(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setJob'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CWorldUser:setJob");
        if(!ok)
            return 0;
        cobj->setJob(arg0);
        return 0;
    }

    gxError("CWorldUser:setJob has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setJob'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setRoleUpdateData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setRoleUpdateData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        M2WRoleDataUpdate* arg0;

        ok &= luaval_to_object<M2WRoleDataUpdate>(tolua_S, 2, "M2WRoleDataUpdate", &arg0, "CWorldUser:setRoleUpdateData");
        if(!ok)
            return 0;
        cobj->setRoleUpdateData(arg0);
        return 0;
    }

    gxError("CWorldUser:setRoleUpdateData has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setRoleUpdateData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUser:setRoleUID");
        if(!ok)
            return 0;
        cobj->setRoleUID(arg0);
        return 0;
    }

    gxError("CWorldUser:setRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_updateUserData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_updateUserData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->updateUserData();
        return 0;
    }

    gxError("CWorldUser:updateUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_updateUserData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        std::string arg0;

        ok &= luaval_to_std_string(tolua_S, 2,&arg0, "CWorldUser:setName");
        if(!ok)
            return 0;
        cobj->setName(arg0);
        return 0;
    }

    gxError("CWorldUser:setName has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getKey4(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getKey4'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getKey4();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldUser:getKey4 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getKey4'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setLevel(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setLevel'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CWorldUser:setLevel");
        if(!ok)
            return 0;
        cobj->setLevel(arg0);
        return 0;
    }

    gxError("CWorldUser:setLevel has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setLevel'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_online(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_online'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->online();
        return 0;
    }

    gxError("CWorldUser:online has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_online'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_update(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldUser:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CWorldUser:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getMapServerID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getMapServerID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned short ret = cobj->getMapServerID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldUser:getMapServerID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getMapServerID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getKey3(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getKey3'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned long long ret = cobj->getKey3();
        lua_tinker::push(tolua_S,(uint64)ret);
        return 1;
    }

    gxError("CWorldUser:getKey3 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getKey3'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getObjUID();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldUser:getObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getJob(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getJob'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned char ret = cobj->getJob();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldUser:getJob has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getJob'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CCharArray1<50> ret = cobj->getKey2();
        array_string1_to_luaval(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUser:getKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_offLine(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_offLine'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->offLine();
        return 0;
    }

    gxError("CWorldUser:offLine has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_offLine'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_onAfterChangeLine(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_onAfterChangeLine'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onAfterChangeLine();
        return 0;
    }

    gxError("CWorldUser:onAfterChangeLine has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_onAfterChangeLine'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getWorldPlayer(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getWorldPlayer'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->getWorldPlayer();
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }
    if (argc == 1) 
    {
        bool arg0;

        ok &= luaval_to_boolean(tolua_S, 2,(bool*)&arg0, "CWorldUser:getWorldPlayer");
        if(!ok)
            return 0;
        CWorldPlayer* ret = cobj->getWorldPlayer(arg0);
        object_to_luaval<CWorldPlayer>(tolua_S, "CWorldPlayer",(CWorldPlayer*)ret);
        return 1;
    }

    gxError("CWorldUser:getWorldPlayer has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getWorldPlayer'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setUserData(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setUserData'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CWorldUserData* arg0;

        ok &= luaval_to_object<CWorldUserData>(tolua_S, 2, "CWorldUserData", &arg0, "CWorldUser:setUserData");
        if(!ok)
            return 0;
        cobj->setUserData(arg0);
        return 0;
    }

    gxError("CWorldUser:setUserData has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setUserData'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_key2ToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_key2ToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->key2ToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUser:key2ToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_key2ToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_isKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_isKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->isKey();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUser:isKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_isKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setSex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setSex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned char arg0;

        ok &= luaval_to_uint8(tolua_S, 2,(uint8*)&arg0, "CWorldUser:setSex");
        if(!ok)
            return 0;
        cobj->setSex(arg0);
        return 0;
    }

    gxError("CWorldUser:setSex has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setSex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setKey3(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setKey3'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUser:setKey3");
        if(!ok)
            return 0;
        cobj->setKey3(arg0);
        return 0;
    }

    gxError("CWorldUser:setKey3 has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setKey3'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setKey4(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setKey4'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUser:setKey4");
        if(!ok)
            return 0;
        cobj->setKey4(arg0);
        return 0;
    }

    gxError("CWorldUser:setKey4 has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setKey4'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getSex(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getSex'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned char ret = cobj->getSex();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldUser:getSex has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getSex'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getKey(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getKey'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->getKey();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldUser:getKey has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getKey'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_getIsLoadingDataFromDB(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_getIsLoadingDataFromDB'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        bool ret = cobj->getIsLoadingDataFromDB();
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUser:getIsLoadingDataFromDB has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_getIsLoadingDataFromDB'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_loadDataFromDB(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_loadDataFromDB'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        const UserDbData* arg0;

        ok &= luaval_to_object<const UserDbData>(tolua_S, 2, "UserDbData", &arg0, "CWorldUser:loadDataFromDB");
        if(!ok)
            return 0;
        cobj->loadDataFromDB(arg0);
        return 0;
    }

    gxError("CWorldUser:loadDataFromDB has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_loadDataFromDB'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_onUserPassDay(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_onUserPassDay'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj->onUserPassDay();
        return 0;
    }

    gxError("CWorldUser:onUserPassDay has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_onUserPassDay'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_setKey2(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_setKey2'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CCharArray1<50> arg0;

        ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldUser:setKey2");
        if(!ok)
            return 0;
        cobj->setKey2(arg0);
        return 0;
    }

    gxError("CWorldUser:setKey2 has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_setKey2'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_key4ToString(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUser*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUser_key4ToString'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        const std::string ret = cobj->key4ToString();
        tolua_pushcppstring(tolua_S,ret);
        return 1;
    }

    gxError("CWorldUser:key4ToString has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUser_key4ToString'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUser_constructor(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUser* cobj = nullptr;
    bool ok  = true;


    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        cobj = new CWorldUser();
        tolua_pushusertype(tolua_S,(void*)cobj,"CWorldUser");
        tolua_register_gc(tolua_S,lua_gettop(tolua_S));
        return 1;

    }

    gxError("CWorldUser:CWorldUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

}

static int lua_worldserver_CWorldUser_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldUser)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldUser",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldUser* self = (CWorldUser*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldUser(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldUser");
    tolua_cclass(tolua_S,"CWorldUser","CWorldUser","",lua_worldserver_CWorldUser_finalize);

    tolua_beginmodule(tolua_S,"CWorldUser");
        tolua_function(tolua_S,"new",lua_worldserver_CWorldUser_constructor);
        tolua_function(tolua_S,"setObjUID",lua_worldserver_CWorldUser_setObjUID);
        tolua_function(tolua_S,"getAccountID",lua_worldserver_CWorldUser_getAccountID);
        tolua_function(tolua_S,"keyToString",lua_worldserver_CWorldUser_keyToString);
        tolua_function(tolua_S,"isKey2",lua_worldserver_CWorldUser_isKey2);
        tolua_function(tolua_S,"getMapPlayer",lua_worldserver_CWorldUser_getMapPlayer);
        tolua_function(tolua_S,"getRoleUpdateData",lua_worldserver_CWorldUser_getRoleUpdateData);
        tolua_function(tolua_S,"setAccountID",lua_worldserver_CWorldUser_setAccountID);
        tolua_function(tolua_S,"setCloseServerTime",lua_worldserver_CWorldUser_setCloseServerTime);
        tolua_function(tolua_S,"setMapServerID",lua_worldserver_CWorldUser_setMapServerID);
        tolua_function(tolua_S,"onBeforeChangeLine",lua_worldserver_CWorldUser_onBeforeChangeLine);
        tolua_function(tolua_S,"key3ToString",lua_worldserver_CWorldUser_key3ToString);
        tolua_function(tolua_S,"getName",lua_worldserver_CWorldUser_getName);
        tolua_function(tolua_S,"getLevel",lua_worldserver_CWorldUser_getLevel);
        tolua_function(tolua_S,"getRoleUID",lua_worldserver_CWorldUser_getRoleUID);
        tolua_function(tolua_S,"isKey3",lua_worldserver_CWorldUser_isKey3);
        tolua_function(tolua_S,"setKey",lua_worldserver_CWorldUser_setKey);
        tolua_function(tolua_S,"toString",lua_worldserver_CWorldUser_toString);
        tolua_function(tolua_S,"isKey4",lua_worldserver_CWorldUser_isKey4);
        tolua_function(tolua_S,"setJob",lua_worldserver_CWorldUser_setJob);
        tolua_function(tolua_S,"setRoleUpdateData",lua_worldserver_CWorldUser_setRoleUpdateData);
        tolua_function(tolua_S,"setRoleUID",lua_worldserver_CWorldUser_setRoleUID);
        tolua_function(tolua_S,"updateUserData",lua_worldserver_CWorldUser_updateUserData);
        tolua_function(tolua_S,"setName",lua_worldserver_CWorldUser_setName);
        tolua_function(tolua_S,"getKey4",lua_worldserver_CWorldUser_getKey4);
        tolua_function(tolua_S,"setLevel",lua_worldserver_CWorldUser_setLevel);
        tolua_function(tolua_S,"online",lua_worldserver_CWorldUser_online);
        tolua_function(tolua_S,"update",lua_worldserver_CWorldUser_update);
        tolua_function(tolua_S,"getMapServerID",lua_worldserver_CWorldUser_getMapServerID);
        tolua_function(tolua_S,"getKey3",lua_worldserver_CWorldUser_getKey3);
        tolua_function(tolua_S,"getObjUID",lua_worldserver_CWorldUser_getObjUID);
        tolua_function(tolua_S,"getJob",lua_worldserver_CWorldUser_getJob);
        tolua_function(tolua_S,"getKey2",lua_worldserver_CWorldUser_getKey2);
        tolua_function(tolua_S,"offLine",lua_worldserver_CWorldUser_offLine);
        tolua_function(tolua_S,"onAfterChangeLine",lua_worldserver_CWorldUser_onAfterChangeLine);
        tolua_function(tolua_S,"getWorldPlayer",lua_worldserver_CWorldUser_getWorldPlayer);
        tolua_function(tolua_S,"setUserData",lua_worldserver_CWorldUser_setUserData);
        tolua_function(tolua_S,"key2ToString",lua_worldserver_CWorldUser_key2ToString);
        tolua_function(tolua_S,"isKey",lua_worldserver_CWorldUser_isKey);
        tolua_function(tolua_S,"setSex",lua_worldserver_CWorldUser_setSex);
        tolua_function(tolua_S,"setKey3",lua_worldserver_CWorldUser_setKey3);
        tolua_function(tolua_S,"setKey4",lua_worldserver_CWorldUser_setKey4);
        tolua_function(tolua_S,"getSex",lua_worldserver_CWorldUser_getSex);
        tolua_function(tolua_S,"getKey",lua_worldserver_CWorldUser_getKey);
        tolua_function(tolua_S,"getIsLoadingDataFromDB",lua_worldserver_CWorldUser_getIsLoadingDataFromDB);
        tolua_function(tolua_S,"loadDataFromDB",lua_worldserver_CWorldUser_loadDataFromDB);
        tolua_function(tolua_S,"onUserPassDay",lua_worldserver_CWorldUser_onUserPassDay);
        tolua_function(tolua_S,"setKey2",lua_worldserver_CWorldUser_setKey2);
        tolua_function(tolua_S,"key4ToString",lua_worldserver_CWorldUser_key4ToString);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldUser).name();
    g_luaType[typeName] = "CWorldUser";
    g_typeCast["CWorldUser"] = "CWorldUser";
    return 1;
}

int lua_worldserver_CWorldUserMgr_getNext(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_getNext'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldUser* ret = cobj->getNext();
        object_to_luaval<CWorldUser>(tolua_S, "CWorldUser",(CWorldUser*)ret);
        return 1;
    }

    gxError("CWorldUserMgr:getNext has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_getNext'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_delUserByRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_delUserByRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUserMgr:delUserByRoleUID");
        if(!ok)
            return 0;
        cobj->delUserByRoleUID(arg0);
        return 0;
    }

    gxError("CWorldUserMgr:delUserByRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_delUserByRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_getBegin(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_getBegin'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        CWorldUser* ret = cobj->getBegin();
        object_to_luaval<CWorldUser>(tolua_S, "CWorldUser",(CWorldUser*)ret);
        return 1;
    }

    gxError("CWorldUserMgr:getBegin has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_getBegin'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_isExistByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_isExistByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUserMgr:isExistByAccountID");
        if(!ok)
            return 0;
        bool ret = cobj->isExistByAccountID(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserMgr:isExistByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_isExistByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_addUser(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_addUser'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 3) 
    {
        unsigned int arg0;
        unsigned short arg1;
        CWorldUserData* arg2;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUserMgr:addUser");

        ok &= luaval_to_uint16(tolua_S, 3, (uint16*)&arg1, "CWorldUserMgr:addUser");

        ok &= luaval_to_object<CWorldUserData>(tolua_S, 4, "CWorldUserData", &arg2, "CWorldUserMgr:addUser");
        if(!ok)
            return 0;
        CWorldUser* ret = cobj->addUser(arg0, arg1, arg2);
        object_to_luaval<CWorldUser>(tolua_S, "CWorldUser",(CWorldUser*)ret);
        return 1;
    }

    gxError("CWorldUserMgr:addUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 3);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_addUser'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_findUserByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_findUserByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUserMgr:findUserByAccountID");
        if(!ok)
            return 0;
        CWorldUser* ret = cobj->findUserByAccountID(arg0);
        object_to_luaval<CWorldUser>(tolua_S, "CWorldUser",(CWorldUser*)ret);
        return 1;
    }

    gxError("CWorldUserMgr:findUserByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_findUserByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_delUserByObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_delUserByObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUserMgr:delUserByObjUID");
        if(!ok)
            return 0;
        cobj->delUserByObjUID(arg0);
        return 0;
    }

    gxError("CWorldUserMgr:delUserByObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_delUserByObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_isExistByRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_isExistByRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUserMgr:isExistByRoleUID");
        if(!ok)
            return 0;
        bool ret = cobj->isExistByRoleUID(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserMgr:isExistByRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_isExistByRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_update(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_update'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        int arg0;

        ok &= luaval_to_sint32(tolua_S, 2,(sint32*)&arg0, "CWorldUserMgr:update");
        if(!ok)
            return 0;
        cobj->update(arg0);
        return 0;
    }

    gxError("CWorldUserMgr:update has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_update'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_isExistByRoleName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_isExistByRoleName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CCharArray1<50> arg0;

        ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldUserMgr:isExistByRoleName");
        if(!ok)
            return 0;
        bool ret = cobj->isExistByRoleName(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserMgr:isExistByRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_isExistByRoleName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_delUser(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_delUser'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 4) 
    {
        unsigned int arg0;
        unsigned long long arg1;
        CCharArray1<50> arg2;
        unsigned long long arg3;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUserMgr:delUser");

        ok &= luaval_to_uint64(tolua_S, 3, (uint64*)&arg1, "CWorldUserMgr:delUser");

        ok &= luaval_to_array_string1(tolua_S, 4,&arg2, "CWorldUserMgr:delUser");

        ok &= luaval_to_uint64(tolua_S, 5, (uint64*)&arg3, "CWorldUserMgr:delUser");
        if(!ok)
            return 0;
        cobj->delUser(arg0, arg1, arg2, arg3);
        return 0;
    }

    gxError("CWorldUserMgr:delUser has wrong number of arguments: {0}, was expecting {1} \n", argc, 4);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_delUser'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_init(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_init'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUserMgr:init");
        if(!ok)
            return 0;
        bool ret = cobj->init(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserMgr:init has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_init'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_delUserByAccountID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_delUserByAccountID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUserMgr:delUserByAccountID");
        if(!ok)
            return 0;
        cobj->delUserByAccountID(arg0);
        return 0;
    }

    gxError("CWorldUserMgr:delUserByAccountID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_delUserByAccountID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_findUserByRoleName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_findUserByRoleName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CCharArray1<50> arg0;

        ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldUserMgr:findUserByRoleName");
        if(!ok)
            return 0;
        CWorldUser* ret = cobj->findUserByRoleName(arg0);
        object_to_luaval<CWorldUser>(tolua_S, "CWorldUser",(CWorldUser*)ret);
        return 1;
    }

    gxError("CWorldUserMgr:findUserByRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_findUserByRoleName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_delUserByRoleName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_delUserByRoleName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        CCharArray1<50> arg0;

        ok &= luaval_to_array_string1(tolua_S, 2,&arg0, "CWorldUserMgr:delUserByRoleName");
        if(!ok)
            return 0;
        cobj->delUserByRoleName(arg0);
        return 0;
    }

    gxError("CWorldUserMgr:delUserByRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_delUserByRoleName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_findUserByObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_findUserByObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUserMgr:findUserByObjUID");
        if(!ok)
            return 0;
        CWorldUser* ret = cobj->findUserByObjUID(arg0);
        object_to_luaval<CWorldUser>(tolua_S, "CWorldUser",(CWorldUser*)ret);
        return 1;
    }

    gxError("CWorldUserMgr:findUserByObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_findUserByObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_findUserByRoleUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_findUserByRoleUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned long long arg0;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUserMgr:findUserByRoleUID");
        if(!ok)
            return 0;
        CWorldUser* ret = cobj->findUserByRoleUID(arg0);
        object_to_luaval<CWorldUser>(tolua_S, "CWorldUser",(CWorldUser*)ret);
        return 1;
    }

    gxError("CWorldUserMgr:findUserByRoleUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_findUserByRoleUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_isExistByObjUID(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_isExistByObjUID'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 1) 
    {
        unsigned int arg0;

        ok &= luaval_to_uint32(tolua_S, 2,(uint32*)&arg0, "CWorldUserMgr:isExistByObjUID");
        if(!ok)
            return 0;
        bool ret = cobj->isExistByObjUID(arg0);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserMgr:isExistByObjUID has wrong number of arguments: {0}, was expecting {1} \n", argc, 1);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_isExistByObjUID'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_renameRoleName(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_renameRoleName'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 2) 
    {
        unsigned long long arg0;
        std::string arg1;

        ok &= luaval_to_uint64(tolua_S, 2, (uint64*)&arg0, "CWorldUserMgr:renameRoleName");

        ok &= luaval_to_std_string(tolua_S, 3,&arg1, "CWorldUserMgr:renameRoleName");
        if(!ok)
            return 0;
        bool ret = cobj->renameRoleName(arg0, arg1);
        tolua_pushboolean(tolua_S,(bool)ret);
        return 1;
    }

    gxError("CWorldUserMgr:renameRoleName has wrong number of arguments: {0}, was expecting {1} \n", argc, 2);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_renameRoleName'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_size(lua_State* tolua_S)
{
    int argc = 0;
    CWorldUserMgr* cobj = nullptr;
    bool ok  = true;

	tolua_Error tolua_err;
    if (!tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err)) goto tolua_lerror;
    cobj = (CWorldUserMgr*)tolua_tousertype(tolua_S,1,0);
    if (!cobj) 
    {
        tolua_error(tolua_S,"invalid 'cobj' in function 'lua_worldserver_CWorldUserMgr_size'", nullptr);
        return 0;
    }

    argc = lua_gettop(tolua_S)-1;
    if (argc == 0) 
    {
        if(!ok)
            return 0;
        unsigned int ret = cobj->size();
        tolua_pushnumber(tolua_S,(lua_Number)ret);
        return 1;
    }

    gxError("CWorldUserMgr:size has wrong number of arguments: {0}, was expecting {1} \n", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_size'.",&tolua_err);
	return 0;
}
int lua_worldserver_CWorldUserMgr_GetPtr(lua_State* tolua_S)
{
    int argc = 0;
    bool ok  = true;

    tolua_Error tolua_err;
    if (!tolua_isusertable(tolua_S,1,"CWorldUserMgr",0,&tolua_err)){
		goto tolua_lerror;
	}

    argc = lua_gettop(tolua_S) - 1;

    if (argc == 0)
    {
        if(!ok)
            return 0;
        CWorldUserMgr* ret = CWorldUserMgr::GetPtr();
        object_to_luaval<CWorldUserMgr>(tolua_S, "CWorldUserMgr",(CWorldUserMgr*)ret);
        return 1;
    }
    gxError("CWorldUserMgr:GetPtr has wrong number of arguments: {0}, was expecting {1}\n ", argc, 0);
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'lua_worldserver_CWorldUserMgr_GetPtr'.", &tolua_err);
    return 0;
}
static int lua_worldserver_CWorldUserMgr_finalize(lua_State* tolua_S)
{
    gxDebug("luabindings: finalizing LUA object (CWorldUserMgr)");

    tolua_Error tolua_err;
    if (
    !tolua_isusertype(tolua_S,1,"CWorldUserMgr",0,&tolua_err) ||
    !tolua_isnoobj(tolua_S,2,&tolua_err)
    ){
        goto tolua_lerror;
	}
    else
    {
        CWorldUserMgr* self = (CWorldUserMgr*)  tolua_tousertype(tolua_S,1,0);
        if (!self) tolua_error(tolua_S,"invalid 'self' in function 'delete'", nullptr);
        delete self;
    }
    return 0;

tolua_lerror:
    tolua_error(tolua_S,"#ferror in function 'delete'.",&tolua_err);
    return 0;
}

int lua_register_worldserver_CWorldUserMgr(lua_State* tolua_S)
{
    tolua_usertype(tolua_S,"CWorldUserMgr");
    tolua_cclass(tolua_S,"CWorldUserMgr","CWorldUserMgr","CHashMultiIndex4<CWorldUser, false, 4294967295, '0', 0, 18446744073709551615>",nullptr);

    tolua_beginmodule(tolua_S,"CWorldUserMgr");
        tolua_function(tolua_S,"getNext",lua_worldserver_CWorldUserMgr_getNext);
        tolua_function(tolua_S,"delUserByRoleUID",lua_worldserver_CWorldUserMgr_delUserByRoleUID);
        tolua_function(tolua_S,"getBegin",lua_worldserver_CWorldUserMgr_getBegin);
        tolua_function(tolua_S,"isExistByAccountID",lua_worldserver_CWorldUserMgr_isExistByAccountID);
        tolua_function(tolua_S,"addUser",lua_worldserver_CWorldUserMgr_addUser);
        tolua_function(tolua_S,"findUserByAccountID",lua_worldserver_CWorldUserMgr_findUserByAccountID);
        tolua_function(tolua_S,"delUserByObjUID",lua_worldserver_CWorldUserMgr_delUserByObjUID);
        tolua_function(tolua_S,"isExistByRoleUID",lua_worldserver_CWorldUserMgr_isExistByRoleUID);
        tolua_function(tolua_S,"update",lua_worldserver_CWorldUserMgr_update);
        tolua_function(tolua_S,"isExistByRoleName",lua_worldserver_CWorldUserMgr_isExistByRoleName);
        tolua_function(tolua_S,"delUser",lua_worldserver_CWorldUserMgr_delUser);
        tolua_function(tolua_S,"init",lua_worldserver_CWorldUserMgr_init);
        tolua_function(tolua_S,"delUserByAccountID",lua_worldserver_CWorldUserMgr_delUserByAccountID);
        tolua_function(tolua_S,"findUserByRoleName",lua_worldserver_CWorldUserMgr_findUserByRoleName);
        tolua_function(tolua_S,"delUserByRoleName",lua_worldserver_CWorldUserMgr_delUserByRoleName);
        tolua_function(tolua_S,"findUserByObjUID",lua_worldserver_CWorldUserMgr_findUserByObjUID);
        tolua_function(tolua_S,"findUserByRoleUID",lua_worldserver_CWorldUserMgr_findUserByRoleUID);
        tolua_function(tolua_S,"isExistByObjUID",lua_worldserver_CWorldUserMgr_isExistByObjUID);
        tolua_function(tolua_S,"renameRoleName",lua_worldserver_CWorldUserMgr_renameRoleName);
        tolua_function(tolua_S,"size",lua_worldserver_CWorldUserMgr_size);
        tolua_function(tolua_S,"GetPtr", lua_worldserver_CWorldUserMgr_GetPtr);
    tolua_endmodule(tolua_S);
    std::string typeName = typeid(CWorldUserMgr).name();
    g_luaType[typeName] = "CWorldUserMgr";
    g_typeCast["CWorldUserMgr"] = "CWorldUserMgr";
    return 1;
}
int register_all_worldserver(lua_State* tolua_S)
{
	tolua_open(tolua_S);
	
	tolua_module(tolua_S,nullptr,0);
	tolua_beginmodule(tolua_S,nullptr);

	lua_register_worldserver_CBasePacket(tolua_S);
	lua_register_worldserver_CResponsePacket(tolua_S);
	lua_register_worldserver_CServerPacket(tolua_S);
	lua_register_worldserver_MWUserLogin(tolua_S);
	lua_register_worldserver_PackEncrypt(tolua_S);
	lua_register_worldserver_CBWRegisteRet(tolua_S);
	lua_register_worldserver_CWorldMapServerHandlerBase(tolua_S);
	lua_register_worldserver_CLWLimitInfoUpdate(tolua_S);
	lua_register_worldserver_SceneData(tolua_S);
	lua_register_worldserver_CRequestPacket(tolua_S);
	lua_register_worldserver_MWTransPacket(tolua_S);
	lua_register_worldserver_PacketCreateBrforeInfo(tolua_S);
	lua_register_worldserver_PacketGameCollectInfo(tolua_S);
	lua_register_worldserver_CConfigTbl(tolua_S);
	lua_register_worldserver_CRoleNameRandTbl(tolua_S);
	lua_register_worldserver_IPlayer(tolua_S);
	lua_register_worldserver_CGameDatabaseHandler(tolua_S);
	lua_register_worldserver_CWorldDbHandler(tolua_S);
	lua_register_worldserver_MWRoleQuit(tolua_S);
	lua_register_worldserver_WCRandGenNameRet(tolua_S);
	lua_register_worldserver_WMRenameRoleNameRet(tolua_S);
	lua_register_worldserver_CWMLimitAccountInfo(tolua_S);
	lua_register_worldserver_CWorldLoginServer(tolua_S);
	lua_register_worldserver_CGameSocketPacketHandler(tolua_S);
	lua_register_worldserver_AttackorImpact(tolua_S);
	lua_register_worldserver_CLWLimitAccountInfo(tolua_S);
	lua_register_worldserver_MWLoadRoleDataRet(tolua_S);
	lua_register_worldserver_WMUpdateServer(tolua_S);
	lua_register_worldserver_MWOpenScene(tolua_S);
	lua_register_worldserver_CMapManager(tolua_S);
	lua_register_worldserver_WCVerifyConnectRet(tolua_S);
	lua_register_worldserver_LimitAccountInfo(tolua_S);
	lua_register_worldserver_MWRechargeRet(tolua_S);
	lua_register_worldserver_CRandRoleNameTblLoader(tolua_S);
	lua_register_worldserver__PackBuffer(tolua_S);
	lua_register_worldserver_CWorldDbServerHandler(tolua_S);
	lua_register_worldserver_CLoginWaiter(tolua_S);
	lua_register_worldserver_MapIDPos(tolua_S);
	lua_register_worldserver_CBufferAttr(tolua_S);
	lua_register_worldserver_CLWRegisteRet(tolua_S);
	lua_register_worldserver_CLoginPlayerMgr(tolua_S);
	lua_register_worldserver_MWRegiste(tolua_S);
	lua_register_worldserver_CWorldServerInfo(tolua_S);
	lua_register_worldserver_ExtUseSkill(tolua_S);
	lua_register_worldserver_MapServerUpdate(tolua_S);
	lua_register_worldserver_MWRandRoleName(tolua_S);
	lua_register_worldserver_TUserFlag(tolua_S);
	lua_register_worldserver_WMExchangeGiftRet(tolua_S);
	lua_register_worldserver_WMServerInfo(tolua_S);
	lua_register_worldserver_CMWLimitInfoReq(tolua_S);
	lua_register_worldserver_MCCompress(tolua_S);
	lua_register_worldserver_CWorldDbGameInitRetTask(tolua_S);
	lua_register_worldserver_CWorldDbServerInitTask(tolua_S);
	lua_register_worldserver_CWorldDbConnectVerifyRetTask(tolua_S);
	lua_register_worldserver_CSqlConnectionManagerBase(tolua_S);
	lua_register_worldserver_CWorldLoginServerManager(tolua_S);
	lua_register_worldserver_TUnpacketIDHandler(tolua_S);
	lua_register_worldserver_CWorldUserData(tolua_S);
	lua_register_worldserver_MapIDRangePos(tolua_S);
	lua_register_worldserver_CWLDataUpdate(tolua_S);
	lua_register_worldserver_WMAwardBindRmb(tolua_S);
	lua_register_worldserver_CWorldDbAccountVerifyTask(tolua_S);
	lua_register_worldserver_SockAttr(tolua_S);
	lua_register_worldserver__PackSimpleBuff(tolua_S);
	lua_register_worldserver_CWorldMapPlayer(tolua_S);
	lua_register_worldserver_PackHandleAttr(tolua_S);
	lua_register_worldserver_SkillAttr(tolua_S);
	lua_register_worldserver_MWCloseScene(tolua_S);
	lua_register_worldserver_CLWRoleCreateRet(tolua_S);
	lua_register_worldserver_M2WRoleDataUpdate(tolua_S);
	lua_register_worldserver_ExtendAttr(tolua_S);
	lua_register_worldserver_CWLoginGame(tolua_S);
	lua_register_worldserver_RoleManageInfo(tolua_S);
	lua_register_worldserver_CSkillAttr(tolua_S);
	lua_register_worldserver_CWorldDbRequestTask(tolua_S);
	lua_register_worldserver_CWorldServerConfig(tolua_S);
	lua_register_worldserver_CWorldMapServerHandler(tolua_S);
	lua_register_worldserver_LoadWaitEnter(tolua_S);
	lua_register_worldserver_CWorldPlayerMgr(tolua_S);
	lua_register_worldserver_IAttrBase(tolua_S);
	lua_register_worldserver_WBRechargeRet(tolua_S);
	lua_register_worldserver_CWorldManagerServerHandler(tolua_S);
	lua_register_worldserver_PackMonsterShape(tolua_S);
	lua_register_worldserver_CWVerifyConnect(tolua_S);
	lua_register_worldserver_WMUnloadRoleData(tolua_S);
	lua_register_worldserver_LimitChatDB(tolua_S);
	lua_register_worldserver_CWorldUserMgr(tolua_S);
	lua_register_worldserver_LimitChatInfo(tolua_S);
	lua_register_worldserver_CWLRegiste(tolua_S);
	lua_register_worldserver_WMRandRoleNameRet(tolua_S);
	lua_register_worldserver_LimitChat(tolua_S);
	lua_register_worldserver_MWExchangeGiftReq(tolua_S);
	lua_register_worldserver_MWTrans2WorldPacket(tolua_S);
	lua_register_worldserver_MWUpdateServer(tolua_S);
	lua_register_worldserver_LimitAccount(tolua_S);
	lua_register_worldserver_CWorldLoginRoleList(tolua_S);
	lua_register_worldserver_AreaRect(tolua_S);
	lua_register_worldserver_CBillMod(tolua_S);
	lua_register_worldserver_CWorldLoadUserDataRetTask(tolua_S);
	lua_register_worldserver_W2MUserDataUpdate(tolua_S);
	lua_register_worldserver_LimitServerIDInfo(tolua_S);
	lua_register_worldserver_CWorldServer(tolua_S);
	lua_register_worldserver_CCconfigLoaderParam(tolua_S);
	lua_register_worldserver__LoginRole(tolua_S);
	lua_register_worldserver_CWorldLoadUserDataTask(tolua_S);
	lua_register_worldserver_OwnSkill(tolua_S);
	lua_register_worldserver_CWorldDbConnectVerifyTask(tolua_S);
	lua_register_worldserver_MWUpdateRoleData(tolua_S);
	lua_register_worldserver_MapRangePos(tolua_S);
	lua_register_worldserver_CWorldUserSimpleData(tolua_S);
	lua_register_worldserver_WMChangeLineRet(tolua_S);
	lua_register_worldserver_CWLoginQuit(tolua_S);
	lua_register_worldserver_WMRecharge(tolua_S);
	lua_register_worldserver_CWorldPlayer(tolua_S);
	lua_register_worldserver_CStopTimer(tolua_S);
	lua_register_worldserver_ServerData(tolua_S);
	lua_register_worldserver_WLChargeRmb(tolua_S);
	lua_register_worldserver_CWorldDbServerInitRetTask(tolua_S);
	lua_register_worldserver_CRandGen(tolua_S);
	lua_register_worldserver_WMChangeLine(tolua_S);
	lua_register_worldserver_CMap(tolua_S);
	lua_register_worldserver_CCheckText(tolua_S);
	lua_register_worldserver_CLogoutWaiter(tolua_S);
	lua_register_worldserver_PackCompress(tolua_S);
	lua_register_worldserver_MWGetRandNameList(tolua_S);
	lua_register_worldserver_CWorldDbRoleCreateTask(tolua_S);
	lua_register_worldserver_CScene(tolua_S);
	lua_register_worldserver_WMRegisteRet(tolua_S);
	lua_register_worldserver_PacketLoginTime(tolua_S);
	lua_register_worldserver_CGameMisc(tolua_S);
	lua_register_worldserver_PackLoginRole(tolua_S);
	lua_register_worldserver_UserDbData(tolua_S);
	lua_register_worldserver_WMLoadRoleData(tolua_S);
	lua_register_worldserver_MapPos(tolua_S);
	lua_register_worldserver_CWRandGenName(tolua_S);
	lua_register_worldserver__ChangeMapSaveData(tolua_S);
	lua_register_worldserver_WMGetRandNameListRet(tolua_S);
	lua_register_worldserver_CWBRegiste(tolua_S);
	lua_register_worldserver_MWRoleHeart(tolua_S);
	lua_register_worldserver_CWLRoleCreate(tolua_S);
	lua_register_worldserver_XMServerRegiste(tolua_S);
	lua_register_worldserver_WMTransPacketError(tolua_S);
	lua_register_worldserver_CRandRoleName(tolua_S);
	lua_register_worldserver_ItemIDNum(tolua_S);
	lua_register_worldserver_WCCreateRoleRet(tolua_S);
	lua_register_worldserver_MWRenameRoleName(tolua_S);
	lua_register_worldserver_CWorldDbResponseTask(tolua_S);
	lua_register_worldserver_CWorldCreateRoleRetTask(tolua_S);
	lua_register_worldserver_CWLRoleLogin(tolua_S);
	lua_register_worldserver_WCLoginGameRet(tolua_S);
	lua_register_worldserver_MMChangeScene(tolua_S);
	lua_register_worldserver_MXServerRegisteRet(tolua_S);
	lua_register_worldserver_BuffImpact(tolua_S);
	lua_register_worldserver_AddAttr(tolua_S);
	lua_register_worldserver_PackRoleShape(tolua_S);
	lua_register_worldserver_MWBroadPacket(tolua_S);
	lua_register_worldserver_WorldServerData(tolua_S);
	lua_register_worldserver_CWMLimitChatInfo(tolua_S);
	lua_register_worldserver_ZoneServer(tolua_S);
	lua_register_worldserver_ChangeLineTempData(tolua_S);
	lua_register_worldserver_ServerPwdInfo(tolua_S);
	lua_register_worldserver_PacketNewRegister(tolua_S);
	lua_register_worldserver_CWorldUser(tolua_S);
	lua_register_worldserver_CWorldMapPlayerMgr(tolua_S);
	lua_register_worldserver_PacketSourceWay(tolua_S);
	lua_register_worldserver_MWChangeLine(tolua_S);
	lua_register_worldserver_MWUnloadRoleDataRet(tolua_S);
	lua_register_worldserver_WorldServerName(tolua_S);
	lua_register_worldserver_CScriptEngineCommon(tolua_S);
	lua_register_worldserver_CTimeWaiter(tolua_S);
	lua_register_worldserver_PacketSingletonInfo(tolua_S);
	lua_register_worldserver_CWorldChargingServerHandler(tolua_S);
	lua_register_worldserver_CActionBan(tolua_S);
	lua_register_worldserver_RoleSceneRecord(tolua_S);
	lua_register_worldserver_CWLLimitInfoReq(tolua_S);
	lua_register_worldserver_CSqlConnectionManager(tolua_S);
	lua_register_worldserver_OwnerBuffer(tolua_S);
	lua_register_worldserver_TAdjust(tolua_S);
	lua_register_worldserver_CLoginPlayer(tolua_S);
	lua_register_worldserver_CWCreateRole(tolua_S);
	lua_register_worldserver_Attr(tolua_S);
	lua_register_worldserver_UrlDownFile(tolua_S);
	lua_register_worldserver_LoginServerData(tolua_S);
	lua_register_worldserver_CWorldDbGameInitTask(tolua_S);
	lua_register_worldserver_CWorldAllUserMgr(tolua_S);
	lua_register_worldserver_BWRecharge(tolua_S);
	lua_register_worldserver_AxisPos(tolua_S);
	lua_register_worldserver_ChangeLineWait(tolua_S);
	lua_register_worldserver_CLoginWaiterManager(tolua_S);
	lua_register_worldserver_CSceneManager(tolua_S);
	lua_register_worldserver_WMUpdateUserData(tolua_S);
	lua_register_worldserver_MWRoleKick(tolua_S);
	lua_register_worldserver_RoleHeart(tolua_S);
	lua_register_worldserver_CWorldPlayerHandler(tolua_S);
	lua_register_worldserver_CLWRoleLoginRet(tolua_S);
	lua_register_worldserver_CWorldServerData(tolua_S);
	lua_register_worldserver_CLWLimitChatInfo(tolua_S);
	lua_register_worldserver_CWorldScriptEngine(tolua_S);
	lua_register_worldserver_CWorldLoginServerHandler(tolua_S);
	lua_register_worldserver_MWAnnoucement(tolua_S);
	lua_register_worldserver_CBasePackHandleAry(tolua_S);
	lua_register_worldserver_LoadRoleData(tolua_S);
	lua_register_worldserver_WCLoginQuitRet(tolua_S);
	lua_register_worldserver_LimitAccountDB(tolua_S);
	lua_register_worldserver_CWorldDbAccountVerifyRetTask(tolua_S);
	lua_register_worldserver_CConfigLoaderBase(tolua_S);
	lua_register_worldserver_WMRoleHeartRet(tolua_S);

	tolua_endmodule(tolua_S);
	return 1;
}

